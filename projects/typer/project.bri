/**
 * A small library for parsing and validating arbitrary JavaScript values. Takes
 * heavy influence from the Zod and Runtypes TypeScript libraries.
 */

export const project = {
  name: "typer",
  version: "0.0.0",
};

const checkSymbol: unique symbol = Symbol("check");

const objectKeysSymbol: unique symbol = Symbol("objectKeys");

const literalSymbol: unique symbol = Symbol("literal");

export type ChildError = {
  path?: string | number;
  error: CheckResultError;
};

export type CheckResult<T> = { result: "matches"; value: T } | CheckResultError;

export type CheckResultError = {
  result: "mismatch";
  message: string;
  children?: ChildError[];
};

type JsTypeofs = {
  string: string;
  number: number;
  boolean: boolean;
  symbol: symbol;
  undefined: undefined;
  object: object;
  function: (...args: unknown[]) => unknown;
};

export interface Checker<T> {
  [checkSymbol](value: unknown): CheckResult<T>;
}

export interface ObjectChecker<T> extends Checker<T> {
  [objectKeysSymbol]: { [K in keyof T]: Checker<T[K]> };
}

export interface LiteralChecker<T> extends Checker<T> {
  [literalSymbol]: T;
}

export type Type<T extends Checker<unknown>> = T extends Checker<infer U>
  ? U
  : never;

function createChecker<T>(f: (value: unknown) => CheckResult<T>): Checker<T> {
  return {
    [checkSymbol](value: unknown): CheckResult<T> {
      return f(value);
    },
  };
}

function createPrimitiveChecker<T extends keyof JsTypeofs>(
  type: T,
): Checker<JsTypeofs[T]> {
  return createChecker((value) => {
    if (typeof value === type) {
      return { result: "matches", value: value as JsTypeofs[T] };
    } else {
      return {
        result: "mismatch",
        message: `expected type ${type}, was ${typeof value}`,
      };
    }
  });
}

export function tryParse<T>(
  checker: Checker<T>,
  value: unknown,
): CheckResult<T> {
  return checker[checkSymbol](value);
}

export function parse<T>(checker: Checker<T>, value: unknown): T {
  const result = tryParse(checker, value);

  if (result.result === "matches") {
    return result.value;
  } else {
    throw new Error(`parse error: ${summarizeError(result, [])}`);
  }
}

export function tryParseJson<T>(
  checker: Checker<T>,
  json: string,
): CheckResult<T> {
  let value: unknown;
  try {
    value = JSON.parse(json);
  } catch (error) {
    return {
      result: "mismatch",
      message: `failed to parse JSON: ${error as any}`,
    };
  }

  return tryParse(checker, value);
}

export function parseJson<T>(checker: Checker<T>, json: string): T {
  const result = tryParseJson(checker, json);

  if (result.result === "matches") {
    return result.value;
  } else {
    throw new Error(`parse error: ${summarizeError(result, [])}`);
  }
}

export function check<T>(checker: Checker<T>, value: unknown): value is T {
  return tryParse(checker, value).result === "matches";
}

export function unknown(): Checker<unknown> {
  return createChecker((value) => ({ result: "matches", value }));
}

export function string(): Checker<string> {
  return createPrimitiveChecker("string");
}

export function number(): Checker<number> {
  return createPrimitiveChecker("number");
}

export function boolean(): Checker<boolean> {
  return createPrimitiveChecker("boolean");
}

export function null_(): Checker<null> {
  return createChecker((value) => {
    if (value === null) {
      return { result: "matches", value: null };
    } else {
      return { result: "mismatch", message: "expected null" };
    }
  });
}

export function undefined_(): Checker<undefined> {
  return createChecker((value) => {
    if (value === undefined) {
      return { result: "matches", value: undefined };
    } else {
      return { result: "mismatch", message: "expected undefined" };
    }
  });
}

export function literal<T extends string | number | boolean | null | undefined>(
  value: T,
): LiteralChecker<T> {
  return {
    [literalSymbol]: value,
    [checkSymbol]: (actual) => {
      if (actual === value) {
        return { result: "matches", value };
      } else {
        return {
          result: "mismatch",
          message: `expected ${value}, was ${actual as any}`,
        };
      }
    },
  };
}

export function array<T>(checker: Checker<T>): Checker<T[]> {
  return createChecker((value) => {
    if (!Array.isArray(value)) {
      return { result: "mismatch", message: "expected an array" };
    }

    const childErrors = value.flatMap((item, index): ChildError[] => {
      const result = checker[checkSymbol](item);

      if (result.result === "matches") {
        return [];
      } else {
        return [
          {
            path: index,
            error: result,
          },
        ];
      }
    });

    if (childErrors.length === 0) {
      return { result: "matches", value: value as T[] };
    } else {
      return {
        result: "mismatch",
        message: "one or more array items did not match",
        children: childErrors,
      };
    }
  });
}

export function tuple<Ts extends unknown[]>(
  ...checkers: { [K in keyof Ts]: Checker<Ts[K]> }
): Checker<Ts> {
  return createChecker((value) => {
    if (!Array.isArray(value)) {
      return { result: "mismatch", message: "expected an array" };
    }

    if (value.length < checkers.length) {
      return {
        result: "mismatch",
        message: `expected at least ${checkers.length} items, got ${value.length}`,
      };
    }

    const childErrors = value.flatMap((item, index): ChildError[] => {
      const childChecker = checkers[index];
      if (childChecker === undefined) {
        throw new Error("child checker is null");
      }

      const result = childChecker[checkSymbol](item);

      if (result.result === "matches") {
        return [];
      } else {
        return [
          {
            path: index,
            error: result,
          },
        ];
      }
    });

    if (childErrors.length === 0) {
      return { result: "matches", value: value as Ts };
    } else {
      return {
        result: "mismatch",
        message: "one or more tuple items did not match",
        children: childErrors,
      };
    }
  });
}

export function object<T extends object>(
  checkers: { [K in keyof T]: Checker<T[K]> },
): ObjectChecker<T> {
  return {
    [objectKeysSymbol]: checkers,
    [checkSymbol]: (value) => {
      if (typeof value !== "object" || value === null || Array.isArray(value)) {
        return { result: "mismatch", message: "expected an object" };
      }

      const childErrors = Object.entries(checkers).flatMap(
        ([key, checker]): ChildError[] => {
          const result = (checker as Checker<unknown>)[checkSymbol](
            (value as any)[key],
          );

          if (result.result === "matches") {
            return [];
          } else {
            return [
              {
                path: key,
                error: result,
              },
            ];
          }
        },
      );

      if (childErrors.length === 0) {
        return { result: "matches", value: value as T };
      } else {
        return {
          result: "mismatch",
          message: "one or more object properties did not match",
          children: childErrors,
        };
      }
    },
  };
}

export function record<K extends string | number | symbol, V>(
  keyChecker: Checker<K>,
  valueChecker: Checker<V>,
): Checker<Record<K, V>> {
  return createChecker((value) => {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
      return { result: "mismatch", message: "expected an object" };
    }

    const childErrors = Object.entries(value).flatMap(
      ([key, value]): ChildError[] => {
        const results = [];
        const keyResult = keyChecker[checkSymbol](key);
        const valueResult = valueChecker[checkSymbol](value);

        if (keyResult.result === "mismatch") {
          results.push({
            path: key,
            error: keyResult,
          });
        }
        if (valueResult.result === "mismatch") {
          results.push({
            path: key,
            error: valueResult,
          });
        }

        return results;
      },
    );

    if (childErrors.length === 0) {
      return { result: "matches", value: value as Record<K, V> };
    } else {
      return {
        result: "mismatch",
        message: "one or more record entries did not match",
        children: childErrors,
      };
    }
  });
}

export function union<Ts extends unknown[]>(
  ...checkers: { [K in keyof Ts]: Checker<Ts[K]> }
): Checker<Ts[number]> {
  return createChecker((value) => {
    const results = checkers.map((checker) => checker[checkSymbol](value));
    const matched = results
      .flatMap((result) => (result.result === "matches" ? [result] : []))
      .at(0);

    if (matched != null) {
      return {
        result: "matches",
        value: matched.value,
      };
    } else {
      const childErrors = results.flatMap((result): ChildError[] => {
        if (result.result === "matches") {
          return [];
        } else {
          return [
            {
              error: result,
            },
          ];
        }
      });

      return {
        result: "mismatch",
        message: "expected value to match at least one union type",
        children: childErrors,
      };
    }
  });
}

type ArrayIntersection<Ts extends unknown[]> = Ts extends [infer T]
  ? T
  : Ts extends [infer T, ...infer Rest]
    ? T & ArrayIntersection<Rest>
    : never;

export function intersection<Ts extends unknown[]>(
  ...checkers: { [K in keyof Ts]: Checker<Ts[K]> }
): Checker<ArrayIntersection<Ts>> {
  return createChecker<ArrayIntersection<Ts>>((value) => {
    const results = checkers.map((checker) => checker[checkSymbol](value));
    const childErrors = results.flatMap((result) =>
      result.result === "mismatch" ? [{ error: result }] : [],
    );

    if (childErrors.length > 0) {
      return {
        result: "mismatch",
        message: "expected value to match all intersection types",
        children: childErrors,
      };
    } else {
      return {
        result: "matches",
        value: value as ArrayIntersection<Ts>,
      };
    }
  });
}

export function discriminatedUnion<
  K extends keyof Ts[number],
  Ts extends unknown[],
>(key: K, checkers: { [K in keyof Ts]: Checker<Ts[K]> }): Checker<Ts[number]> {
  const discriminatorCheckers: Map<
    string | number | symbol,
    Checker<Ts[number]>
  > = new Map(
    checkers.map((checker, index) => {
      if (!(objectKeysSymbol in checker)) {
        throw new Error(
          `all checkers in a discriminatedUnion must be object checkers (checker ${index} is not)`,
        );
      }

      const keys = (checker as ObjectChecker<Ts[number]>)[objectKeysSymbol];

      const keyChecker = keys[key];
      if ((keyChecker as any) == null) {
        throw new Error(
          `key ${String(key)} not found in discriminatedUnion checker ${index}`,
        );
      }

      if (!(literalSymbol in keyChecker)) {
        throw new Error(
          `key ${String(
            key,
          )} in discriminatedUnion checker ${index} must be a literal`,
        );
      }

      const literalValue = (keyChecker as LiteralChecker<Ts[number][K]>)[
        literalSymbol
      ];

      return [literalValue as string | number | symbol, checker];
    }),
  );
  return createChecker((value) => {
    if (typeof value !== "object" || value === null || Array.isArray(value)) {
      return { result: "mismatch", message: "expected an object" };
    }

    if (!(key in value)) {
      return {
        result: "mismatch",
        message: `expected object to have property \`${String(key)}\``,
      };
    }

    const discriminator: string | number | symbol = (value as any)[key];
    const discriminatorChecker = discriminatorCheckers.get(discriminator);
    if (discriminatorChecker === undefined) {
      return {
        result: "mismatch",
        message: `unexpected discriminator \`${String(key)}\` value \`${String(
          discriminator,
        )}\``,
      };
    }

    return discriminatorChecker[checkSymbol](value);
  });
}

function summarizeError(
  error: CheckResultError,
  path: (string | number)[],
): string {
  const pathError = displayPath(path);

  const childErrors = error.children ?? [];
  if (childErrors.length === 1) {
    const childError = childErrors[0];
    if (childError == null) {
      throw new Error("failed to get child error");
    }

    const subpath = childError.path != null ? [...path, childError.path] : path;
    return summarizeError(childError.error, subpath);
  } else {
    return [pathError, error.message].filter((x) => x != null).join(": ");
  }
}

function displayPath(path: (string | number)[]): string | undefined {
  if (path.length === 0) {
    return;
  }

  const pathMessage = path
    .map((part) => {
      if (typeof part === "string") {
        return `.${part}`;
      } else {
        return `[${part}]`;
      }
    })
    .join("");

  return `at ${pathMessage}`;
}

// HACK: This default export is a workaround so that `brioche build -p ./typer`
// will not error out, which is used in CI/CD. This will be removed
// eventually.
export default function (): never {
  return {
    briocheSerialize: () => {
      return {
        type: "directory",
        entries: {},
      };
    },
  } as any as never;
}
