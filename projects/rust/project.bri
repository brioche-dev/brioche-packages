import * as std from "std";
import * as TOML from "smol_toml";
import * as t from "typer";

export const project = {
  name: "rust",
  version: "1.78.0",
};

const ManifestPkgTarget = t.discriminatedUnion("available", [
  t.object({
    available: t.literal(true),
    hash: t.string(),
    url: t.string(),
  }),
  t.object({
    available: t.literal(false),
  }),
]);

const ManifestPkg = t.object({
  target: t.record(t.string(), ManifestPkgTarget),
});

const Manifest = t.object({
  "manifest-version": t.literal("2"),
  pkg: t.record(t.string(), ManifestPkg),
  profiles: t.record(t.string(), t.array(t.string())),
});

export default async (): Promise<std.Recipe<std.Directory>> => {
  const manifestToml = await std
    .download({
      url: "https://static.rust-lang.org/dist/channel-rust-1.78.0.toml",
      hash: std.sha256Hash(
        "a29520b3a7245100b20f1701f56cb9d69aa177430f1875156f044a28f1a2c195",
      ),
    })
    .read();
  const manifest = t.parse(Manifest, TOML.parse(manifestToml));

  // TODO: Support other profiles
  const profilePackages = manifest.profiles.minimal;
  if (profilePackages === undefined) {
    throw new Error("Rustup minimal profile not found");
  }

  let result = std.directory();
  for (const pkgName of profilePackages) {
    const pkg = manifest.pkg[pkgName];
    if (pkg === undefined) {
      throw new Error(`Rustup package ${pkgName} not found`);
    }

    const pkgTarget = pkg.target["x86_64-unknown-linux-gnu"];
    if (pkgTarget?.available !== true) {
      continue;
    }

    // FIXME: We unarchive within the process because unarchiving `rust-docs`
    // fails for some reason
    const pkgTargetArchive = std.download({
      url: pkgTarget.url,
      hash: std.sha256Hash(pkgTarget.hash),
    });

    const installedPkg = std.runBash`
      tar -xf $pkgTargetArchive --strip-components=1
      ./install.sh \\
        --prefix="$BRIOCHE_OUTPUT" \\
        --disable-ldconfig
    `
      .env({ pkgTargetArchive })
      .cast("directory");

    result = std.merge(result, installedPkg);
  }

  const localLibs = await std.runBash`
    find lib -type f -name '*.so' -print0 > "$BRIOCHE_OUTPUT"
  `
    .workDir(result)
    .cast("file")
    .read()
    .then((libs) => libs.split("\0").filter((lib) => lib !== ""));
  const localLibNames = localLibs
    .map((lib) => lib.split("/").at(-1))
    .flatMap((name) => (name != null ? [name] : []));

  result = std.autowrap(result, {
    executables: [
      "bin/cargo",
      "bin/rustc",
      "bin/rustdoc",
      "libexec/rust-analyzer-proc-macro-srv",
    ],
    libraries: [std.tpl`${std.outputPath}/lib`],
    skipLibraries: localLibNames,
    runtimeLibraryDirs: ["../lib"],
  });
  result = std.autowrap(result, {
    executables: ["lib/librustc_driver-d6f66a8619a171d6.so"],
    libraries: [std.tpl`${std.outputPath}/lib`],
  });
  return result;
};
