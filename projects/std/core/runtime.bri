export async function bakeAll(recipes: []): Promise<[]>;
export async function bakeAll(recipes: [Recipe]): Promise<[Artifact]>;
export async function bakeAll(
  recipes: [Recipe, Recipe],
): Promise<[Artifact, Artifact]>;
export async function bakeAll(recipes: Recipe[]): Promise<Artifact[]>;
export async function bakeAll(recipes: Recipe[]): Promise<Artifact[]> {
  const result = await (globalThis as any).Deno.core.ops.op_brioche_bake_all(
    recipes,
  );
  return result;
}

export async function bake(recipe: Recipe): Promise<Artifact> {
  const [result] = await bakeAll([recipe]);
  return result;
}

export async function createProxy(recipe: Recipe): Promise<ProxyRecipe> {
  const result = await (
    globalThis as any
  ).Deno.core.ops.op_brioche_create_proxy(recipe);
  return result;
}

export async function readBlob(blobHash: BlobHash): Promise<BString> {
  const result = await (globalThis as any).Deno.core.ops.op_brioche_read_blob(
    blobHash,
  );
  return result;
}

export function utf8Encode(string: string): Uint8Array {
  const result = (globalThis as any).Deno.core.ops.op_brioche_utf8_encode(
    string,
  );
  return result;
}

export function utf8Decode(bytes: Uint8Array): string {
  const result = (globalThis as any).Deno.core.ops.op_brioche_utf8_decode(
    bytes,
  );
  return result;
}

export function tickEncode(value: Uint8Array | string): string {
  const bytes = typeof value === "string" ? utf8Encode(value) : value;
  const result = (globalThis as any).Deno.core.ops.op_brioche_tick_encode(
    bytes,
  );
  return result;
}

export function tickDecode(value: Uint8Array | string): Uint8Array {
  const bytes = typeof value === "string" ? utf8Encode(value) : value;
  const result = (globalThis as any).Deno.core.ops.op_brioche_tick_decode(
    bytes,
  );
  return result;
}

export type Artifact = File | Symlink | Directory;

export type File = WithMeta & {
  type: "file";
  contentBlob: BlobHash;
  executable: boolean;
  resources: Directory;
};

export type Symlink = WithMeta & {
  type: "symlink";
  target: BString;
};

export type Directory = WithMeta & {
  type: "directory";
  entries: Record<BString, RecipeHash>;
};

export type Recipe =
  | Artifact
  | DownloadRecipe
  | UnarchiveRecipe
  | ProcessRecipe
  | CreateFileRecipe
  | CreateDirectoryRecipe
  | CastRecipe
  | MergeRecipe
  | PeelRecipe
  | GetRecipe
  | InsertRecipe
  | SetPermissionsRecipe
  | ProxyRecipe
  | SyncRecipe;

export type CreateDirectoryRecipe = WithMeta & {
  type: "create_directory";
  entries: Record<BString, Recipe>;
};

export type DownloadRecipe = WithMeta & {
  type: "download";
  url: string;
  hash: Hash;
};

export type UnarchiveRecipe = WithMeta & {
  type: "unarchive";
  file: Recipe;
  archive: ArchiveFormat;
  compression?: CompressionFormat | null;
};

export type ProcessRecipe = WithMeta & {
  type: "process";
  command: ProcessTemplate;
  args: ProcessTemplate[];
  env: Record<BString, ProcessTemplate>;
  dependencies?: Recipe[];
  workDir: Recipe;
  outputScaffold?: Recipe | null;
  platform: Platform;
  unsafe?: boolean;
  networking?: boolean;
};

export type CreateFileRecipe = WithMeta & {
  type: "create_file";
  content: BString;
  executable: boolean;
  resources: Recipe;
};

export type CastRecipe = WithMeta & {
  type: "cast";
  recipe: Recipe;
  to: Artifact["type"];
};

export type MergeRecipe = WithMeta & {
  type: "merge";
  directories: Recipe[];
};

export type PeelRecipe = WithMeta & {
  type: "peel";
  directory: Recipe;
  depth: number;
};

export type GetRecipe = WithMeta & {
  type: "get";
  directory: Recipe;
  path: BString;
};

export type InsertRecipe = WithMeta & {
  type: "insert";
  directory: Recipe;
  path: BString;
  recipe?: Recipe | null | undefined;
};

export type SetPermissionsRecipe = WithMeta & {
  type: "set_permissions";
  file: Recipe;
  executable: boolean | null;
};

export type ProxyRecipe = WithMeta & {
  type: "proxy";
  recipe: RecipeHash;
};

export type SyncRecipe = WithMeta & {
  type: "sync";
  recipe: Recipe;
};

export type RecipeHash = string & { __recipeHash: never };

export type WithMeta = {
  meta?: Meta;
};

export type Meta = {
  source?: Source;
};

export type Source = StackFrame[];

export type StackFrame = {
  fileName?: string | null;
  lineNumber?: number | null;
  columnNumber?: number | null;
};

export type BlobHash = string & { __blobHash: never };

export type BString = string & { __bString: never };

export type HexString = string & { __hexString: never };

export type Platform = "x86_64-linux";

export type Hash = { type: "sha256"; value: HexString };

export type ArchiveFormat = "tar";

export type CompressionFormat = "none" | "bzip2" | "gzip" | "xz" | "zstd";

export type ProcessTemplate = {
  components: ProcessTemplateComponent[];
};

export type ProcessTemplateComponent =
  | { type: "literal"; value: BString }
  | { type: "input"; recipe: Recipe }
  | { type: "output_path" }
  | { type: "resource_dir" }
  | { type: "input_resource_dirs" }
  | { type: "home_dir" }
  | { type: "work_dir" }
  | { type: "temp_dir" };

export function isHex(s: string): s is HexString {
  return /^([0-9a-fA-F]{2})*$/.test(s);
}

export function bstring(value: string | Uint8Array): BString {
  return tickEncode(value) as BString;
}

export function bstringToBytes(value: BString): Uint8Array {
  return tickDecode(value);
}

export function bstringToString(value: BString): string {
  const bytes = bstringToBytes(value);
  return utf8Decode(bytes);
}
