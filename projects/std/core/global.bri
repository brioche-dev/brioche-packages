import {
  type Recipe,
  type File,
  type Directory,
  createRecipe,
} from "./recipes";
import { source } from "./source.bri";

export interface BriocheGlobal {
  includeFile(path: string): Recipe<File>;
  includeDirectory(path: string): Recipe<Directory>;
}

(globalThis as any).Brioche ??= {};
(globalThis as any).Brioche.includeFile ??= (path: string): Recipe<File> => {
  const sourceFrame = source({ depth: 1 }).at(0);
  if (sourceFrame === undefined) {
    throw new Error(`Could not find source file to retrieve ${path}`);
  }

  const sourceFile = sourceFrame.fileName;

  return createRecipe(["file"], {
    sourceDepth: 1,
    briocheSerialize: async () => {
      return await (globalThis as any).Deno.core.ops.op_brioche_get_static(
        sourceFile,
        {
          type: "include",
          include: "file",
          path,
        },
      );
    },
  });
};
(globalThis as any).Brioche.includeDirectory ??= (
  path: string,
): Recipe<Directory> => {
  const sourceFrame = source({ depth: 1 }).at(0);
  if (sourceFrame === undefined) {
    throw new Error(`Could not find source file to retrieve ${path}`);
  }

  const sourceFile = sourceFrame.fileName;

  return createRecipe(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async () => {
      return await (globalThis as any).Deno.core.ops.op_brioche_get_static(
        sourceFile,
        {
          type: "get",
          path,
        },
      );
    },
  });
};
