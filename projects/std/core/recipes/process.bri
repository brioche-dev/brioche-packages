import { Awaitable, mixin } from "../utils.bri";
import * as runtime from "../runtime.bri";
import { type Directory, directory } from "./directory.bri";
import { type AsyncRecipe, type Recipe, createRecipe } from "./recipe.bri";

export type ProcessOptions = {
  command: ProcessTemplateLike;
  args?: ProcessTemplateLike[];
  env?: Record<string, ProcessTemplateLike>;
  dependencies?: AsyncRecipe<Directory>[];
  workDir?: AsyncRecipe<Directory>;
  outputScaffold?: AsyncRecipe | null;
} & ProcessUnsafeOptions;

export type ProcessUnsafeOptions =
  | { unsafe?: false }
  | { unsafe: true; networking?: boolean };

export type Process = Recipe & ProcessUtils;

export interface ProcessUtils {
  env(key: string, value: ProcessTemplateLike): Process;
  dependencies(...dependencies: AsyncRecipe<Directory>[]): Process;
  workDir(workDir: AsyncRecipe<Directory>): Process;
  outputScaffold(outputScaffold: AsyncRecipe): Process;
  unsafe(unsafeOptions: ProcessUnsafeOptions): Process;
}

export function process(options: ProcessOptions): Process {
  const env: Record<string, ProcessTemplateLike> = {
    BRIOCHE_OUTPUT: outputPath,
    BRIOCHE_PACK_RESOURCES_DIR: resourcesDir,
    HOME: homeDir,
    TMPDIR: tempDir,
    ...options.env,
  };

  const bEnv: Record<runtime.BString, ProcessTemplate> = {};
  for (const [k, v] of Object.entries(env)) {
    bEnv[runtime.bstring(k)] = processTemplate(v);
  }

  const recipe = createRecipe(["file", "directory", "symlink"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      return {
        type: "process",
        command: await processTemplate(options.command).briocheSerialize(),
        args: await Promise.all(
          (options.args ?? []).map(
            async (arg) => await processTemplate(arg).briocheSerialize(),
          ),
        ),
        env: Object.fromEntries(
          await Promise.all(
            Object.entries(env).map(async ([k, v]) => [
              k,
              await processTemplate(v).briocheSerialize(),
            ]),
          ),
        ),
        dependencies: await Promise.all(
          (options.dependencies ?? []).map(
            async (dep) => await (await dep).briocheSerialize(),
          ),
        ),
        platform: "x86_64-linux",
        workDir: await (
          await (options.workDir ?? directory())
        ).briocheSerialize(),
        outputScaffold:
          options.outputScaffold != null
            ? await (await options.outputScaffold).briocheSerialize()
            : null,
        unsafe: options.unsafe,
        networking: options.unsafe === true ? options.networking : undefined,
        meta,
      };
    },
  });

  return mixin(recipe, {
    env(this: Process, key: string, value: ProcessTemplateLike): Process {
      return process({
        ...options,
        env: {
          ...options.env,
          [key]: value,
        },
      });
    },
    dependencies(
      this: Process,
      ...dependencies: AsyncRecipe<Directory>[]
    ): Process {
      return process({
        ...options,
        dependencies: [...dependencies, ...(options.dependencies ?? [])],
      });
    },
    workDir(this: Process, workDir: AsyncRecipe<Directory>): Process {
      return process({
        ...options,
        workDir,
      });
    },
    outputScaffold(this: Process, outputScaffold: AsyncRecipe): Process {
      return process({
        ...options,
        outputScaffold,
      });
    },
    unsafe(this: Process, unsafeOptions: ProcessUnsafeOptions): Process {
      return process({
        ...options,
        ...unsafeOptions,
      });
    },
  } satisfies ProcessUtils);
}

export function processTemplate(
  ...components: ProcessTemplateLike[]
): ProcessTemplate {
  return new ProcessTemplate(...components);
}

export function tpl(
  strings: TemplateStringsArray,
  ...items: ProcessTemplateLike[]
): ProcessTemplate {
  const components = strings.flatMap((str, i): ProcessTemplateLike[] => {
    const item = items[i];
    if (item != null) {
      return [str, item];
    } else {
      return [str];
    }
  });

  return new ProcessTemplate(...components);
}

export const outputPath: unique symbol = Symbol("outputPath");
export const resourcesDir: unique symbol = Symbol("resourcesDir");
export const homeDir: unique symbol = Symbol("homeDir");
export const workDir: unique symbol = Symbol("workDir");
export const tempDir: unique symbol = Symbol("tempDir");

export type ProcessTemplateLike = Awaitable<ProcessTemplateComponent>;

export type ProcessTemplateComponent =
  | string
  | ProcessTemplate
  | Recipe
  | typeof outputPath
  | typeof resourcesDir
  | typeof homeDir
  | typeof workDir
  | typeof tempDir
  | undefined;

export class ProcessTemplate {
  components: ProcessTemplateLike[];

  constructor(...components: ProcessTemplateLike[]) {
    /* eslint-disable-next-line */
    this.components = components;
  }

  async briocheSerialize(): Promise<runtime.ProcessTemplate> {
    const components = await Promise.all(this.components);
    const runtimeComponents = await Promise.all(
      components.map(
        async (component): Promise<runtime.ProcessTemplateComponent[]> => {
          if (component == null || component === "") {
            return [];
          } else if (typeof component === "string") {
            return [{ type: "literal", value: runtime.bstring(component) }];
          } else if (component === outputPath) {
            return [{ type: "output_path" }];
          } else if (component === resourcesDir) {
            return [{ type: "resources_dir" }];
          } else if (component === homeDir) {
            return [{ type: "home_dir" }];
          } else if (component === workDir) {
            return [{ type: "work_dir" }];
          } else if (component === tempDir) {
            return [{ type: "temp_dir" }];
          } else if (component instanceof ProcessTemplate) {
            const serialized = await component.briocheSerialize();
            return serialized.components;
          } else {
            return [
              { type: "input", recipe: await component.briocheSerialize() },
            ];
          }
        },
      ),
    );

    return {
      components: runtimeComponents.flat(1),
    };
  }
}
