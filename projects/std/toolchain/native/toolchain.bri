import * as std from "/core";
import { wrapWithScript } from "../utils.bri";

export function createToolchain(...tools: std.AsyncLazy<std.Directory>[]): std.Lazy<std.Directory> {
  return wrapWithScript(std.merge(...tools), {
    paths: [
      "bin/x86_64-pc-linux-gnu-c++",
      "bin/x86_64-pc-linux-gnu-g++",
      "bin/x86_64-pc-linux-gnu-gcc",
      "bin/x86_64-pc-linux-gnu-gcc-13.2.0",
      "bin/c++",
      "bin/g++",
      "bin/gcc",
    ],
    renameSuffix: "-orig",
    script: std.file(std.indoc`
      #!/usr/bin/env sh
      # MIT license: https://stackoverflow.com/a/29835459
      rreadlink() ( # Execute the function in a *subshell* to localize variables and the effect of 'cd'.

        target=$1 fname= targetDir= CDPATH=

        # Try to make the execution environment as predictable as possible:
        # All commands below are invoked via 'command', so we must make sure that 'command'
        # itself is not redefined as an alias or shell function.
        # (Note that command is too inconsistent across shells, so we don't use it.)
        # 'command' is a *builtin* in bash, dash, ksh, zsh, and some platforms do not even have
        # an external utility version of it (e.g, Ubuntu).
        # 'command' bypasses aliases and shell functions and also finds builtins
        # in bash, dash, and ksh. In zsh, option POSIX_BUILTINS must be turned on for that
        # to happen.
        { \\unalias command; \\unset -f command; } >/dev/null 2>&1
        [ -n "$ZSH_VERSION" ] && options[POSIX_BUILTINS]=on # make zsh find *builtins* with 'command' too.

        while :; do # Resolve potential symlinks until the ultimate target is found.
            [ -L "$target" ] || [ -e "$target" ] || { command printf '%s\\n' "ERROR: '$target' does not exist." >&2; return 1; }
            command cd "$(command dirname -- "$target")" # Change to target dir; necessary for correct resolution of target path.
            fname=$(command basename -- "$target") # Extract filename.
            [ "$fname" = '/' ] && fname='' # !! curiously, 'basename /' returns '/'
            if [ -L "$fname" ]; then
              # Extract [next] target path, which may be defined
              # *relative* to the symlink's own directory.
              # Note: We parse 'ls -l' output to find the symlink target
              #       which is the only POSIX-compliant, albeit somewhat fragile, way.
              target=$(command ls -l "$fname")
              target=\${target#* -> }
              continue # Resolve [next] symlink target.
            fi
            break # Ultimate target reached.
        done
        targetDir=$(command pwd -P) # Get canonical dir. path
        # Output the ultimate target's canonical path.
        # Note that we manually resolve paths ending in /. and /.. to make sure we have a normalized path.
        if [ "$fname" = '.' ]; then
          command printf '%s\\n' "\${targetDir%/}"
        elif  [ "$fname" = '..' ]; then
          # Caveat: something like /var/.. will resolve to /private (assuming /var@ -> /private/var), i.e. the '..' is applied
          # AFTER canonicalization.
          command printf '%s\\n' "$(command dirname -- "\${targetDir}")"
        else
          command printf '%s\\n' "\${targetDir%/}/$fname"
        fi
      )

      script_dir=$(cd "$(dirname -- "$(rreadlink "$0")")" && pwd -P)
      sysroot=$(cd "$script_dir/.." && pwd -P)

      include_system_headers=1
      for arg in "$@"; do
        if [ "$arg" = "-nostdinc" ]; then
          include_system_headers=0
          break
        fi
      done

      if [ "$include_system_headers" -eq 1 ]; then
        set -- \
          -isystem "$sysroot/lib/gcc/x86_64-pc-linux-gnu/13.2.0/include" \
          -isystem "$sysroot/lib/gcc/x86_64-pc-linux-gnu/13.2.0/include-fixed" \
          -isystem "$sysroot/include" \
          "$@"
      fi
      set -- --sysroot="$sysroot" "$@"

      "$(rreadlink "$0")-orig" "$@"
    `).withPermissions({ executable: true }),
  });
}

/*
        set -- \
-isystem "$sysroot/include/c++/13.2.0" \
-isystem "$sysroot/include/c++/13.2.0/backward" \
-isystem "$sysroot/lib/gcc/x86_64-pc-linux-gnu/13.2.0/include" \
-isystem "$sysroot/lib/gcc/x86_64-pc-linux-gnu/13.2.0/include-fixed" \
-isystem "$sysroot/include/c++/13.2.0/x86_64-pc-linux-gnu" \
-isystem "$sysroot/include" \
"$@"
*/
