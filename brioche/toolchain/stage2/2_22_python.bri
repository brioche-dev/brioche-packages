import * as brioche from "/core";
import { wrapWithScript, makeFile, useBriocheLd } from "../utils.bri";
import toolchain from "./2_18_toolchain.bri";

export default brioche.memo(async (): Promise<brioche.Lazy<brioche.Directory>> => {
  const sourceArchive = brioche
    .download({
      url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/Python-3.11.4.tar.xz",
      hash: brioche.sha256Hash("2f0e409df2ab57aa9fc4cbddfb976af44e4e55bf6f619eee6bc5c2297264a7f6"),
    });

  return brioche.process({
    command: brioche.processTemplate("/usr/bin/env"),
    args: [
      brioche.processTemplate("sh"),
      brioche.processTemplate("-c"),
      brioche.processTemplate(`
        tar xf "$source" --strip-components=1
        ./configure \
          --prefix=/usr \
          --enable-shared \
          --without-ensurepip
        make
        make install DESTDIR="$BRIOCHE_OUTPUT"
      `)
    ],
    env: {
      PATH: brioche.processTemplate(toolchain(), "/bin"),
      source: brioche.processTemplate(sourceArchive),
    },
  }).cast("directory");
});
