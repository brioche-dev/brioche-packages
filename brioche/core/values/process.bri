import { Awaitable } from "../utils.bri";
import { source as briocheSource } from "../source.bri";
import * as runtime from "../runtime.bri";
import { type CastTo, type CastResult, cast } from "./cast.bri";
import { type Directory, directory } from "./directory.bri";
import { type AsyncLazy, type Lazy, type Value, briocheDeserializeAny } from "./value.bri";

export interface ProcessOptions {
  command: ProcessTemplateLike,
  args?: ProcessTemplateLike[],
  env?: Record<string, ProcessTemplateLike>,
  workDir?: AsyncLazy<Directory>,
}

export function process(options: ProcessOptions): Process {
  const env: Record<string, ProcessTemplateLike> = {
    "BRIOCHE_OUTPUT": outputPath,
    "BRIOCHE_PACK_RESOURCES_DIR": resourcesDir,
    "HOME": homeDir,
    "TMPDIR": tempDir,
    ...options.env,
  };

  const bEnv: Record<runtime.BString, ProcessTemplate> = {};
  for (const [k, v] of Object.entries(env)) {
    bEnv[runtime.bstring(k)] = processTemplate(v);
  }
  return new Process({
    command: processTemplate(options.command),
    args: (options.args ?? []).map((arg) => processTemplate(arg)),
    env: bEnv,
    workDir: options.workDir ?? directory({}),
    platform: "x86_64-linux",
    source: briocheSource({ depth: 1 }),
  });
}

export function processTemplate(...components: ProcessTemplateLike[]): ProcessTemplate {
  return new ProcessTemplate(...components);
}

export function tpl(strings: TemplateStringsArray, ...items: ProcessTemplateLike[]): ProcessTemplate {
  const components = strings.flatMap((str, i): ProcessTemplateLike[] => {
    const item = items[i];
    if (item != null) {
      return [str, item];
    } else {
      return [str];
    }
  });

  return new ProcessTemplate(...components);
}

interface ProcessCtor {
  command: ProcessTemplate;
  args: ProcessTemplate[];
  env: Record<runtime.BString, ProcessTemplate>;
  workDir: AsyncLazy<Directory>;
  platform: runtime.Platform;
  source?: runtime.Source;
}

export const outputPath: unique symbol = Symbol("outputPath");
export const resourcesDir: unique symbol = Symbol("resourcesDir");
export const homeDir: unique symbol = Symbol("homeDir");
export const workDir: unique symbol = Symbol("workDir");
export const tempDir: unique symbol = Symbol("tempDir");

export class Process implements Lazy {
  command: ProcessTemplate;
  args: ProcessTemplate[];
  env: Record<runtime.BString, ProcessTemplate>;
  workDir: AsyncLazy<Directory>;
  platform: runtime.Platform;
  source?: runtime.Source;

  constructor(options: ProcessCtor) {
    this.command = options.command;
    this.args = options.args;
    this.env = options.env;
    this.workDir = options.workDir;
    this.platform = options.platform;
    this.source = options.source;
  }

  async resolve(): Promise<Value> {
    const result = await runtime.resolve(await this.briocheSerialize());
    return briocheDeserializeAny(result, this.source);
  }

  async briocheSerialize(): Promise<runtime.LazyProcess> {
    const command = await this.command.briocheSerialize();
    const args = await Promise.all(this.args.map(arg => arg.briocheSerialize()));
    const envEntries = await Promise.all(Object.entries(this.env).map(async ([k, v]): Promise<[string, runtime.ProcessTemplate]> => [k, await v.briocheSerialize()]));
    const workDir = await (await this.workDir).briocheSerialize();
    return {
      type: "process",
      command,
      args,
      env: Object.fromEntries(envEntries),
      workDir,
      platform: this.platform,
      meta: {
        source: this.source,
      }
    };
  }

  cast<T extends CastTo>(to: T): Lazy<CastResult<T>> {
    return cast(this, to, { sourceDepth: 2 });
  }
}

export type ProcessTemplateLike = Awaitable<ProcessTemplateComponent>;

export type ProcessTemplateComponent =
  | string
  | ProcessTemplate
  | Lazy
  | typeof outputPath
  | typeof resourcesDir
  | typeof homeDir
  | typeof workDir
  | typeof tempDir
  | undefined;

export class ProcessTemplate {
  components: ProcessTemplateLike[];

  constructor(...components: ProcessTemplateLike[]) {
    this.components = components;
  }

  async briocheSerialize(): Promise<runtime.ProcessTemplate> {
    const components = await Promise.all(this.components);
    const runtimeComponents = await Promise.all(components.map(async (component): Promise<runtime.ProcessTemplateComponent[]> => {
      if (component == null || component === "") {
        return [];
      } else if (typeof component === "string") {
        return [{ type: "literal", value: runtime.bstring(component) }];
      } else if (component === outputPath) {
        return [{ type: "output_path" }];
      } else if (component === resourcesDir) {
        return [{ type: "resources_dir" }];
      } else if (component === homeDir) {
        return [{ type: "home_dir" }];
      } else if (component === workDir) {
        return [{ type: "work_dir" }];
      } else if (component === tempDir) {
        return [{ type: "temp_dir" }];
      } else if (component instanceof ProcessTemplate) {
        const serialized = await component.briocheSerialize();
        return serialized.components;
      } else {
        return [{ type: "input", value: await component.briocheSerialize() }];
      }
    }));

    return {
      components: runtimeComponents.flat(1),
    };
  }
}
