import * as std from "std";
import { nushellRunnable, type NushellRunnable } from "nushell";
import python from "python";

export const project = {
  name: "xcb_proto",
  version: "1.17.0",
};

const source = Brioche.download(
  `https://www.x.org/archive/individual/proto/xcb-proto-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function xcbProto(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure --prefix=/
    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, python)
    .workDir(source)
    .toDirectory()
    .pipe(std.pkgConfigMakePathsRelative, (recipe) =>
      std.setEnv(recipe, {
        PKG_CONFIG_PATH: { append: [{ path: "share/pkgconfig" }] },
      }),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    pkg-config --modversion xcb-proto | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, xcbProto)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): NushellRunnable {
  return nushellRunnable`
    let version = http get https://www.x.org/archive/individual/proto
      | lines
      | where {|it| ($it | str contains "xcb-proto") and (not ($it | str contains ".sig")) }
      | parse --regex '<a href="xcb-proto-(?<version>.+)\.tar\.xz">'
      | sort-by --natural --reverse version
      | get 0.version

    $env.project
      | from json
      | update version $version
      | to json
  `.env({ project: JSON.stringify(project) });
}
