import * as std from "std";
import python from "python";

export const project = {
  name: "yasm",
  version: "1.3.0",
  repository: "https://github.com/yasm/yasm",
};

const source = Brioche.download(
  `${project.repository}/releases/download/v${project.version}/yasm-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function yasm(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure --prefix=/
    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain, python)
    .toDirectory()
    .pipe(
      (recipe) =>
        std.setEnv(recipe, {
          CPATH: { append: [{ path: "include" }] },
          LIBRARY_PATH: { append: [{ path: "lib" }] },
        }),
      (recipe) => std.withRunnableLink(recipe, "bin/yasm"),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    yasm --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(yasm)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `yasm ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
