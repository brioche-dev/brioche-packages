import * as std from "std";
import cmake from "cmake";
import git from "git";
import { cargoBuild } from "rust";

export const project = {
  name: "gitui",
  version: "0.27.0",
  repository: "https://github.com/extrawurst/gitui",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `v${project.version}`,
})
  // Remove upstream's custom Cargo `config.toml`, which overrides the linker
  // for various targets (for cross-compilation). This can interfere with
  // our default working linker configuration.
  .remove(".cargo/config.toml")
  .pipe((source) =>
    // Apply patch file to resolve build issues with Rust 1.89.0
    std.applyPatch({
      source,
      patch: Brioche.download(
        `${project.repository}/commit/950e703cab1dd37e3d02e7316ec99cc0dc70513c.patch`,
      ),
      strip: 1,
    }),
  );

export default function gitui(): std.Recipe<std.Directory> {
  return cargoBuild({
    source,
    dependencies: [cmake, git],
    env: {
      GITUI_RELEASE: "1",
    },
    runnable: "bin/gitui",
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    gitui --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(gitui)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `gitui ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
