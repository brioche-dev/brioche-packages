import * as std from "std";
import nushell from "nushell";

export const project = {
  name: "openssl",
  version: "3.5.0",
};

const source = Brioche.download(
  `https://github.com/openssl/openssl/releases/download/openssl-${project.version}/openssl-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function openssl(): std.Recipe<std.Directory> {
  let openssl = std.runBash`
    ./config \\
      --prefix=/ \\
      --openssldir=/etc/ssl \\
      --libdir=lib
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain())
    .workDir(source)
    .toDirectory();

  openssl = std.setEnv(openssl, {
    CPATH: { append: [{ path: "include" }] },
    LIBRARY_PATH: { append: [{ path: "lib" }] },
    PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
    CMAKE_PREFIX_PATH: { append: [{ path: "." }] },
    OPENSSL_ROOT_DIR: { fallback: { path: "." } },
  });

  return std.withRunnableLink(openssl, "bin/openssl");
}

export async function test() {
  const script = std.runBash`
    openssl version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(openssl())
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `OpenSSL ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/openssl/openssl/releases/latest
      | get tag_name
      | str replace --regex '${project.name}-' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
