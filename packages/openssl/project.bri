import * as std from "std";

export const project = {
  name: "openssl",
  version: "3.3.1",
};

const source = Brioche.download(
  `https://github.com/openssl/openssl/releases/download/openssl-${project.version}/openssl-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function openssl(): std.Recipe<std.Directory> {
  let openssl = std.runBash`
    ./config \\
      --prefix=/ \\
      --openssldir=/etc/ssl \\
      --libdir=lib
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain())
    .workDir(source)
    .toDirectory();

  openssl = std.setEnv(openssl, {
    CPATH: { append: [{ path: "include" }] },
    LIBRARY_PATH: { append: [{ path: "lib" }] },
    PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
    OPENSSL_ROOT_DIR: { fallback: { path: "." } },
  });

  return std.withRunnableLink(openssl, "bin/openssl");
}

export function test() {
  return std.runBash`
    openssl version | tee "$BRIOCHE_OUTPUT"
  `.dependencies(openssl());
}
