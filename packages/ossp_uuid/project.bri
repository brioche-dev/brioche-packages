//
import * as std from "std";

export const project = {
  name: "ossp_uuid",
  version: "1.6.2",
};

const source = std
  .download({
    url: `https://deb.debian.org/debian/pool/main/o/ossp-uuid/ossp-uuid_${project.version}.orig.tar.gz`,
    hash: std.sha256Hash(
      "11a615225baa5f8bb686824423f50e4427acd3f70d394765bdff32801f0fd5b0",
    ),
  })
  .unarchive("tar", "gzip")
  .peel()
  .cast("directory");


export default function (): std.Recipe<std.Directory> {



  let uuid = std.runBash`
    ./configure \\
      --prefix=/ \\
      --without-perl \\
      --without-php \\
      --without-pgsql 
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain())
    .cast("directory");

    uuid = std.runBash`
      sed -i 's|^prefix=.*|prefix=\${UUID_PREFIX}|g' "$BRIOCHE_OUTPUT/lib/pkgconfig/uuid.pc"
    `.outputScaffold(uuid)
    .cast("directory");

    uuid = std.setEnv(uuid, {
      PKG_CONFIG_PATH: { path: "lib/pkgconfig" },
      UUID_PREFIX: {
        path: ".",
      }
    });

    return uuid;
  // return std.withRunnableLink(python, "bin/python");
}
