import * as std from "std";

export const project = {
  name: "nasm",
  version: "3.01",
  repository: "https://github.com/netwide-assembler/nasm",
};

const source = Brioche.download(
  `https://www.nasm.us/pub/nasm/releasebuilds/${project.version}/nasm-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function nasm(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure --prefix=/
    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain)
    .workDir(source)
    .toDirectory()
    .pipe((recipe) => std.withRunnableLink(recipe, "bin/nasm"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    nasm --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(nasm)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `NASM version ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubTags({
    project,
    matchTag: /^nasm-(?<version>\d+\.\d+(\.\d+)?)$/,
  });
}
