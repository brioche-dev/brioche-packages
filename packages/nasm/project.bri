import nushell from "nushell";
import * as std from "std";
import { gitCheckout } from "git";

export const project = {
  name: "nasm",
  version: "2.16.03",
};

const source = gitCheckout(
  Brioche.gitRef({
    repository: "https://github.com/netwide-assembler/nasm.git",
    ref: `nasm-${project.version}`,
  }),
);

export default function () {
  return std.runBash`
    ./autogen.sh
    ./configure
    make
    make strip
    mkdir -p "$BRIOCHE_OUTPUT/bin"
    cp nasm "$BRIOCHE_OUTPUT/bin/nasm"
    ln -s "bin/nasm" "$BRIOCHE_OUTPUT/brioche-run"
  `
    .dependencies(std.toolchain())
    .workDir(source);
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/netwide-assembler/nasm/git/matching-refs/
      | get ref
      | each {|ref|
        $ref
        | parse --regex '^refs/tags/nasm-(?P<tag>(?P<major>[\\d]+)\\.(?P<minor>[\\d]+)\\.(?P<patch>[\\d]+))'
        | get -i 0
      }
      | sort-by -n major minor patch
      | last
      | get tag

    $env.project | from json | update version $version | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
