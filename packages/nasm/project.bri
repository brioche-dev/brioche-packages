import * as std from "std";
import { nushellRunnable, type NushellRunnable } from "nushell";

export const project = {
  name: "nasm",
  version: "2.16.03",
};

const source = Brioche.gitCheckout({
  repository: "https://github.com/netwide-assembler/nasm.git",
  ref: `nasm-${project.version}`,
});

export default function nasm(): std.Recipe<std.Directory> {
  return std.runBash`
    ./autogen.sh
    ./configure
    make
    make strip
    mkdir -p "$BRIOCHE_OUTPUT/bin"
    cp nasm "$BRIOCHE_OUTPUT/bin/nasm"
    ln -s "bin/nasm" "$BRIOCHE_OUTPUT/brioche-run"
  `
    .dependencies(std.toolchain)
    .workDir(source)
    .toDirectory();
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    nasm --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(nasm)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `NASM version ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): NushellRunnable {
  return nushellRunnable`
    let version = http get https://api.github.com/repos/netwide-assembler/nasm/git/matching-refs/tags
      | get ref
      | each {|ref|
        $ref
        | parse --regex '^refs/tags/nasm-(?P<tag>(?P<major>[\\d]+)\\.(?P<minor>[\\d]+)\\.(?P<patch>[\\d]+))$'
        | get -i 0
      }
      | sort-by -n major minor patch
      | last
      | get tag

    $env.project
      | from json
      | update version $version
      | to json
  `.env({ project: JSON.stringify(project) });
}
