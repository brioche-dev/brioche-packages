import * as std from "std";

export const project = {
  name: "nasm",
  version: "2.16.03",
  repository: "https://github.com/netwide-assembler/nasm",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `nasm-${project.version}`,
});

export default function nasm(): std.Recipe<std.Directory> {
  return std.runBash`
    ./autogen.sh
    ./configure
    make -j "$(nproc)"
    make strip
    mkdir -p "$BRIOCHE_OUTPUT/bin"
    cp nasm "$BRIOCHE_OUTPUT/bin/nasm"
    ln -s "bin/nasm" "$BRIOCHE_OUTPUT/brioche-run"
  `
    .dependencies(std.toolchain)
    .workDir(source)
    .toDirectory();
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    nasm --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(nasm)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `NASM version ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubTags({
    project,
    matchTag: /^nasm-(?<version>([\d]+)\.([\d]+)\.([\d]+))$/,
  });
}
