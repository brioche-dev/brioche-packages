import * as std from "std";
import openssl from "openssl";
import { cargoBuild } from "rust";

export { nushellRunnable, type NushellRunnable } from "./nushell_runnable.bri";
export { runNushell } from "./run_nushell.bri";

export const project = {
  name: "nushell",
  version: "0.106.1",
  repository: "https://github.com/nushell/nushell.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: project.version,
});

/**
 * Represents a Nushell plugin.
 *
 * @param name - The name of the plugin.
 * @param dependencies - The dependencies of the plugin.
 *
 * @returns A Nushell plugin representation
 */
interface NushellPlugin {
  name: string;
  dependencies?: std.RecipeLike<std.Directory>[];
}

const nushellPlugins: NushellPlugin[] = [
  {
    name: "nu_plugin_formats",
  },
  {
    name: "nu_plugin_gstat",
    dependencies: [openssl],
  },
  {
    name: "nu_plugin_inc",
  },
  {
    name: "nu_plugin_polars",
  },
  {
    name: "nu_plugin_query",
    dependencies: [openssl],
  },
];

export default function nushell(): std.Recipe<std.Directory> {
  const nushell = cargoBuild({
    source,
    runnable: "bin/nu",
  });

  // Build the Nushell plugins
  const plugins = nushellPlugins.map((plugin: NushellPlugin) =>
    cargoBuild({
      source,
      path: `crates/${plugin.name}`,
      dependencies: plugin.dependencies ?? [],
    }),
  );

  return std.merge(nushell, ...plugins);
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    nu --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(nushell)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
