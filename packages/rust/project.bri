import * as std from "std";
import * as TOML from "smol_toml";
import * as t from "typer";
import caCertificates from "ca_certificates";

export const project = {
  name: "rust",
  version: "1.78.0",
};

const ManifestPkgTarget = t.discriminatedUnion("available", [
  t.object({
    available: t.literal(true),
    hash: t.string(),
    url: t.string(),
  }),
  t.object({
    available: t.literal(false),
  }),
]);

const ManifestPkg = t.object({
  target: t.record(t.string(), ManifestPkgTarget),
});

const Manifest = t.object({
  "manifest-version": t.literal("2"),
  pkg: t.record(t.string(), ManifestPkg),
  profiles: t.record(t.string(), t.array(t.string())),
});

/**
 * The main Rust recipe. Returns a recipe containing the following:
 *
 * - `bin/rustc`
 * - `bin/cargo`
 *
 * ...among other binaries.
 */
async function rust(): Promise<std.Recipe<std.Directory>> {
  const manifestToml = await std
    .download({
      url: "https://static.rust-lang.org/dist/channel-rust-1.78.0.toml",
      hash: std.sha256Hash(
        "a29520b3a7245100b20f1701f56cb9d69aa177430f1875156f044a28f1a2c195",
      ),
    })
    .read();
  const manifest = t.parse(Manifest, TOML.parse(manifestToml));

  // TODO: Support other profiles
  const profilePackages = manifest.profiles.minimal;
  if (profilePackages === undefined) {
    throw new Error("Rustup minimal profile not found");
  }

  let result = std.directory();
  for (const pkgName of profilePackages) {
    const pkg = manifest.pkg[pkgName];
    if (pkg === undefined) {
      throw new Error(`Rustup package ${pkgName} not found`);
    }

    const pkgTarget = pkg.target["x86_64-unknown-linux-gnu"];
    if (pkgTarget?.available !== true) {
      continue;
    }

    // FIXME: We unarchive within the process because unarchiving `rust-docs`
    // fails for some reason
    const pkgTargetArchive = std.download({
      url: pkgTarget.url,
      hash: std.sha256Hash(pkgTarget.hash),
    });

    const installedPkg = std.runBash`
      tar -xf $pkgTargetArchive --strip-components=1
      ./install.sh \\
        --prefix="$BRIOCHE_OUTPUT" \\
        --disable-ldconfig
    `
      .env({ pkgTargetArchive })
      .toDirectory();

    result = std.merge(result, installedPkg);
  }

  const localLibs = await std.runBash`
    find lib -type f -name '*.so' -print0 > "$BRIOCHE_OUTPUT"
  `
    .workDir(result)
    .toFile()
    .read()
    .then((libs) => libs.split("\0").filter((lib) => lib !== ""));
  const localLibNames = localLibs
    .map((lib) => lib.split("/").at(-1))
    .flatMap((name) => (name != null ? [name] : []));

  result = std.setEnv(result, {
    LIBRARY_PATH: { path: "lib" },
  });

  result = std.autopack(result, {
    globs: ["bin/**", "libexec/**", "lib/librustc_driver-*.so"],
    selfDependency: true,
    dynamicBinaryConfig: {
      skipLibraries: localLibNames,
      extraRuntimeLibraryPaths: ["lib"],
    },
  });
  return result;
}
export default rust;

export interface CargoBuildOptions {
  crate: std.AsyncRecipe<std.Directory>;
  runnable?: string;
}

/**
 * Build a Cargo crate. Defaults to the release profile. Calls
 * `cargo install` internally, and returns the contents of `$CARGO_INSTALL_ROOT`
 *
 * ## Options
 *
 * - `crate`: The crate to build.
 * - `runnable`: Optionally set a path to the binary to run
 *   by default (e.g. `bin/foo`).
 *
 * ## Example
 *
 * ```typescript
 * import { cargoBuild } from "rust";
 *
 * export default () => {
 *   return cargoBuild({
 *     crate: Brioche.glob("src", "Cargo.*"),
 *     runnable: "bin/hello",
 *   });
 * };
 * ```
 */
export function cargoBuild(options: CargoBuildOptions) {
  // Create a skeleton crate so we have enough information to vendor the
  // dependencies
  const skeletonCrate = createSkeletonCrate(options.crate);

  // Vendor the dependencies with network access and save the Cargo config.toml
  // file, so the vendored dependencies are used
  const vendoredSkeletonCrate = std.runBash`
    cd "$BRIOCHE_OUTPUT"
    mkdir -p .cargo
    cargo vendor --locked >> .cargo/config.toml
  `
    .dependencies(rust(), caCertificates())
    .outputScaffold(skeletonCrate)
    .unsafe({ networking: true })
    .toDirectory();

  // Combine the original crate with the vendored dependencies
  let crate = std.merge(vendoredSkeletonCrate, options.crate);

  // Copy the updated Cargo config.toml file into the crate
  crate = crate.insert(
    ".cargo/config.toml",
    vendoredSkeletonCrate.get(".cargo/config.toml"),
  );

  // Use `cargo install` to build and install the project to `$BRIOCHE_OUTPUT`
  let buildResult = std.runBash`
    cargo install --path . --frozen
  `
    .dependencies(rust(), std.toolchain())
    .env({
      CARGO_INSTALL_ROOT: std.outputPath,
      PATH: std.tpl`${std.outputPath}/bin`,
    })
    .workDir(crate)
    .toDirectory();

  // Add a runnable link if set in the options
  if (options.runnable != null) {
    buildResult = std.withRunnableLink(buildResult, options.runnable);
  }

  return buildResult;
}

/**
 * Create a "skeleton crate" for a Rust crate. This is a crate that has
 * the minimal set of files needed for Cargo to consider it a valid crate,
 * namely so we can vendor dependencies. Without doing this, we would need
 * to re-vendor the crates any time the source code changes!
 */
export function createSkeletonCrate(
  crate: std.AsyncRecipe<std.Directory>,
): std.Recipe<std.Directory> {
  const recipe = std.runBash`
    cargo chef prepare --recipe-path "$BRIOCHE_OUTPUT"
  `
    .dependencies(rust(), cargoChef())
    .workDir(crate)
    .toFile();
  return std.runBash`
    cd "$BRIOCHE_OUTPUT"
    cargo chef cook --recipe-path "$recipe" --no-build
  `
    .dependencies(rust(), cargoChef())
    .env({ recipe })
    .outputScaffold(std.directory())
    .toDirectory();
}

function cargoChef(): std.Recipe<std.Directory> {
  const pkg = std.download({
    url: "https://github.com/LukeMathWalker/cargo-chef/releases/download/v0.1.67/cargo-chef-x86_64-unknown-linux-musl.tar.gz",
    hash: std.sha256Hash(
      "91b518df5c8b02775026875f3aadef1946464354db1ca0758e4912249578f0bc",
    ),
  });

  return std.directory({
    bin: pkg.unarchive("tar", "gzip"),
  });
}
