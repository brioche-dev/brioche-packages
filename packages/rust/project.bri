import * as std from "std";
import * as TOML from "smol_toml";
import * as t from "typer";
import nushell from "nushell";

export const project = {
  name: "rust",
  version: "1.87.0",
};

const ManifestPkgTarget = t.discriminatedUnion("available", [
  t.object({
    available: t.literal(true),
    hash: t.string(),
    url: t.string(),
  }),
  t.object({
    available: t.literal(false),
  }),
]);

const ManifestPkg = t.object({
  target: t.record(t.string(), ManifestPkgTarget),
});

const Manifest = t.object({
  "manifest-version": t.literal("2"),
  pkg: t.record(t.string(), ManifestPkg),
  profiles: t.record(t.string(), t.array(t.string())),
});

/**
 * The main Rust recipe. Returns a recipe containing the following:
 *
 * - `bin/rustc`
 * - `bin/cargo`
 *
 * ...among other binaries.
 */
export default async function rust(): Promise<std.Recipe<std.Directory>> {
  const manifestToml = await Brioche.download(
    `https://static.rust-lang.org/dist/channel-rust-${project.version}.toml`,
  ).read();
  const manifest = t.parse(Manifest, TOML.parse(manifestToml));

  // TODO: Support other profiles
  const profilePackages = manifest.profiles.minimal;
  if (profilePackages === undefined) {
    throw new Error("Rustup minimal profile not found");
  }

  let recipe = std.directory();
  for (const pkgName of profilePackages) {
    const pkg = manifest.pkg[pkgName];
    if (pkg === undefined) {
      throw new Error(`Rustup package ${pkgName} not found`);
    }

    const pkgTarget = pkg.target["x86_64-unknown-linux-gnu"];
    if (pkgTarget?.available !== true) {
      continue;
    }

    // FIXME: We unarchive within the process because unarchiving `rust-docs`
    // fails for some reason
    const pkgTargetArchive = std.download({
      url: pkgTarget.url,
      hash: std.sha256Hash(pkgTarget.hash),
    });

    const installedPkg = std.runBash`
      tar -xf $pkgTargetArchive --strip-components=1
      ./install.sh \\
        --prefix="$BRIOCHE_OUTPUT" \\
        --disable-ldconfig
    `
      .env({ pkgTargetArchive })
      .toDirectory();

    recipe = std.merge(recipe, installedPkg);
  }

  const localLibs = await std.runBash`
    find lib -type f -name '*.so' -print0 > "$BRIOCHE_OUTPUT"
  `
    .workDir(recipe)
    .toFile()
    .read()
    .then((libs) => libs.split("\0").filter((lib) => lib !== ""));
  const localLibNames = localLibs
    .map((lib) => lib.split("/").at(-1))
    .flatMap((name) => (name != null ? [name] : []));

  return std
    .setEnv(recipe, {
      LIBRARY_PATH: { append: [{ path: "lib" }] },
    })
    .pipe((recipe) =>
      std.autopack(recipe, {
        globs: ["bin/**", "libexec/**", "lib/librustc_driver-*.so"],
        selfDependency: true,
        dynamicBinaryConfig: {
          skipLibraries: localLibNames,
          extraRuntimeLibraryPaths: ["lib"],
        },
      }),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    rustc --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(rust)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `rustc ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/rust-lang/rust/git/matching-refs/tags
      | get ref
      | each {|ref|
        $ref
        | parse --regex '^refs/tags/(?P<tag>(?P<major>[\\d]+)\\.(?P<minor>[\\d]+)\\.(?P<patch>[\\d]+))'
        | get -i 0
      }
      | sort-by -n major minor patch
      | last
      | get tag

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}

interface CargoBuildParameters {
  features?: string[];
  defaultFeatures?: boolean;
  allFeatures?: boolean;
  bins?: boolean | string[];
  examples?: boolean | string[];
}

export interface CargoBuildOptions {
  source: std.RecipeLike<std.Directory>;
  path?: string;
  runnable?: string;
  dependencies?: std.RecipeLike<std.Directory>[];
  env?: Record<string, std.ProcessTemplateLike>;
  unsafe?: std.ProcessUnsafeOptions;
  cargoChefPrepare?: boolean;
  buildParams?: CargoBuildParameters;
}

/**
 * Build a Cargo crate. Defaults to the release profile. Calls
 * `cargo install` internally, and returns the contents of `$CARGO_INSTALL_ROOT`
 *
 * ## Options
 *
 * - `source`: The crate to build.
 * - `path`: Optionally set a subpath to the crate to build. This is useful
 *   when building a crate within a workspace.
 * - `runnable`: Optionally set a path to the binary to run
 *   by default (e.g. `bin/foo`).
 * - `dependencies`: Optionally add additional dependencies to the build.
 * - `env`: Optionally set environment variables for the build.
 * - `unsafe`: Optional unsafe options to enable when building. For example,
 *   passing `{ networking: true }` will allow a `build.rs` script to
 *   download files during the build. You must take extra care to ensure
 *   the build is hermetic when setting these options!
 * - `cargoChefPrepare`: Controls if the crate from `source` should get
 *   pre-processed by `cargo chef prepare` before being built, which avoids
 *   unnecessarily re-downloading dependencies when the source changes.
 *   Defaults to `true` (should only be disabled when there's an upstream
 *   issue with `cargo chef`).
 * - `buildParams`: Optional build parameters:
 *   - `features`: An array of features to enable.
 *   - `defaultFeatures`: Set to `false` to opt out of the crate's
 *     default features.
 *   - `allFeatures`: Set to `true` to enable all of the crate's features.
 *   - `bins`: Set to `true` to build all bin targets in the crate, or set
 *     to an array of bin targets to build. Defaults to `true` if no other
 *     targets are specified.
 *   - `examples`: Set to `true` to build all example targets in the crate,
 *     or set to an array of example targets to build.
 *
 * ## Example
 *
 * ```typescript
 * import openssl from "openssl";
 * import { cargoBuild } from "rust";
 *
 * export default function (): std.Recipe<std.Directory> {
 *   return cargoBuild({
 *     source: Brioche.glob("src", "Cargo.*"),
 *     runnable: "bin/hello",
 *     dependencies: [openssl],
 *     env: {
 *       CARGO_LOG: "debug",
 *     },
 *     buildParams: {
 *      features: ["foo", "bar"],
 *     },
 *   });
 * };
 * ```
 */
export function cargoBuild(options: CargoBuildOptions) {
  // Vendor the crate's dependencies
  const crate = vendorCrate({
    source: options.source,
    cargoChefPrepare: options.cargoChefPrepare,
  });

  const extraArgs: string[] = [];
  const features = options.buildParams?.features ?? [];
  if (features.length > 0) {
    for (const feature of features) {
      std.assert(
        /^[a-zA-Z0-9\-_]+$/.test(feature),
        `Unsupported feature name: ${feature}`,
      );
    }

    extraArgs.push("--features", features.join(","));
  }

  if (!(options.buildParams?.defaultFeatures ?? true)) {
    extraArgs.push("--no-default-features");
  }

  if (options.buildParams?.allFeatures ?? false) {
    extraArgs.push("--all-features");
  }

  const bins = options.buildParams?.bins;
  if (bins != null) {
    if (Array.isArray(bins)) {
      for (const bin of bins) {
        std.assert(
          /^[a-zA-Z0-9\-_]+$/.test(bin),
          `Unsupported bin name: ${bin}`,
        );
      }

      extraArgs.push(...bins.flatMap((bin) => ["--bin", bin]));
    } else if (typeof bins === "boolean") {
      if (bins) {
        extraArgs.push("--bins");
      }
    } else {
      std.unreachable(bins);
    }
  }

  const examples = options.buildParams?.examples;
  if (examples != null) {
    if (Array.isArray(examples)) {
      for (const example of examples) {
        std.assert(
          /^[a-zA-Z0-9\-_]+$/.test(example),
          `Unsupported example name: ${example}`,
        );
      }

      extraArgs.push(...examples.flatMap((example) => ["--example", example]));
    } else if (typeof examples === "boolean") {
      if (examples) {
        extraArgs.push("--examples");
      }
    } else {
      std.unreachable(examples);
    }
  }

  // Use `cargo install` to build and install the project to `$BRIOCHE_OUTPUT`
  let buildResult = std
    .process({
      command: std.tpl`${rust()}/bin/cargo`,
      args: [
        "install",

        // Install the crate specified by `path`
        "--path",
        options.path ?? ".",

        // Install to `$BRIOCHE_OUTPUT`
        "--root",
        std.outputPath,

        // Ensure the lockfile is up-to-date
        "--frozen",

        ...extraArgs,
      ],
      env: {
        // Include the output binary path in `$PATH` so Cargo doesn't warn
        // us to add the directory to the `$PATH`
        PATH: std.tpl`${std.outputPath}/bin`,

        ...options.env,
      },
      dependencies: [rust, std.toolchain, ...(options.dependencies ?? [])],
      workDir: crate,
      unsafe: options.unsafe,
    })
    .toDirectory();

  // Remove extra metadata created by `cargo install`
  buildResult = buildResult.remove(".crates.toml");
  buildResult = buildResult.remove(".crates2.json");

  // Add a runnable link if set in the options
  if (options.runnable != null) {
    buildResult = std.withRunnableLink(buildResult, options.runnable);
  }

  return buildResult;
}

/**
 * Create a "skeleton crate" for a Rust crate. This is a crate that has
 * the minimal set of files needed for Cargo to consider it a valid crate,
 * namely so we can vendor dependencies. Without doing this, we would need
 * to re-vendor the crates any time the source code changes!
 */
export function createSkeletonCrate(
  crate: std.RecipeLike<std.Directory>,
): std.Recipe<std.Directory> {
  const recipe = std.runBash`
    cargo chef prepare --recipe-path "$BRIOCHE_OUTPUT"
  `
    .dependencies(rust, cargoChef)
    .workDir(crate)
    .toFile();
  return std.runBash`
    cd "$BRIOCHE_OUTPUT"
    cargo chef cook --recipe-path "$recipe" --no-build
  `
    .dependencies(rust, cargoChef)
    .env({ recipe })
    .outputScaffold(std.directory())
    .toDirectory();
}

interface VendorCrateOptions {
  source: std.RecipeLike<std.Directory>;
  cargoChefPrepare?: boolean;
}

/**
 * Vendor the dependencies for a Rust crate, returning the same crate with
 * dependencies vendored using `cargo vendor`. `.cargo/config.toml` will
 * also be updated to use the vendored dependencies.
 *
 * ## Options
 *
 * - `source`: The crate to build.
 * - `cargoChefPrepare`: Controls if the crate from `source` should get
 *   pre-processed by `cargo chef prepare` before being built, which avoids
 *   unnecessarily re-downloading dependencies when the source changes.
 *   Defaults to `true` (should only be disabled when there's an upstream
 *   issue with `cargo chef`).
 */
export function vendorCrate(
  options: VendorCrateOptions,
): std.Recipe<std.Directory> {
  const { source, cargoChefPrepare = true } = options;

  // Create a skeleton crate so we have enough information to vendor the
  // dependencies
  const skeletonCrate = cargoChefPrepare ? createSkeletonCrate(source) : source;

  // Vendor the dependencies with network access and save the Cargo config.toml
  // file, so the vendored dependencies are used
  const vendoredSkeletonCrate = std.runBash`
    cd "$BRIOCHE_OUTPUT"
    mkdir -p .cargo

    # If the crate has a .cargo/config file, then move it to .cargo/config.toml
    # Cargo prefers config over config.toml, so we need to rename it
    # to avoid any conflicts. It will still need to be removed from the merged
    # crate later too
    if [ -f .cargo/config ]; then
      mv .cargo/config .cargo/config.toml
    fi

    # Always add a newline in case the file already exists and
    # doesn't end with a newline
    echo >> .cargo/config.toml

    # Vendor the dependencies, and update the config to use the
    # vendored dependencies
    cargo vendor --locked >> .cargo/config.toml
  `
    .dependencies(rust)
    .outputScaffold(skeletonCrate)
    .unsafe({ networking: true })
    .toDirectory();

  // Combine the original crate with the vendored dependencies
  let crate = cargoChefPrepare
    ? std.merge(vendoredSkeletonCrate, source)
    : vendoredSkeletonCrate;

  // Copy the updated Cargo config.toml file into the crate
  crate = crate.insert(
    ".cargo/config.toml",
    vendoredSkeletonCrate.get(".cargo/config.toml"),
  );

  // Remove the conflicting `cargo/config` file if it existed in the original
  // crate. It will have already been copied over to `.cargo/config.toml`
  crate = crate.remove(".cargo/config");

  return crate;
}

function cargoChef(): std.Recipe<std.Directory> {
  const pkg = Brioche.download(
    "https://github.com/LukeMathWalker/cargo-chef/releases/download/v0.1.71/cargo-chef-x86_64-unknown-linux-musl.tar.gz",
  );

  return std.directory({
    bin: pkg.unarchive("tar", "gzip"),
  });
}
