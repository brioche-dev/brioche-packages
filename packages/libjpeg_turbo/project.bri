import * as std from "std";
import { cmakeBuild } from "cmake";

export const project = {
  name: "libjpeg_turbo",
  version: "3.1.0",
  repository: "https://github.com/libjpeg-turbo/libjpeg-turbo.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: project.version,
});

export default function libjpegTurbo(): std.Recipe<std.Directory> {
  return cmakeBuild({
    source,
    dependencies: [std.toolchain],
    set: {
      WITH_JPEG8: "1",
    },
  }).pipe((recipe) =>
    std.setEnv(recipe, {
      CPATH: { append: [{ path: "include" }] },
      LIBRARY_PATH: { append: [{ path: "lib" }] },
      PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
    }),
  );
}

export async function test() {
  const script = std.runBash`
    pkg-config --modversion libturbojpeg | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, libjpegTurbo)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate() {
  return std.liveUpdateFromGithubReleases({ project });
}
