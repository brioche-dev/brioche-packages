import * as std from "std";
import nodejs, { npmInstallGlobal } from "nodejs";

export const project = {
  name: "claude_code",
  version: "2.0.27",
  extra: {
    packageName: "@anthropic-ai/claude-code",
  },
};

export default function claudeCode(): std.Recipe<std.Directory> {
  return npmInstallGlobal({
    packageName: project.extra.packageName,
    version: project.version,
    // TODO: use latest Node.js when upstream issue is resolved: https://github.com/anthropics/claude-code/issues/9795
    nodejs: nodejs({ version: "24" }),
  }).pipe((recipe) => std.withRunnableLink(recipe, "bin/claude"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    claude --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(claudeCode)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `${project.version} (Claude Code)`;
  std.assert(result === expected, `expected ${project.version}, got ${result}`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromNpmPackages({ project });
}
