import * as std from "std";

export const project = {
  name: "htop",
  version: "3.4.1",
  repository: "https://github.com/htop-dev/htop",
};

const source = Brioche.download(
  `${project.repository}/releases/download/${project.version}/htop-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function htop(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure --prefix=/
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain)
    .workDir(source)
    .toDirectory()
    .pipe((recipe) => std.withRunnableLink(recipe, "bin/htop"));
}

export async function test() {
  const script = std.runBash`
    htop --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(htop)
    .toFile();

  const result = (await script.read()).trim();

  const version = result.split("\n").at(0);

  // Check that the result contains the expected version
  const expected = `htop ${project.version}-${project.version}`;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export async function liveUpdate() {
  return std.liveUpdateFromGithubReleases({ project });
}
