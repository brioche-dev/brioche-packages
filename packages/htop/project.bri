import * as std from "std";
import nushell from "nushell";

export const project = {
  name: "htop",
  version: "3.4.1",
};

const source = Brioche.download(
  `https://github.com/htop-dev/htop/releases/download/${project.version}/htop-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function htop(): std.Recipe<std.Directory> {
  const htop = std.runBash`
    ./configure --prefix=/
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain())
    .workDir(source)
    .toDirectory();

  return std.withRunnableLink(htop, "bin/htop");
}

export async function test() {
  const script = std.runBash`
    htop --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(htop())
    .toFile();

  const result = (await script.read()).trim();

  const version = result.split("\n").at(0);

  // Check that the result contains the expected version
  const expected = `htop ${project.version}-${project.version}`;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export async function liveUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/htop-dev/htop/releases/latest
      | get tag_name

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
