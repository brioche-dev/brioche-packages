import * as std from "std";
import nushell from "nushell";

export const project = {
  name: "scdoc",
  version: "1.11.3",
};

const source = Brioche.download(
  `https://git.sr.ht/~sircmpwn/scdoc/archive/${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function scdoc(): std.Recipe<std.Directory> {
  return std.runBash`
    make PREFIX=/
    make install PREFIX=/ DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .env({
      // scdoc gets compiled to a static binary, so disable autopacking
      // TODO: Remove this and make it so brioche-ld handles this properly
      BRIOCHE_LD_AUTOPACK: "false",
    })
    .toDirectory();
}

export async function test(): Promise<std.Recipe<std.File>> {
  const exampleFile = std.file(std.indoc`
    SCDOC_TEST(7)

    # scdoc test

    Hello world! This is an example scdoc file :)
  `);

  const script = std.runBash`
    scdoc < "$example_file" | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(scdoc)
    .env({ example_file: exampleFile })
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected output
  const expected = `scdoc ${project.version}`;
  std.assert(
    result.includes(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.WithRunnable {
  const src = std.file(std.indoc`
    let version = http get https://git.sr.ht/~sircmpwn/scdoc/refs
      | lines
      | where {|it| $it | str contains "~sircmpwn/scdoc/refs/" }
      | parse --regex '<a href="/~sircmpwn/scdoc/refs/(?<version>.+)">'
      | sort-by --natural --reverse version
      | get 0.version

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}
