import * as std from "std";
import { cmakeBuild } from "cmake";

export const project = {
  name: "json_c",
  version: "0.18-20240915",
  repository: "https://github.com/json-c/json-c.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `json-c-${project.version}`,
});

export default function jsonC(): std.Recipe<std.Directory> {
  return cmakeBuild({
    source,
    dependencies: [std.toolchain],
    set: {
      // Required for building with CMake 3.5 or later
      CMAKE_POLICY_VERSION_MINIMUM: "3.5",
    },
  }).pipe((recipe) =>
    std.setEnv(recipe, {
      CPATH: { append: [{ path: "include" }] },
      LIBRARY_PATH: { append: [{ path: "lib" }] },
      PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
      CMAKE_PREFIX_PATH: { append: [{ path: "." }] },
    }),
  );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    pkg-config --modversion json-c | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, jsonC)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version.split("-").at(0);
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubTags({
    project,
    matchTag: /^json-c-(?<version>.+)$/,
  });
}
