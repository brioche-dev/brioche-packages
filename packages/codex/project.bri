import * as std from "std";
import openssl from "openssl";
import { cargoBuild } from "rust";

export const project = {
  name: "codex",
  version: "0.50.0",
  repository: "https://github.com/openai/codex.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `rust-v${project.version}`,
});

export default function codex(): std.Recipe<std.Directory> {
  return cargoBuild({
    source,
    currentDir: "codex-rs",
    path: "cli",
    dependencies: [openssl],
  }).pipe((recipe) => std.withRunnableLink(recipe, "bin/codex"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    codex --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(codex)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `codex-cli ${project.version}`;
  std.assert(result === expected, `expected ${expected}, got ${result}`);

  return script;
}

export async function liveUpdate(): Promise<std.Recipe<std.Directory>> {
  return std.liveUpdateFromGithubReleases({
    project,
    matchTag: /^rust-v(?<version>.+)$/,
  });
}
