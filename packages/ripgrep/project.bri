import * as std from "std";
import { cargoBuild } from "rust";
import { gitCheckout } from "git";
import nushell from "nushell";

export const project = {
  name: "ripgrep",
  version: "14.1.1",
};

const source = gitCheckout(
  Brioche.gitRef({
    repository: "https://github.com/BurntSushi/ripgrep.git",
    ref: project.version,
  }),
);

export default function ripgrep(): std.Recipe<std.Directory> {
  return cargoBuild({
    source,
    buildParams: {
      features: ["pcre2"],
    },
    runnable: "bin/rg",
  });
}

export async function test() {
  const script = std.runBash`
    rg --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(ripgrep())
    .toFile();

  const result = (await script.read()).trim();

  const version = result.split("\n").at(0);

  // Check that the result contains the expected version
  const expected = `ripgrep ${project.version}`;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export async function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/BurntSushi/ripgrep/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
