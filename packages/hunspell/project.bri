import * as std from "std";

export const project = {
  name: "hunspell",
  version: "1.7.2",
  repository: "https://github.com/hunspell/hunspell",
};

const source = Brioche.download(
  `${project.repository}/releases/download/v${project.version}/hunspell-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function hunspell(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure \
      --prefix=/ \
      --with-readline
    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .toDirectory()
    .pipe(
      std.libtoolSanitizeDependencies,
      std.pkgConfigMakePathsRelative,
      (recipe) =>
        std.setEnv(recipe, {
          CPATH: { append: [{ path: "include" }] },
          LIBRARY_PATH: { append: [{ path: "lib" }] },
          PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
        }),
      (recipe) => std.withRunnableLink(recipe, "bin/hunspell"),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    hunspell --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(hunspell)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `Hunspell ${project.version}`;
  std.assert(
    result.includes(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
