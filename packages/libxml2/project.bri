import * as std from "std";
import { cmakeBuild } from "cmake";
import python, { getLatestVersion as getPythonVersion } from "python";
import { nushellRunnable, type NushellRunnable } from "nushell";

export const project = {
  name: "libxml2",
  version: "2.15.1",
  extra: {
    majorVersion: "2",
    minorVersion: "15",
  },
};

// Ensure the major version number matches the version
std.assert(project.version.startsWith(`${project.extra.majorVersion}.`));
// Ensure the minor version number matches the version
std.assert(project.version.split(".").at(1) === project.extra.minorVersion);

const source = Brioche.download(
  `https://download.gnome.org/sources/libxml2/${project.extra.majorVersion}.${project.extra.minorVersion}/libxml2-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function libxml2(): std.Recipe<std.Directory> {
  let libxml2 = cmakeBuild({
    source,
    dependencies: [std.toolchain, python],
    set: {
      // TODO: `LIBXML2_PYTHON_INSTALL_DIR` is set to resolved an upstream issue (see https://gitlab.gnome.org/GNOME/libxml2/-/issues/977)
      // Remove it once the Python binding is suppressed (see https://gitlab.gnome.org/GNOME/libxml2/-/issues/891)
      LIBXML2_PYTHON_INSTALL_DIR: std.tpl`${
        std.outputPath
      }/lib/python${getPythonVersion()}/site-packages`,
      LIBXML2_WITH_TESTS: "OFF",
    },
  }).pipe((recipe) =>
    std.setEnv(recipe, {
      // Software that depends on this library looks for the `libxml` include folder, which is located in `include/libxml2`
      CPATH: { append: [{ path: "include/libxml2" }] },
      LIBRARY_PATH: { append: [{ path: "lib" }] },
      PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
      CMAKE_PREFIX_PATH: { append: [{ path: "." }] },
    }),
  );

  // Remove a bunch of `*.tmp*` files left over in the build
  // TODO: Figure out where these temp files are coming from!
  libxml2 = std.runBash`
    find "$BRIOCHE_OUTPUT/lib" -name '*.tmp*' -delete
  `
    .outputScaffold(libxml2)
    .toDirectory();

  return libxml2;
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    pkg-config --modversion libxml-2.0 | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, libxml2)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): NushellRunnable {
  return nushellRunnable`
    let sourceUrl = http get https://download.gnome.org/sources/libxml2
      | lines
      | where {|it| $it | str contains 'href="' }
      | parse --regex '<a href="(?<version>.+)/"'
      | sort-by --natural --reverse version
      | get 0.version

    let version = http get $"https://download.gnome.org/sources/libxml2/($sourceUrl)"
      | lines
      | where {|it| ($it | str contains '<a href="libxml2') and (not ($it | str contains '.sha256sum')) and (not ($it | str contains '.news')) }
      | parse --regex '<a href="libxml2-(?<version>[^"]+)\.tar\.xz"'
      | sort-by --natural --reverse version
      | get 0.version

    let majorVersion = $version
      | split words
      | get 0
    let minorVersion = $version
      | split words
      | get 1

    $env.project
      | from json
      | update version $version
      | update extra.majorVersion $majorVersion
      | update extra.minorVersion $minorVersion
      | to json
  `.env({ project: JSON.stringify(project) });
}
