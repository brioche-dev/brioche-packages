import * as std from "std";
import * as typer from "typer";
import python from "python";
import nushell from "nushell";

export const project = {
  name: "nodejs",
  version: "25.0.0",
  repository: "https://github.com/nodejs/node",
  extra: {
    otherVersions: {
      "25": "25.0.0",
      "24": "24.10.0",
      "22": "22.21.0",
      "20": "20.19.5",
    },
  },
} as const;

std.assert(
  Object.keys(project.extra.otherVersions).some((version) =>
    project.version.startsWith(`${version}.`),
  ),
  "Node.js package version not found in extra.minorVersions",
);

/**
 * The Node.js version.
 */
type NodeVersion = keyof typeof project.extra.otherVersions;

function getLatestVersion(): NodeVersion {
  const versions = Object.keys(project.extra.otherVersions);
  versions.sort((a, b) => parseInt(b) - parseInt(a));

  return versions[0] as NodeVersion;
}

const prebuiltBinaries: Record<
  string,
  Record<string, std.Recipe<std.Directory>>
> = {
  "25": {
    "x86_64-linux": Brioche.download(
      `https://nodejs.org/dist/v${project.version}/node-v${project.version}-linux-x64.tar.xz`,
    )
      .unarchive("tar", "xz")
      .peel(),
    "aarch64-linux": Brioche.download(
      `https://nodejs.org/dist/v${project.version}/node-v${project.version}-linux-arm64.tar.xz`,
    )
      .unarchive("tar", "xz")
      .peel(),
  },
  "24": {
    "x86_64-linux": Brioche.download(
      `https://nodejs.org/dist/v${project.extra.otherVersions["24"]}/node-v${project.extra.otherVersions["24"]}-linux-x64.tar.xz`,
    )
      .unarchive("tar", "xz")
      .peel(),
    "aarch64-linux": Brioche.download(
      `https://nodejs.org/dist/v${project.extra.otherVersions["24"]}/node-v${project.extra.otherVersions["24"]}-linux-arm64.tar.xz`,
    )
      .unarchive("tar", "xz")
      .peel(),
  },
  "22": {
    "x86_64-linux": Brioche.download(
      `https://nodejs.org/dist/v${project.extra.otherVersions["22"]}/node-v${project.extra.otherVersions["22"]}-linux-x64.tar.xz`,
    )
      .unarchive("tar", "xz")
      .peel(),
    "aarch64-linux": Brioche.download(
      `https://nodejs.org/dist/v${project.extra.otherVersions["22"]}/node-v${project.extra.otherVersions["22"]}-linux-arm64.tar.xz`,
    )
      .unarchive("tar", "xz")
      .peel(),
  },
  "20": {
    "x86_64-linux": Brioche.download(
      `https://nodejs.org/dist/v${project.extra.otherVersions["20"]}/node-v${project.extra.otherVersions["20"]}-linux-x64.tar.xz`,
    )
      .unarchive("tar", "xz")
      .peel(),
    "aarch64-linux": Brioche.download(
      `https://nodejs.org/dist/v${project.extra.otherVersions["20"]}/node-v${project.extra.otherVersions["20"]}-linux-arm64.tar.xz`,
    )
      .unarchive("tar", "xz")
      .peel(),
  },
} satisfies Record<
  NodeVersion,
  Record<std.Platform, std.Recipe<std.Directory>>
>;

function prebuiltBinary(
  version: NodeVersion,
  platform: std.Platform,
): std.Recipe<std.Directory> {
  const prebuiltBinariesForVersion = prebuiltBinaries[version];
  std.assert(
    prebuiltBinariesForVersion != null,
    `Node.js version '${version}' is not supported, expected one of ${JSON.stringify(
      Object.keys(prebuiltBinaries),
    )}`,
  );

  const prebuilt = prebuiltBinariesForVersion[platform];
  std.assert(
    prebuilt != null,
    `Node.js ${version} is not supported for ${platform}, expected one of ${JSON.stringify(
      Object.keys(prebuiltBinariesForVersion),
    )}`,
  );

  return prebuilt;
}

/**
 * Extra options for Node.js.
 *
 * @param version - The major version of Node.js to use. Defaults to the
 *   current stable release (at the time the `nodejs` Brioche package was
 *   last updated).
 */
interface NodeOptions {
  version?: NodeVersion;
}

/**
 * The main Node.js recipe.
 *
 * @param options - Extra options for the Node.js recipe.
 *
 * @returns A recipe containing Node.js, including the binaries `bin/node`
 *   and `bin/npm`.
 */
export default function nodejs(
  options: NodeOptions = {},
): std.Recipe<std.Directory> {
  const { version = getLatestVersion() } = options;

  return prebuiltBinary(version, std.CURRENT_PLATFORM).pipe(
    (recipe) =>
      std.autopack(recipe, {
        globs: ["bin/**"],
      }),
    (recipe) => std.withRunnableLink(recipe, "bin/node"),
  );
}

export function test(): std.Recipe<std.Directory> {
  const nodeVersions = Object.keys(
    project.extra.otherVersions,
  ) as NodeVersion[];

  const tests = nodeVersions.map(async (version) => {
    const script = std.runBash`
      node --version | tee "$BRIOCHE_OUTPUT"
    `
      .dependencies(nodejs({ version }))
      .toFile();

    const result = (await script.read()).trim();

    // Check that the result contains the expected version
    const expected = `v${project.extra.otherVersions[version]}`;
    std.assert(result === expected, `expected '${expected}', got '${result}'`);

    return std.directory().insert(version, script);
  });

  return std.merge(...tests);
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}

/**
 * Options for building and installing an npm package.
 *
 * @param source - The npm package dependencies to install.
 */
interface NpmInstallOptions {
  source: std.RecipeLike<std.Directory>;
}

/**
 * Install the dependencies from an npm package. Returns a recipe containing
 * everything from the package, plus a `node_modules` directory.
 *
 * @param options - The options for installing the npm package.
 *
 * @returns A recipe containing everything from the package, plus a `node_modules` directory
 *
 * @example
 * ```typescript
 * import * as std from "std";
 * import nodejs, { npmInstall } from "nodejs";
 *
 * export default function (): std.Recipe<std.Directory> {
 *   // Get all the files for the npm package
 *   const source = Brioche.glob("src", "package.lock", "package.json");
 *
 *   // Install the dependencies
 *   const npmPackage = npmInstall({ source });
 *
 *   // Run the build script and save the output from `dist/`
 *   return std.runBash`
 *     npm run build
 *     mv dist "$BRIOCHE_OUTPUT"
 *   `
 *     .workDir(npmPackage)
 *     .dependencies(nodejs);
 * };
 * ```
 */
export function npmInstall(
  options: NpmInstallOptions,
): std.Recipe<std.Directory> {
  return std.runBash`
    cd "$BRIOCHE_OUTPUT"
    npm clean-install
  `
    .dependencies(std.toolchain, nodejs, python)
    .outputScaffold(options.source)
    .unsafe({ networking: true })
    .toDirectory();
}

/**
 * Options for installing a global npm package.
 *
 * @param packageName - The name of the npm package to install.
 * @param version - The version of the package to install.
 * @param wrapBins - Whether to wrap the installed binaries.
 * @param nodejs - The Node.js and npm recipe to use to install the package.
 *   Can be used to use a specific version of Node.js.
 */
interface NpmInstallGlobalOptions {
  packageName: string;
  version: string;
  wrapBins?: boolean;
  nodejs?: std.RecipeLike<std.Directory>;
}

const BinList = typer.array(
  typer.object({
    name: typer.string(),
    target: typer.string(),
  }),
);

/**
 * Installs a global npm package. Returns a recipe containing the package
 *
 * @param options - The options for installing the global npm package.
 *
 * @returns A recipe containing the package
 *
 * @example
 * ```typescript
 * import * as std from "std";
 * import { npmInstallGlobal } from "nodejs";
 *
 * // Install the dependency and return the path to the binary to run
 * export default () => {
 *   const npmPackage = npmInstallGlobal({
 *     packageName: "aws-cdk",
 *     version: "2.150.0",
 *   });
 *   return std.withRunnableLink(npmPackage, "bin/cdk");
 * };
 * ```
 */
export function npmInstallGlobal(
  options: NpmInstallGlobalOptions,
): std.Recipe<std.Directory> {
  return std.recipe(async () => {
    const {
      packageName,
      version,
      wrapBins = true,
      nodejs: nodejsDep = nodejs,
    } = options;

    return std.runBash`
      if [ "$(npm view "\${package_name}@\${version}" version)" != "$version" ]; then
        echo "The npm package ($package_name) is not an exact version ($version), please ensure the version is more specific."
        exit 1
      fi

      npm install --global "\${package_name}@\${version}"
    `
      .dependencies(std.toolchain, nodejsDep, python)
      .env({
        package_name: packageName,
        version,
        npm_config_prefix: std.outputPath,
      })
      .unsafe({ networking: true })
      .toDirectory()
      .pipe((recipe) => {
        return wrapBins ? wrapNodejsBins(recipe, nodejsDep) : recipe;
      });
  });
}

/*
 * Wraps the binaries of a nodejs package with the nodejs interpreter.
 *
 * @param recipe The recipe to wrap the binaries of.
 * @param nodejs The Node.js recipe to use.
 */
async function wrapNodejsBins(
  recipe: std.RecipeLike<std.Directory>,
  nodejs: std.RecipeLike<std.Directory>,
): Promise<std.Recipe<std.Directory>> {
  // Use a Nushell script to get a list of installed bin symlinks to wrap
  const binsJson = await std
    .process({
      command: std.tpl`${nushell}/bin/nu`,
      args: [Brioche.includeFile("find-nodejs-bins.nu")],
      env: {
        recipe,
      },
    })
    .toFile()
    .read();
  const bins = typer.parseJson(BinList, binsJson);

  // Add a runnable binary for each installed bin symlink
  const wrappedBins = bins.map(({ name, target }) => {
    return std.addRunnable(std.directory(), name, {
      command: "node",
      args: [{ relativePath: target }],
      dependencies: [nodejs],
    });
  });

  // Merge the wrapped binaries into the recipe
  return std.merge(recipe, ...wrappedBins);
}
