import * as std from "std";
import nushell from "nushell";
import * as typer from "typer";

export const project = {
  name: "nodejs",
  version: "22.11.0",
};

/**
 * The main Node.js recipe. Returns a recipe containing the following:
 *
 * - `bin/node`
 * - `bin/npm`
 */
function nodejs(): std.Recipe<std.Directory> {
  let node = Brioche.download(
    `https://nodejs.org/dist/v${project.version}/node-v${project.version}-linux-x64.tar.xz`,
  )
    .unarchive("tar", "xz")
    .peel();

  node = std.autopack(node, {
    globs: ["bin/**"],
  });

  return std.withRunnableLink(node, "bin/node");
}
export default nodejs;

interface NpmInstallOptions {
  source: std.AsyncRecipe<std.Directory>;
}

export function test() {
  return std.runBash`
    node --version | tee "$BRIOCHE_OUTPUT"
  `.dependencies(nodejs());
}

/**
 * Install the dependencies from an NPM package. Returns a recipe containing
 * everything from the package, plus a `node_modules` directory.
 *
 * ## Options
 *
 * - `source`: The NPM package dependencies to install.
 *
 * ## Example
 *
 * ```typescript
 * import * as std from "std";
 * import nodejs, { npmInstall } from "nodejs";
 *
 * export default function () {
 *   // Get all the files for the NPM package
 *   const source = Brioche.glob("src", "package.lock", "package.json");
 *
 *   // Install the dependencies
 *   const npmPackage = npmInstall({ source });
 *
 *   // Run the build script and save the output from `dist/`
 *   return std.runBash`
 *     npm run build
 *     mv dist "$BRIOCHE_OUTPUT"
 *   `
 *     .workDir(npmPackage)
 *     .dependencies(nodejs());
 * };
 * ```
 */
export function npmInstall(
  options: NpmInstallOptions,
): std.Recipe<std.Directory> {
  return std.runBash`
    cd "$BRIOCHE_OUTPUT"
    npm clean-install
  `
    .dependencies(nodejs())
    .outputScaffold(options.source)
    .unsafe({ networking: true })
    .toDirectory();
}

interface NpmInstallGlobalOptions {
  packageName: string;
  version: string;
  wrapBins?: boolean;
}

const BinList = typer.array(
  typer.object({
    name: typer.string(),
    target: typer.string(),
  }),
);

/**
 * Installs a global NPM package. Returns a recipe containing the package
 *
 * ## Options
 *
 * - `packageName`: The NPM package dependencies to install.
 * - `version`: The version of the package to install.
 *
 * ## Example
 *
 * ```typescript
 * import * as std from "std";
 * import { npmInstallGlobal } from "nodejs";
 *
 * // Install the dependency and return the path to the binary to run
 * export default () => {
 *   const npmPackage = npmInstallGlobal({
 *     packageName: "aws-cdk",
 *     version: "2.150.0",
 *   });
 *   return std.withRunnableLink(npmPackage, "bin/cdk");
 * };
 * ```
 */
export function npmInstallGlobal(
  options: NpmInstallGlobalOptions,
): std.Recipe<std.Directory> {
  return std.recipeFn(async () => {
    const { packageName, version, wrapBins = true } = options;

    let recipe = std.runBash`
      if [ "$(npm view "\${package_name}@\${version}" version)" != "$version" ]; then
        echo "The NPM package ($package_name) is not an exact version ($version), please ensure the version is more specific."
        exit 1
      fi

      npm install --global "\${package_name}@\${version}"
    `
      .dependencies(nodejs())
      .outputScaffold(std.directory())
      .env({
        package_name: packageName,
        version,
        npm_config_prefix: std.outputPath,
      })
      .unsafe({ networking: true })
      .toDirectory();

    if (wrapBins) {
      // Use a Nushell script to get a list of installed bin symlinks to wrap
      const binsJson = await std
        .process({
          command: std.tpl`${nushell()}/bin/nu`,
          args: [Brioche.includeFile("find-nodejs-bins.nu")],
          env: {
            recipe,
          },
        })
        .toFile()
        .read();
      const bins = typer.parseJson(BinList, binsJson);

      // Add a runnable binary for each installed bin symlink
      const wrappedBins = bins.map(({ name, target }) => {
        return std.addRunnable(std.directory(), name, {
          command: "node",
          args: [{ relativePath: target }],
          dependencies: [nodejs()],
        });
      });

      // Merge the wrapped binaries into the recipe
      recipe = std.merge(recipe, ...wrappedBins);
    }

    return recipe;
  });
}
