import * as std from "std";

export const project = {
  name: "nodejs",
  version: "20.15.1",
};

/**
 * The main Node.js recipe. Returns a recipe containing the following:
 *
 * - `bin/node`
 * - `bin/npm`
 */
function nodejs(): std.Recipe<std.Directory> {
  let node = std
    .download({
      url: `https://nodejs.org/dist/v${project.version}/node-v${project.version}-linux-x64.tar.xz`,
      hash: std.sha256Hash(
        "26700f8d3e78112ad4a2618a9c8e2816e38a49ecf0213ece80e54c38cb02563f",
      ),
    })
    .unarchive("tar", "xz")
    .peel();

  node = std.autopack(node, {
    globs: ["bin/**"],
  });

  return std.withRunnableLink(node, "bin/node");
}
export default nodejs;

interface NpmInstallOptions {
  source: std.AsyncRecipe<std.Directory>;
}

/**
 * Install the dependencies from an NPM package. Returns a recipe containing
 * everything from the package, plus a `node_modules` directory.
 *
 * ## Options
 *
 * - `source`: The NPM package dependencies to install.
 *
 * ## Example
 *
 * ```typescript
 * import * as std from "std";
 * import nodejs, { npmInstall } from "nodejs";
 *
 * export default () => {
 *   // Get all the files for the NPM package
 *   const source = Brioche.glob("src", "package.lock", "package.json");
 *
 *   // Install the dependencies
 *   const npmPackage = npmInstall({ source });
 *
 *   // Run the build script and save the output from `dist/`
 *   return std.runBash`
 *     npm run build
 *     mv dist "$BRIOCHE_OUTPUT"
 *   `
 *     .workDir(npmPackage)
 *     .dependencies(nodejs());
 * };
 * ```
 */
export function npmInstall(
  options: NpmInstallOptions,
): std.Recipe<std.Directory> {
  return std.runBash`
    cd "$BRIOCHE_OUTPUT"
    npm clean-install
  `
    .dependencies(nodejs())
    .outputScaffold(options.source)
    .unsafe({ networking: true })
    .toDirectory();
}

interface NpmInstallGlobalOptions {
  packageName: string;
  version: string;
}

/**
 * Installs a global NPM package. Returns a recipe containing the package
 *
 * ## Options
 *
 * - `packageName`: The NPM package dependencies to install.
 * - `version`: The version of the package to install.
 *
 * ## Example
 *
 * ```typescript
 * import * as std from "std";
 * import { npmInstallGlobal } from "nodejs";
 *
 * // Install the dependency and return the path to the binary to run
 * export default () => {
 *   const npmPackage = npmInstallGlobal({
 *     packageName: "aws-cdk",
 *     version: "2.150.0",
 *   });
 *   return std.withRunnableLink(npmPackage, "bin/cdk");
 * };
 * ```
 */
export function npmInstallGlobal(
  options: NpmInstallGlobalOptions,
): std.Recipe<std.Directory> {
  const packageDir = std.runBash`
    [ $(npm view "${options.packageName}@${options.version}" "dist.shasum" | { IFS= read -r line1; IFS= read -r line2; [ -z "$line2" ] && echo 1 || echo 0; }) -eq 1 ] && echo "The NPM package (${options.packageName}) is an exact version (${options.version})" || (echo "The NPM package (${options.packageName}) is not an exact version (${options.version}) please ensure the version is more specific." && exit 1)
    npm install --prefix "$BRIOCHE_OUTPUT" ${options.packageName}@${options.version}
  `
    .dependencies(nodejs())
    .outputScaffold(std.directory({}))
    .unsafe({ networking: true })
    .toDirectory();

  return std.castToDirectory(
    std
      .castToDirectory(packageDir.get("node_modules"))
      .get(options.packageName),
  );
}
