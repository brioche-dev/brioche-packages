import * as std from "std";

export const project = {
  name: "nodejs",
  version: "20.15.1",
};

/**
 * The main Node.js recipe. Returns a recipe containing the following:
 *
 * - `bin/node`
 * - `bin/npm`
 */
function nodejs(): std.Recipe<std.Directory> {
  let node = std
    .download({
      url: `https://nodejs.org/dist/v${project.version}/node-v${project.version}-linux-x64.tar.xz`,
      hash: std.sha256Hash(
        "26700f8d3e78112ad4a2618a9c8e2816e38a49ecf0213ece80e54c38cb02563f",
      ),
    })
    .unarchive("tar", "xz")
    .peel();

  node = std.autopack(node, {
    globs: ["bin/**"],
  });

  return std.withRunnableLink(node, "bin/node");
}
export default nodejs;

interface NpmInstallOptions {
  npmPackage: std.AsyncRecipe<std.Directory>;
}

/**
 * Install the dependencies from an NPM package. Returns a recipe containing
 * everything from the package, plus a `node_modules` directory.
 *
 * ## Example
 *
 * ```typescript
 * import * as std from "std";
 * import nodejs, { npmInstall } from "nodejs";
 *
 * export default () => {
 *   // Get all the files for the NPM package
 *   let npmPackage = Brioche.glob("src", "package.lock", "package.json");
 *
 *   // Install the dependencies
 *   npmPackage = npmInstall({ npmPackage });
 *
 *   // Run the build script and save the output from `dist/`
 *   return std.runBash`
 *     npm run build
 *     mv dist "$BRIOCHE_OUTPUT"
 *   `
 *     .workDir(npmPackage)
 *     .dependencies(nodejs());
 * };
 * ```
 */
export function npmInstall(
  options: NpmInstallOptions,
): std.Recipe<std.Directory> {
  return std.runBash`
    cd "$BRIOCHE_OUTPUT"
    npm clean-install
  `
    .dependencies(nodejs())
    .outputScaffold(options.npmPackage)
    .unsafe({ networking: true })
    .toDirectory();
}
