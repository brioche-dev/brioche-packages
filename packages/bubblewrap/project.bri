import * as std from "std";
import meson from "meson";
import ninja from "ninja";
import libcap from "libcap";

export const project = {
  name: "bubblewrap",
  version: "0.11.0",
  repository: "https://github.com/containers/bubblewrap",
};

const source = Brioche.download(
  `${project.repository}/releases/download/v${project.version}/bubblewrap-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function bubblewrap(): std.Recipe<std.Directory> {
  return std.runBash`
    meson setup _builddir --prefix /
    meson compile -C _builddir
    meson install -C _builddir --destdir "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, meson, ninja, libcap)
    .workDir(source)
    .toDirectory()
    .pipe((recipe) => std.withRunnableLink(recipe, "bin/bwrap"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    bwrap --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(bubblewrap)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `bubblewrap ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export async function liveUpdate(): Promise<std.Recipe<std.Directory>> {
  return std.liveUpdateFromGithubReleases({ project });
}
