import * as std from "std";
import rust, { cargoBuild } from "rust";

export const project = {
  name: "cargo_nextest",
  version: "0.9.96",
  repository: "https://github.com/nextest-rs/nextest.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `cargo-nextest-${project.version}`,
});

export default function cargoNextest(): std.Recipe<std.Directory> {
  return cargoBuild({
    source,
    path: "cargo-nextest",

    // cargo-chef makes the lockfile out-of-date for cargo-nextest, see
    // this issue:
    // https://github.com/LukeMathWalker/cargo-chef/issues/305
    cargoChefPrepare: false,
  });
}

export async function test() {
  const script = std.runBash`
    cargo nextest --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(rust, cargoNextest)
    .toFile();

  const result = (await script.read()).trim();

  const version = result.split("\n").at(0);

  // Check that the result contains the expected version
  const expected = `cargo-nextest ${project.version}`;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export async function liveUpdate() {
  return std.liveUpdateFromGithubReleases({
    project,
    matchTag: /^cargo-nextest-(?<version>.*)$/,
  });
}
