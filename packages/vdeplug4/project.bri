import * as std from "std";
import { cmakeBuild } from "cmake";
import s2argvExecs from "s2argv_execs";
import { nushellRunnable, type NushellRunnable } from "nushell";

export const project = {
  name: "vdeplug4",
  version: "4.0.1",
  repository: "https://github.com/rd235/vdeplug4",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `v${project.version}`,
});

export default function vdeplug4(): std.Recipe<std.Directory> {
  return cmakeBuild({
    source,
    dependencies: [std.toolchain, s2argvExecs],
    runnable: "bin/vde_plug",
  }).pipe((recipe) =>
    std.setEnv(recipe, {
      LIBRARY_PATH: { append: [{ path: "lib" }] },
      CPATH: { append: [{ path: "include" }] },
    }),
  );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const src = std.file(std.indoc`
      #include <stdio.h>
      #include <stdlib.h>
      #include <string.h>
      #include <libvdeplug.h>

      int main()
      {
          char *vnl = "vde:///tmp/vde.ctl";
          struct vde_open_args args;

          memset(&args, 0, sizeof(args));

          // Open VDE connection
          VDECONN *conn = vde_open(vnl, "vdeplug4-client", &args);
          if (conn == NULL)
          {
              printf("Failed to open VDE connection");
              return EXIT_SUCCESS;
          }

          vde_close(conn);

          return EXIT_SUCCESS;
      }
  `);

  const script = std.runBash`
    cp "$src" main.c
    gcc main.c -o main -lvdeplug
    ./main | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, vdeplug4)
    .env({ src: src })
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected output
  const expected = "Failed to open VDE connection";
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): NushellRunnable {
  return nushellRunnable`
    let version = http get https://api.github.com/repos/rd235/vdeplug4/git/matching-refs/tags
      | get ref
      | each {|ref|
        $ref
        | parse --regex '^refs/tags/v(?P<tag>(?P<major>[\\d]+)\\.(?P<minor>[\\d]+)\\.(?P<patch>[\\d]+))$'
        | get -i 0
      }
      | sort-by -n major minor patch
      | last
      | get tag

    $env.project
      | from json
      | update version $version
      | to json
  `.env({ project: JSON.stringify(project) });
}
