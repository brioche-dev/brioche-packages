import nushell from "nushell";
import * as std from "std";
import { cmakeBuild } from "cmake";
import { gitCheckout } from "git";
import s2argvExecs from "s2argv_execs";

export const project = {
  name: "vdeplug4",
  version: "4.0.1",
};

export const source = gitCheckout(
  Brioche.gitRef({
    repository: "https://github.com/rd235/vdeplug4.git",
    ref: `v${project.version}`,
  }),
);

export default function (): std.Recipe<std.Directory> {
  let vdeplug = cmakeBuild({
    source,
    dependencies: [std.toolchain(), s2argvExecs()],
  });

  vdeplug = std.setEnv(vdeplug, {
    LIBRARY_PATH: { append: [{ path: "lib" }] },
    CPATH: { append: [{ path: "include" }] },
  });

  return vdeplug;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/rd235/vdeplug4/git/matching-refs/
      | get ref
      | each {|ref|
        $ref
        | parse --regex '^refs/tags/v(?P<tag>(?P<major>[\\d]+)\\.(?P<minor>[\\d]+)\\.(?P<patch>[\\d]+))'
        | get -i 0
      }
      | sort-by -n major minor patch
      | last
      | get tag

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
