import * as std from "std";
import { cargoBuild } from "rust";
import { gitCheckout } from "git";

export const project = {
  name: "yazi",
  version: "25.4.8",
  repository: "https://github.com/sxyazi/yazi.git",
};

const gitRef = await Brioche.gitRef({
  repository: project.repository,
  ref: `v${project.version}`,
});
const source = gitCheckout(gitRef);

export default function yazi(): std.Recipe<std.Directory> {
  return cargoBuild({
    source,
    runnable: "bin/yazi",
    path: "yazi-fm",
    env: {
      VERGEN_GIT_SHA: gitRef.commit,
    },
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    yazi --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(yazi)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `Yazi ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate() {
  return std.liveUpdateFromGithubReleases({ project });
}
