import * as std from "std";
import go, { goBuild } from "go";
import nushell from "nushell";

export const project = {
  name: "caddy",
  version: "2.10.0",
  extra: {
    xcaddy: {
      version: "0.4.4",
    },
  },
};

const sourceRef = Brioche.gitRef({
  repository: "https://github.com/caddyserver/caddy.git",
  ref: `v${project.version}`,
});

export default function caddy(): std.Recipe<std.Directory> {
  return std
    .recipe(async () => {
      const commit = (await sourceRef).commit;

      // Build Caddy using `xcaddy build`. This is the officially-recommended
      // way to build Caddy from source. Building it like a normal Go project
      // leaves out version information
      return std
        .process({
          command: "xcaddy",
          args: [
            "build",
            commit,
            "--output",
            std.tpl`${std.outputPath}/bin/caddy`,
          ],
          dependencies: [xcaddy, go],
          unsafe: {
            networking: true,
          },
        })
        .toDirectory();
    })
    .pipe((recipe) => std.withRunnableLink(recipe, "bin/caddy"));
}

function xcaddy(): std.Recipe<std.Directory> {
  const source = Brioche.gitCheckout({
    repository: "https://github.com/caddyserver/xcaddy.git",
    ref: `v${project.extra.xcaddy.version}`,
  });

  return goBuild({
    source,
    path: "./cmd/xcaddy",
    runnable: "bin/xcaddy",
  });
}

export async function test() {
  const script = std.runBash`
    caddy version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(caddy)
    .toFile();

  const result = (await script.read()).trim();

  std.assert(
    result.startsWith(`v${project.version} `),
    `expected '${project.version}', got '${result}'`,
  );

  return script;
}

export function liveUpdate() {
  const src = std.file(std.indoc`
    let releaseData = http get https://api.github.com/repos/caddyserver/caddy/releases/latest

    let version = $releaseData
      | get tag_name
      | str replace --regex '^v' ''

    let xcaddyReleaseData = http get https://api.github.com/repos/caddyserver/xcaddy/releases/latest

    let xcaddyVersion = $xcaddyReleaseData
      | get tag_name
      | str replace --regex '^v' ''

    $env.project
      | from json
      | update version $version
      | update extra.xcaddy.version $xcaddyVersion
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}
