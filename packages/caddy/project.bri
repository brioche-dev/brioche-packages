import * as std from "std";
import go from "go";
import xcaddy from "xcaddy";

export const project = {
  name: "caddy",
  version: "2.10.2",
  repository: "https://github.com/caddyserver/caddy.git",
};

const sourceRef = Brioche.gitRef({
  repository: project.repository,
  ref: `v${project.version}`,
});

export default function caddy(): std.Recipe<std.Directory> {
  return std
    .recipe(async () => {
      const commit = (await sourceRef).commit;

      // Build Caddy using `xcaddy build`. This is the officially-recommended
      // way to build Caddy from source. Building it like a normal Go project
      // leaves out version information
      return std
        .process({
          command: "xcaddy",
          args: [
            "build",
            commit,
            "--output",
            std.tpl`${std.outputPath}/bin/caddy`,
          ],
          dependencies: [xcaddy, go],
          unsafe: {
            networking: true,
          },
        })
        .toDirectory();
    })
    .pipe((recipe) => std.withRunnableLink(recipe, "bin/caddy"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    caddy version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(caddy)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `v${project.version} `;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
