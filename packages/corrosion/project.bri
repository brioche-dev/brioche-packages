import * as std from "std";
import cmake, { cmakeBuild } from "cmake";
import rust from "rust";

export const project = {
  name: "corrosion",
  version: "0.5.2",
  repository: "https://github.com/corrosion-rs/corrosion.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `v${project.version}`,
});

export default function corrosion(): std.Recipe<std.Directory> {
  return cmakeBuild({
    source,
    dependencies: [std.toolchain, rust],
  }).pipe((recipe) =>
    std.setEnv(recipe, {
      CMAKE_PREFIX_PATH: { append: [{ path: "." }] },
    }),
  );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const src = std.file(std.indoc`
    cmake_minimum_required(VERSION 4.0)
    project(QueryVersion)

    find_package(Corrosion REQUIRED CONFIG)
    message(STATUS "Corrosion version: \${Corrosion_VERSION}")
  `);

  const script = std.runBash`
    cp "$src" CMakeLists.txt
    cmake -S . -B tmp | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, cmake, rust, corrosion)
    .env({ src })
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `Corrosion version: ${project.version}`;
  std.assert(
    result.includes(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export async function liveUpdate(): Promise<std.Recipe<std.Directory>> {
  return std.liveUpdateFromGithubReleases({ project });
}
