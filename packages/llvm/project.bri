import * as std from "std";
import { cmakeBuild } from "cmake";
import python from "python";

export const project = {
  name: "llvm",
  version: "21.1.4",
  repository: "https://github.com/llvm/llvm-project.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `llvmorg-${project.version}`,
});

export default function llvm(): std.Recipe<std.Directory> {
  let llvm = cmakeBuild({
    source,
    path: "llvm",
    set: {
      LLVM_ENABLE_PROJECTS: "clang;clang-tools-extra;lld;lldb",
      CMAKE_BUILD_TYPE: "Release",
    },
    env: {
      // HACK: Building LLVM can use A LOT of memory, especially when building
      // in parallel. These values are tuned based on the CI runners currently
      // in use in the `brioche-packages` repo.
      CMAKE_BUILD_PARALLEL_LEVEL:
        std.CURRENT_PLATFORM === "x86_64-linux" ? "16" : "8",
    },
    dependencies: [std.toolchain, python],
  }).pipe((recipe) =>
    std.setEnv(recipe, {
      LIBRARY_PATH: { append: [{ path: "lib" }] },
      CPATH: { append: [{ path: "include" }] },
    }),
  );

  // Remove a bunch of `*.tmp*` files left over in the build
  // TODO: Figure out where these temp files are coming from!
  llvm = std.runBash`
    find "$BRIOCHE_OUTPUT/lib" -name '*.tmp*' -delete
  `
    .outputScaffold(llvm)
    .toDirectory();

  return llvm;
}

/**
 * A minimal toolchain that uses LLVM-based tools for compilation, such
 * as Clang and LLD. It currently still uses components from
 * `std.toolchain()`, such as system libraries and headers.
 *
 * The LLVM toolchain in Brioche is considered experimental, and is very
 * likely to have major breaking changes over time!
 */
export function llvmToolchain(): std.Recipe<std.Directory> {
  const clangConfig = std.file(std.indoc`
    --sysroot <CFGDIR>/../toolchain
  `);

  return llvm().pipe(
    (recipe) => recipe.insert("toolchain", std.toolchain()),
    (recipe) =>
      recipe.insert("bin/ld", std.symlink({ target: "../toolchain/bin/ld" })),
    (recipe) => recipe.insert("bin/clang.cfg", clangConfig),
    (recipe) => recipe.insert("bin/clang++.cfg", clangConfig),
  );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    llvm-config --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(llvm)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({
    project,
    matchTag: /^llvmorg-(?<version>.+)$/,
  });
}
