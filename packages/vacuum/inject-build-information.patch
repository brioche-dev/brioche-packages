diff --git a/cmd/version_info.go b/cmd/version_info.go
index 4cfcba2..1875c49 100644
--- a/cmd/version_info.go
+++ b/cmd/version_info.go
@@ -16,6 +16,12 @@ type VersionInfo struct {
 	Modified  bool
 }
 
+var (
+	VersionOverride string
+	CommitOverride  string
+	DateOverride    string
+)
+
 // GetVersionInfo returns version information using modern debug.ReadBuildInfo approach
 // this works correctly with go install unlike the old ldflags method
 func GetVersionInfo() VersionInfo {
@@ -28,33 +34,41 @@ func GetVersionInfo() VersionInfo {
 	}
 
 	buildInfo, ok := debug.ReadBuildInfo()
-	if !ok {
-		return info
-	}
-
-	// get version from go install (e.g., v0.14.2)
-	if buildInfo.Main.Version != "" && buildInfo.Main.Version != "(dev)" {
-		info.Version = buildInfo.Main.Version
-	}
+	if ok {
+		// get version from go install (e.g., v0.14.2)
+		if buildInfo.Main.Version != "" && buildInfo.Main.Version != "(dev)" {
+			info.Version = buildInfo.Main.Version
+		}
 
-	// extract git information from build settings
-	for _, setting := range buildInfo.Settings {
-		switch setting.Key {
-		case "vcs.revision":
-			if len(setting.Value) >= 7 {
-				info.Commit = setting.Value[:7] // short commit hash
-			} else {
-				info.Commit = setting.Value
+		// extract git information from build settings
+		for _, setting := range buildInfo.Settings {
+			switch setting.Key {
+			case "vcs.revision":
+				if len(setting.Value) >= 7 {
+					info.Commit = setting.Value[:7] // short commit hash
+				} else {
+					info.Commit = setting.Value
+				}
+			case "vcs.time":
+				if parsed, err := time.Parse(time.RFC3339, setting.Value); err == nil {
+					info.Date = parsed.Format("Mon, 02 Jan 2006 15:04:05 MST")
+				}
+			case "vcs.modified":
+				info.Modified = setting.Value == "true"
 			}
-		case "vcs.time":
-			if parsed, err := time.Parse(time.RFC3339, setting.Value); err == nil {
-				info.Date = parsed.Format("Mon, 02 Jan 2006 15:04:05 MST")
-			}
-		case "vcs.modified":
-			info.Modified = setting.Value == "true"
 		}
 	}
 
+	if VersionOverride != "" {
+		info.Version = VersionOverride
+	}
+	if CommitOverride != "" {
+		info.Commit = CommitOverride
+	}
+	if DateOverride != "" {
+		info.Date = DateOverride
+	}
+
 	// append modified indicator if there were local changes
 	if info.Modified {
 		info.Commit += "+CHANGES"
