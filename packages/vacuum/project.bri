import * as std from "std";
import { gitCheckout } from "git";
import { goBuild } from "go";

export const project = {
  name: "vacuum",
  version: "0.18.3",
  repository: "https://github.com/daveshanley/vacuum.git",
  extra: {
    releaseDate: "2025-09-16",
  },
};

const gitRef = await Brioche.gitRef({
  repository: project.repository,
  ref: `v${project.version}`,
});
const source = gitCheckout(gitRef).pipe((source) =>
  // Patch the source to add build information injection
  std.applyPatch({
    source,
    patch: Brioche.includeFile("inject-build-information.patch"),
    strip: 1,
  }),
);

export default function vacuum(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    buildParams: {
      ldflags: [
        "-s",
        "-w",
        "-X",
        `github.com/daveshanley/vacuum/cmd.VersionOverride=${project.version}`,
        "-X",
        `github.com/daveshanley/vacuum/cmd.CommitOverride=${gitRef.commit}`,
        "-X",
        `github.com/daveshanley/vacuum/cmd.DateOverride=${project.extra.releaseDate}`,
      ],
    },
    path: "./vacuum.go",
    runnable: "bin/vacuum",
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    vacuum version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(vacuum)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export async function liveUpdate(): Promise<std.Recipe<std.Directory>> {
  return std.liveUpdateFromGithubReleases({ project });
}
