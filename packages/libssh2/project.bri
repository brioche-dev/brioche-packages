import * as std from "std";
import openssl from "openssl";
import { nushellRunnable, type NushellRunnable } from "nushell";

export const project = {
  name: "libssh2",
  version: "1.11.1",
};

const source = Brioche.download(
  `https://libssh2.org/download/libssh2-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function libssh2(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure \\
      --prefix=/ \\
      --disable-examples-build
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain, openssl)
    .toDirectory()
    .pipe(std.pkgConfigMakePathsRelative, (recipe) =>
      std.setEnv(recipe, {
        CPATH: { append: [{ path: "include" }] },
        LIBRARY_PATH: { append: [{ path: "lib" }] },
        PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
      }),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    pkg-config --modversion libssh2 | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, libssh2)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): NushellRunnable {
  return nushellRunnable`
    let version = http get https://www.libssh2.org/download
      | lines
      | where {|it| ($it | str contains "libssh2") and (not ($it | str contains ".sig")) }
      | parse --regex '<a href="libssh2-(?<version>.+)\.tar\.xz">'
      | sort-by --natural --reverse version
      | get 0.version

    $env.project
      | from json
      | update version $version
      | to json
  `.env({ project: JSON.stringify(project) });
}
