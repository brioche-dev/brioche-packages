import * as std from "std";
import { gitCheckout } from "git";
import { goBuild } from "go";
import nushell from "nushell";

export const project = {
  name: "vegeta",
  version: "12.12.0",
  repository: "https://github.com/tsenart/vegeta.git",
  extra: {
    releaseDate: "2024-07-29",
  },
};

const gitRef = await Brioche.gitRef({
  repository: project.repository,
  ref: `v${project.version}`,
});
const source = gitCheckout(gitRef);

export default function vegeta(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    buildParams: {
      ldflags: [
        "-s",
        "-w",
        "-X",
        `main.Version=${project.version}`,
        "-X",
        `main.Commit=${gitRef.commit}`,
        "-X",
        `main.Date=${project.extra.releaseDate}`,
      ],
    },
    runnable: "bin/vegeta",
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    vegeta --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(vegeta)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `Version: ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export async function liveUpdate(): Promise<std.Recipe<std.Directory>> {
  const src = std.file(std.indoc`
    let releaseData = http get https://api.github.com/repos/tsenart/vegeta/releases/latest

    let version = $releaseData
      | get tag_name
      | str replace --regex '^v' ''

    let releaseDate = $releaseData
      | get created_at
      | into datetime
      | format date "%Y-%m-%d"

    $env.project
      | from json
      | update version $version
      | update extra.releaseDate $releaseDate
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}
