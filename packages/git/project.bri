import * as std from "std";
import openssl from "openssl";
import curl from "curl";

export const project = {
  name: "git",
  version: "2.51.1",
  repository: "https://github.com/git/git",
};

const source = Brioche.download(
  `${project.repository}/archive/refs/tags/v${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function git(): std.Recipe<std.Directory> {
  return std.runBash`
    make \
      -j "$(nproc)" \
      prefix=/ \
      all
    make \
      prefix=/ \
      install \
      DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain, openssl, curl({ minimal: true }))
    .toDirectory()
    .pipe(
      (recipe) =>
        std.setEnv(recipe, {
          GIT_EXEC_PATH: { fallback: { path: "libexec/git-core" } },
          GIT_TEMPLATE_DIR: { fallback: { path: "share/git-core/templates" } },
        }),
      (recipe) => std.withRunnableLink(recipe, "bin/git"),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    git --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(git)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `git version ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubTags({
    project,
    matchTag: /^v(?<version>\d+\.\d+\.\d+)$/,
  });
}

/**
 * Options for checking out a git repository.
 *
 * @param repository - The URL of the git repository to checkout.
 * @param commit - The full commit hash to checkout.
 * @param options - Extra options for the checkout.
 */
interface GitCheckoutInit {
  repository: string;
  commit: string;
  options?: GitCheckoutOptions;
}

/**
 * Specific git checkout options.
 *
 * @param submodules - Set to true to recursively checkout git submodules too.
 */
export interface GitCheckoutOptions {
  submodules?: boolean;
}

/**
 * Checkout a git repository at a specific commit. The specified commit will
 * be cloned without any history.
 *
 * @description See also the `Brioche.gitRef` function, which can be used with `gitCheckout`
 * to get a commit hash from a git ref (such as a branch or tag name), and
 * then record the commit hash in the lockfile.
 *
 * @param init - An object containing the repository URL and commit hash to checkout.
 * @param options - Options for the checkout, such as whether to include submodules.
 *
 * @returns The checked out repository as an artifact
 *
 * @example
 * ```typescript
 * import { gitCheckout } from "git";
 *
 * // Check out the main branch from the Brioche repository. The commit
 * // hash will be locked when first run, and will not change until the
 * // lockfile is updated
 * const source = gitCheckout(
 *   Brioche.gitRef({
 *     repository: "https://github.com/brioche-dev/brioche.git",
 *     ref: "main",
 *   }),
 * );
 * ```
 */
export function gitCheckout(
  init: std.Awaitable<GitCheckoutInit>,
  options: GitCheckoutOptions = {},
): std.Recipe<std.Directory> {
  return std.recipe(async () => {
    const { commit, repository, options: initOptions } = await init;
    options = { ...initOptions, ...options };

    // Validate that the commit is a hash
    std.assert(
      /^[0-9a-f]{40}$/.test(commit),
      `Invalid git commit hash: ${commit}`,
    );

    // Clone and fetch only the specified commit. See this article:
    // https://about.gitlab.com/blog/whats-new-in-git-2-49-0/#thin-clone-using---revision
    let repo = std
      .process({
        command: "git",
        args: [
          "-c",
          "advice.detachedHead=false",
          "clone",
          "--depth",
          "1",
          "--revision",
          commit,
          repository,
          // Clone into the output directory
          std.outputPath,
        ],
        dependencies: [git],
        unsafe: { networking: true },
      })
      .toDirectory();

    if (options.submodules === true) {
      repo = std
        .process({
          command: "git",
          args: [
            "-C",
            std.outputPath,
            "submodule",
            "update",
            "--init",
            "--recursive",
          ],
          // std.toolchain() is required for git submodules (to access tools like sed, basename, ...)
          dependencies: [std.toolchain, git],
          outputScaffold: repo,
          unsafe: { networking: true },
        })
        .toDirectory();
    }

    return repo;
  });
}
