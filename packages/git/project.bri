import * as std from "std";
import openssl from "openssl";
import curl from "curl";
import caCertificates from "ca_certificates";

export const project = {
  name: "git",
  version: "2.45.2",
};

const source = std
  .download({
    url: `https://github.com/git/git/archive/refs/tags/v${project.version}.tar.gz`,
    hash: std.sha256Hash(
      "8422abc4a16e389220d8da15e12d712f4e6219846ddd8b112e9b31f3087ddf9b",
    ),
  })
  .unarchive("tar", "gzip")
  .peel();

export default function git(): std.Recipe<std.Directory> {
  let git = std.runBash`
    make prefix=/ all
    make prefix=/ install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain(), openssl(), curl())
    .toDirectory();

  git = std.setEnv(git, {
    GIT_EXEC_PATH: { append: [{ path: "libexec/git-core" }] },
    GIT_TEMPLATE_DIR: { append: [{ path: "share/git-core/templates" }] },
  });
  git = std.withRunnableLink(git, "bin/git");

  return git;
}

interface GitCheckoutOptions {
  repository: string;
  commit: string;
}

/**
 * Checkout a git repository at a specific commit. The specified commit will
 * be cloned without any history.
 *
 * ## Options
 *
 * - `repository`: The URL of the git repository to checkout.
 * - `commit`: The full commit hash to checkout.
 */
export function gitCheckout(
  options: GitCheckoutOptions,
): std.Recipe<std.Directory> {
  // Validate that the commit is a hash
  std.assert(
    /^[0-9a-f]{40}$/.test(options.commit),
    `Invalid git commit hash: ${options.commit}`,
  );

  // Clone and fetch only the specified commit. See this article:
  // https://blog.hartwork.org/posts/clone-arbitrary-single-git-commit/
  return std.runBash`
    cd "$BRIOCHE_OUTPUT"
    git -c init.defaultBranch=main init
    git remote add origin "$repository"
    git fetch --depth 1 origin "$commit"
    git -c advice.detachedHead=false checkout FETCH_HEAD
  `
    .dependencies(git(), caCertificates())
    .env({
      repository: options.repository,
      commit: options.commit,
    })
    .outputScaffold(std.directory())
    .unsafe({ networking: true })
    .toDirectory();
}
