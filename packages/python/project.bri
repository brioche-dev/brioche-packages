import * as std from "std";
import libffi from "libffi";
import openssl from "openssl";
import sqlite from "sqlite";

export const project = {
  name: "python",
  version: "3.13.1",
  extra: {
    otherVersions: {
      "3.13": "3.13.1",
      "3.12": "3.12.8",
    },
  },
};

std.assert(
  Object.keys(project.extra.otherVersions).some((minorVersion) =>
    project.version.startsWith(`${minorVersion}.`),
  ),
  "Python package version not found in extra.otherVersions",
);

type PythonVersion = keyof typeof project.extra.otherVersions;

function getLatestVersion(): PythonVersion {
  const versions = Object.keys(project.extra.otherVersions);
  versions.sort((a, b) => parseInt(b) - parseInt(a));

  return versions[0] as PythonVersion;
}

const sources: { [version: string]: std.Recipe<std.File> } = {
  "3.13": Brioche.download(
    `https://www.python.org/ftp/python/${project.version}/Python-${project.version}.tar.xz`,
  ),
  "3.12": Brioche.download(
    `https://www.python.org/ftp/python/${project.extra.otherVersions["3.12"]}/Python-${project.extra.otherVersions["3.12"]}.tar.xz`,
  ),
} satisfies Record<PythonVersion, std.Recipe<std.File>>;

interface PythonOptions {
  version?: PythonVersion;
}

export default async function python(options: PythonOptions = {}) {
  const { version = getLatestVersion() } = options;

  // Get the Python source for the selected version
  const source = sources[version]?.unarchive("tar", "xz").peel();
  std.assert(
    source != null,
    `Expected Python version ${JSON.stringify(
      version,
    )} to be one of ${JSON.stringify(Object.keys(sources))}`,
  );

  const python = std.runBash`
    export LD_LIBRARY_PATH="$LIBRARY_PATH"
    export PATH="$BRIOCHE_OUTPUT/bin\${PATH:+:$PATH}"

    ./configure \\
      --prefix=/ \\
      --enable-shared \\
      --without-ensurepip
    make -j8
    make install DESTDIR="$BRIOCHE_OUTPUT"

    python3 -m ensurepip --default-pip
  `
    .workDir(source)
    .dependencies(std.toolchain, libffi, openssl, sqlite)
    .toDirectory();

  // Get all the native Python modules
  const nativeModuleList = await std.runBash`
    find "$python"/lib/python*/lib-dynload \\
       -name "*.so" \\
       -exec basename {} \\; \\
       > "$BRIOCHE_OUTPUT"
  `
    .env({ python })
    .toFile()
    .read();
  const nativeModules = nativeModuleList
    .split("\n")
    .filter((mod) => mod !== "");

  return python.pipe(
    // Repack Python with all the dynamic libraries needed for all the native
    // modules. It isn't linked against the native modules directly, just
    // tier transitive dependencies
    (recipe) =>
      std.autopack(recipe, {
        globs: ["bin/python*"],
        excludeGlobs: ["bin/python*-config"],
        linkDependencies: [std.toolchain],
        dynamicBinaryConfig: {
          // Listing the modules both under `extraLibraries` and `skipLibraries`
          // forces Python to be linked with the modules' transitive dependencies
          extraLibraries: [
            ...nativeModules,

            // Extra libraries used for FFI (needed for e.g. `aws_cli`)
            // TODO: Figure out when/where/why these are used and how to simplify!
            "librt.so.1",
            "libpthread.so.0",
            "libgcc_s.so.1",
            "libdl.so.2",
          ],
          skipLibraries: nativeModules,
          libraryPaths: [
            std.glob(recipe, ["lib/python*/lib-dynload"]).peel(3),
            std.glob(recipe, ["lib/libpython*"]).peel(),
          ],
        },
        sharedLibraryConfig: {
          enabled: false,
        },
        scriptConfig: {
          enabled: false,
        },
        repackConfig: {
          enabled: true,
        },
      }),
    // Some binaries under `/bin` are shebang scripts. These need to be wrapped
    // to avoid issues with absolute paths
    (recipe) => std.recipe(fixShebangs(recipe)),
    (recipe) =>
      recipe
        .insert("bin/python", std.symlink({ target: "python3" }))
        .insert("bin/python-config", std.symlink({ target: "python3-config" }))
        .insert("bin/pydoc", std.symlink({ target: "pydoc3" })),
    // Fix absolute paths in pkg-config files
    std.pkgConfigMakePathsRelative,
    (recipe) =>
      std.setEnv(recipe, {
        CPATH: { append: [{ path: "include" }] },
        LIBRARY_PATH: { append: [{ path: "lib" }] },
        PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
      }),
    (recipe) => std.withRunnableLink(recipe, "bin/python"),
  );
}

export function test(): std.Recipe<std.Directory> {
  const pythonVersions = Object.keys(
    project.extra.otherVersions,
  ) as PythonVersion[];

  const tests = pythonVersions.map(async (version) => {
    const script = std.runBash`
      python --version | tee "$BRIOCHE_OUTPUT"
    `
      .dependencies(python({ version }))
      .toFile();

    const result = (await script.read()).trim();

    // Check that the result contains the expected version
    const expected = `Python ${project.extra.otherVersions[version]}`;
    std.assert(result === expected, `expected '${expected}', got '${result}'`);

    return std.directory().insert(version, script);
  });

  return std.merge(...tests);
}

async function fixShebangs(
  recipe: std.Recipe<std.Directory>,
): Promise<std.Recipe<std.Directory>> {
  // Get all Python shebang scripts under `bin/`. We assume _all_ shebang
  // scripts we can find are Python scripts, except for `python-config`. This
  // is because Python may install shebang scripts using `#!/bin/sh` when
  // paths are long, so they won't necessarily have a shebang to call Python
  // directly. See this function from Pip:
  // https://github.com/pypa/pip/blob/102d8187a1f5a4cd5de7a549fd8a9af34e89a54f/src/pip/_vendor/distlib/scripts.py#L154
  const pythonShebangPathList = await std.runBash`
    cd "$recipe"
    find bin ! -name 'python*-config' -type f -executable \\
    | while read file; do
      if [[ "$(head -c 2 "$file")" == '#!' ]]; then
        echo "$file" >> "$BRIOCHE_OUTPUT"
      fi
    done
  `
    .env({ recipe })
    .toFile()
    .read();
  const pythonShebangPaths = pythonShebangPathList
    .split("\n")
    .filter((line) => line !== "");

  // Get the list of shebang shell scripts. We only handle the `python-config`
  // script.
  const shellShebangPathList = await std.runBash`
    cd "$recipe"
    find bin -name 'python*-config' -type f -executable \\
    | while read file; do
      if [[ "$(head -c 2 "$file")" == '#!' ]]; then
        echo "$file" >> "$BRIOCHE_OUTPUT"
      fi
    done
  `
    .env({ recipe })
    .toFile()
    .read();
  const shellShebangPaths = shellShebangPathList
    .split("\n")
    .filter((line) => line !== "");

  // Wrap each Python script using `std.addRunnable()`
  const pythonWrappedShebangs = pythonShebangPaths.map((path) => {
    return std.addRunnable(std.directory(), path, {
      command: { relativePath: "bin/python" },
      args: [[std.glob(recipe, [path]), `/${path}`]],
    });
  });

  // Update each shell script by using `#!/usr/bin/env sh`. We can't
  // use `std.addRunnable()` because `python-config` is sensitive to its
  // path on disk.
  const fixedShellShebangs = shellShebangPaths.map((path) => {
    const fixedFile = std.runBash`
      echo '#!/usr/bin/env sh' > "$BRIOCHE_OUTPUT"
      tail -n+2 "$file" >> "$BRIOCHE_OUTPUT"
      chmod +x "$BRIOCHE_OUTPUT"
    `
      .env({ file: recipe.get(path) })
      .toFile();
    return std.directory().insert(path, fixedFile);
  });

  return std.merge(recipe, ...pythonWrappedShebangs, ...fixedShellShebangs);
}
