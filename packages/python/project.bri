import * as std from "std";
import libffi from "libffi";
import openssl from "openssl";
import sqlite from "sqlite";

export const project = {
  name: "python",
  version: "3.13.1",
};

const source = Brioche.download(
  `https://www.python.org/ftp/python/${project.version}/Python-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default async function python() {
  let python = std.runBash`
    export LD_LIBRARY_PATH="$LIBRARY_PATH"
    export PATH="$BRIOCHE_OUTPUT/bin\${PATH:+:$PATH}"

    ./configure \\
      --prefix=/ \\
      --enable-shared \\
      --without-ensurepip
    make -j8
    make install DESTDIR="$BRIOCHE_OUTPUT"

    python3 -m ensurepip --default-pip
  `
    .workDir(source)
    .dependencies(std.toolchain(), libffi(), openssl(), sqlite())
    .toDirectory();

  // Get all the native Python modules
  const nativeModuleList = await std.runBash`
    find "$python"/lib/python*/lib-dynload \\
       -name "*.so" \\
       -exec basename {} \\; \\
       > "$BRIOCHE_OUTPUT"
  `
    .env({ python })
    .toFile()
    .read();
  const nativeModules = nativeModuleList
    .split("\n")
    .filter((mod) => mod !== "");

  // Repack Python with all the dynamic libraries needed for all the native
  // modules. It isn't linked against the native modules directly, just their
  // transitive dependencies
  python = std.autopack(python, {
    globs: ["bin/python*"],
    excludeGlobs: ["bin/python*-config"],
    linkDependencies: [std.toolchain()],
    dynamicBinaryConfig: {
      // Listing the modules both under `extraLibraries` and `skipLibraries`
      // forces Python to be linked with the modules' transitive dependencies
      extraLibraries: nativeModules,
      skipLibraries: nativeModules,
      libraryPaths: [
        std.glob(python, ["lib/python*/lib-dynload"]).peel(3),
        std.glob(python, ["lib/libpython*"]).peel(),
      ],
    },
    sharedLibraryConfig: {
      enabled: false,
    },
    scriptConfig: {
      enabled: false,
    },
    repackConfig: {
      enabled: true,
    },
  });

  // Some binaries under `/bin` are shebang scripts. These need to be wrapped
  // to avoid issues with absolute paths
  python = std.recipe(fixShebangs(python));

  // Fix absolute paths in pkg-config files
  python = makePkgConfigPathsRelative(python);

  python = python.insert("bin/python", std.symlink({ target: "python3" }));
  python = python.insert(
    "bin/python-config",
    std.symlink({ target: "python3-config" }),
  );
  python = python.insert("bin/pydoc", std.symlink({ target: "pydoc3" }));

  python = std.setEnv(python, {
    CPATH: { append: [{ path: "include" }] },
    LIBRARY_PATH: { append: [{ path: "lib" }] },
    PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
  });

  return std.withRunnableLink(python, "bin/python");
}

export function test() {
  return std.runBash`
    python --version | tee -a "$BRIOCHE_OUTPUT"
    pip --version | tee -a "$BRIOCHE_OUTPUT"
    python-config --cflags --libs --ldflags | tee -a "$BRIOCHE_OUTPUT"
  `.dependencies(python());
}

async function fixShebangs(
  recipe: std.Recipe<std.Directory>,
): Promise<std.Recipe<std.Directory>> {
  // Get all Python shebang scripts under `bin/`. We assume _all_ shebang
  // scripts we can find are Python scripts, except for `python-config`. This
  // is because Python may install shebang scripts using `#!/bin/sh` when
  // paths are long, so they won't necessarily have a shebang to call Python
  // directly. See this function from Pip:
  // https://github.com/pypa/pip/blob/102d8187a1f5a4cd5de7a549fd8a9af34e89a54f/src/pip/_vendor/distlib/scripts.py#L154
  const pythonShebangPathList = await std.runBash`
    cd "$recipe"
    find bin ! -name 'python*-config' -type f -executable \\
    | while read file; do
      if [[ "$(head -c 2 "$file")" == '#!' ]]; then
        echo "$file" >> "$BRIOCHE_OUTPUT"
      fi
    done
  `
    .env({ recipe })
    .toFile()
    .read();
  const pythonShebangPaths = pythonShebangPathList
    .split("\n")
    .filter((line) => line !== "");

  // Get the list of shebang shell scripts. We only handle the `python-config`
  // script.
  const shellShebangPathList = await std.runBash`
    cd "$recipe"
    find bin -name 'python*-config' -type f -executable \\
    | while read file; do
      if [[ "$(head -c 2 "$file")" == '#!' ]]; then
        echo "$file" >> "$BRIOCHE_OUTPUT"
      fi
    done
  `
    .env({ recipe })
    .toFile()
    .read();
  const shellShebangPaths = shellShebangPathList
    .split("\n")
    .filter((line) => line !== "");

  // Wrap each Python script using `std.addRunnable()`
  const pythonWrappedShebangs = pythonShebangPaths.map((path) => {
    return std.addRunnable(std.directory(), path, {
      command: { relativePath: "bin/python" },
      args: [[std.glob(recipe, [path]), `/${path}`]],
    });
  });

  // Update each shell script by using `#!/usr/bin/env sh`. We can't
  // use `std.addRunnable()` because `python-config` is sensitive to its
  // path on disk.
  const fixedShellShebangs = shellShebangPaths.map((path) => {
    const fixedFile = std.runBash`
      echo '#!/usr/bin/env sh' > "$BRIOCHE_OUTPUT"
      tail -n+2 "$file" >> "$BRIOCHE_OUTPUT"
      chmod +x "$BRIOCHE_OUTPUT"
    `
      .env({ file: recipe.get(path) })
      .toFile();
    return std.directory().insert(path, fixedFile);
  });

  return std.merge(recipe, ...pythonWrappedShebangs, ...fixedShellShebangs);
}

// TODO: Figure out where to move this, this is copied from `std`
function makePkgConfigPathsRelative(
  recipe: std.AsyncRecipe<std.Directory>,
): std.Recipe<std.Directory> {
  // Replaces things that look like absolute paths in pkg-config files with
  // relative paths (using the `${pcfiledir}` variable)
  return std.runBash`
    find "$BRIOCHE_OUTPUT"/lib/pkgconfig -name '*.pc' -type f -print0 \
      | while IFS= read -r -d $'\\0' file; do
        sed -i 's|=/|=\${pcfiledir}/../../|' "$file"
      done
  `
    .outputScaffold(recipe)
    .toDirectory();
}
