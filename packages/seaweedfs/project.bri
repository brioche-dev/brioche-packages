import * as std from "std";
import { goBuild } from "go";

export const project = {
  name: "seaweedfs",
  version: "3.98",
  repository: "https://github.com/seaweedfs/seaweedfs.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: project.version,
});

export default function seaweedfs(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    path: "./weed",
    runnable: "bin/weed",
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    weed version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(seaweedfs)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  // HACK: SeaweedFS 3.86 returns a version number of 3.85!
  // https://github.com/seaweedfs/seaweedfs/issues/6717
  const expected = project.version === "3.86" ? "3.85" : project.version;
  std.assert(
    result.includes(` ${expected} `),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export async function liveUpdate(): Promise<std.Recipe<std.Directory>> {
  return std.liveUpdateFromGithubReleases({ project });
}
