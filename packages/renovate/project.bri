import * as std from "std";
import { npmInstallGlobal } from "nodejs";
import nushell from "nushell";

export const project = {
  name: "renovate",
  version: "40.48.5",
};

export default function renovate(): std.Recipe<std.Directory> {
  return npmInstallGlobal({
    packageName: project.name,
    version: project.version,
  }).pipe((recipe) => std.withRunnableLink(recipe, "bin/renovate"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    renovate --version 2>&1 | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(renovate)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.WithRunnable {
  const src = std.file(std.indoc`
    let releaseData = http get https://registry.npmjs.org/${project.name}/latest

    let version = $releaseData
      | get version
      | str replace --regex '^v' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}
