import nushell from "nushell";
import * as std from "std";

export const project = {
  name: "uthash",
  version: "2.3.0",
};

const source = Brioche.gitCheckout({
  repository: "https://github.com/troydhanson/uthash.git",
  ref: `v${project.version}`,
});

export default function uthash(): std.Recipe<std.Directory> {
  return std.setEnv(source, {
    CPATH: { append: [{ path: "include" }] },
  });
}

export async function test() {
  // This example has been adapted from the main documentation
  const src = std.file(std.indoc`
      #include <stdio.h>
      #include <stdlib.h>
      #include <uthash.h>

      struct custom_struct {
          int id;
          char name[10];
          UT_hash_handle hh;
      };

      int main(void)
      {
          struct custom_struct *users;
          unsigned int count_users;

          users = NULL;
          count_users = HASH_COUNT(users);

          printf("%u", count_users);

          return EXIT_SUCCESS;
      }
  `);

  const script = std.runBash`
    cp "$src" main.c
    gcc main.c -o main
    ./main | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, uthash)
    .env({ src: src })
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected output
  const expected = "0";
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/troydhanson/uthash/git/matching-refs/tags
      | get ref
      | each {|ref|
        $ref
        | parse --regex '^refs/tags/v(?P<tag>(?P<major>[\\d]+)\\.(?P<minor>[\\d]+)\\.(?P<patch>[\\d]+))'
        | get -i 0
      }
      | sort-by -n major minor patch
      | last
      | get tag

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}
