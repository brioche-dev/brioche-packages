import * as std from "std";

export const project = {
  name: "rpcsvc_proto",
  version: "1.4.4",
  repository: "https://github.com/thkukuk/rpcsvc-proto",
};

const source = Brioche.download(
  `${project.repository}/releases/download/v${project.version}/rpcsvc-proto-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function rpcsvcProto(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure --prefix=/
    make -j16
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .toDirectory()
    .pipe(
      (recipe) =>
        std.setEnv(recipe, {
          CPATH: { append: [{ path: "include" }] },
        }),
      (recipe) => std.withRunnableLink(recipe, "bin/rpcgen"),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    rpcgen --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(rpcsvcProto)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `rpcgen (rpcsvc-proto) ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
