import * as std from "std";
import pcre2 from "pcre2";

export const project = {
  name: "nginx",
  version: "1.29.0",
  repository: "https://github.com/nginx/nginx",
};

const source = Brioche.download(
  `${project.repository}/releases/download/release-${project.version}/nginx-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function nginx(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure \\
      --prefix=/etc/nginx \\
      --sbin-path=/bin/nginx
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain, pcre2)
    .toDirectory()
    .pipe((recipe) => std.withRunnableLink(recipe, "bin/nginx"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    nginx -v 2>&1 | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(nginx)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `nginx version: nginx/${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({
    project,
    matchTag: /^release-(?<version>.*)$/,
  });
}
