import * as std from "std";
import openssl from "openssl";

export const project = {
  name: "libevent",
  version: "2.1.12",
  repository: "https://github.com/libevent/libevent",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `release-${project.version}-stable`,
});

export default function libevent(): std.Recipe<std.Directory> {
  return std.runBash`
    ./autogen.sh
    ./configure --prefix=/
    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain, openssl)
    .toDirectory()
    .pipe(
      std.libtoolSanitizeDependencies,
      std.pkgConfigMakePathsRelative,
      (recipe) =>
        std.setEnv(recipe, {
          CPATH: { append: [{ path: "include" }] },
          LIBRARY_PATH: { append: [{ path: "lib" }] },
          PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
        }),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    pkg-config --modversion libevent | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, libevent)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `${project.version}-stable`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({
    project,
    matchTag: /^release-(?<version>.+)-stable$/,
  });
}
