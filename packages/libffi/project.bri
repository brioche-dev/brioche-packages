import nushell from "nushell";
import * as std from "std";

export const project = {
  name: "libffi",
  version: "3.4.8",
};

const source = Brioche.download(
  `https://github.com/libffi/libffi/releases/download/v${project.version}/libffi-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function libffi(): std.Recipe<std.Directory> {
  const libffi = std.runBash`
    ./configure --prefix=/
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain())
    .toDirectory();

  return std.setEnv(libffi, {
    CPATH: { append: [{ path: "include" }] },
    LIBRARY_PATH: { append: [{ path: "lib" }] },
    PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
  });
}

export async function test() {
  const script = std.runBash`
    echo -n $(pkg-config --modversion libffi) | tee "$BRIOCHE_OUTPUT"
  `.dependencies(std.toolchain(), libffi());

  const result = await script.toFile().read();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/libffi/libffi/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project | from json | update version $version | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
