import * as std from "std";
import { cargoBuild } from "rust";

export const project = {
  name: "xplr",
  version: "1.0.1",
  repository: "https://github.com/sayanarijit/xplr.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `v${project.version}`,
})
  // Remove upstream's custom Cargo `config.toml`, which overrides the linker
  // for various targets (for cross-compilation). This can interfere with
  // our default working linker configuration.
  .remove(".cargo/config.toml")
  // HACK: Workaround for https://github.com/LukeMathWalker/cargo-chef/issues/295#issuecomment-2619963413
  .pipe((source) =>
    std.runBash`
      sed -i "s|path = './benches/|path = 'benches/|g" "$BRIOCHE_OUTPUT/Cargo.toml"
    `
      .outputScaffold(source)
      .toDirectory(),
  );

export default function xplr(): std.Recipe<std.Directory> {
  return cargoBuild({
    source,
    runnable: "bin/xplr",
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    xplr --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(xplr)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `xplr ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
