import nushell from "nushell";
import * as std from "std";
import { cargoBuild } from "rust";
import { gitCheckout } from "git";

export const project = {
  name: "xplr",
  version: "0.21.10",
};

const source = (() => {
  let source = gitCheckout(
    Brioche.gitRef({
      repository: "https://github.com/sayanarijit/xplr.git",
      ref: `v${project.version}`,
    }),
  );

  // HACK: Workaround for https://github.com/LukeMathWalker/cargo-chef/issues/295#issuecomment-2619963413
  source = std.runBash`
    sed -i "s|path = './benches/|path = 'benches/|g" "$BRIOCHE_OUTPUT/Cargo.toml"
  `
    .outputScaffold(source)
    .toDirectory();

  return source;
})();

export default function (): std.Recipe<std.Directory> {
  return cargoBuild({
    source,
    runnable: "bin/xplr",
  });
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/sayanarijit/xplr/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project | from json | update version $version | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
