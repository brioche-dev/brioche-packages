import * as std from "std";
import { goBuild } from "go";
import nushell from "nushell";

export const project = {
  name: "steampipe",
  version: "1.1.1",
};

const source = Brioche.gitCheckout({
  repository: "https://github.com/turbot/steampipe.git",
  ref: `v${project.version}`,
});

export default function steampipe(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    buildParams: {
      ldflags: ["-s", "-w", `-X main.version=${project.version}`],
    },
    runnable: "bin/steampipe",
  });
}

export async function test() {
  const script = std.runBash`
    steampipe --version 2>&1 | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(steampipe())
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `Steampipe v${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export async function liveUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/turbot/steampipe/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
