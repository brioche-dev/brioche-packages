import * as std from "std";
import python from "python";
import { gitCheckout } from "git";
import nushell from "nushell";

export const project = {
  name: "aws_cli",
  version: "2.24.15",
};

const source = std.recipeFn(() => {
  const source = gitCheckout(
    Brioche.gitRef({
      repository: "https://github.com/aws/aws-cli.git",
      ref: project.version,
    }),
  );
  const patch = Brioche.includeFile("resolved-lockfiles.patch");

  // Patch the source to fix unresolvable `packaging` dependencies
  // across `requirements*.txt` files
  return std.runBash`
    cd "$BRIOCHE_OUTPUT"
    patch -p1 < $patch
  `
    .outputScaffold(source)
    .env({ patch })
    .toDirectory();
});

export default function awsCli(): std.Recipe<std.Directory> {
  // Create a venv for aws-cli
  let venv = std.recipe(python({ version: "3.12" }));

  // Download dependencies from PyPI
  // SAFETY: the `requirements-*-lock.txt` files have hashes, and the
  // `--require-hashes` flag ensures we use hashes to verify dependencies
  const dependencies = std.runBash`
    pip download --require-hashes \\
      -r requirements-base-lock.txt \\
      -r requirements-dev-lock.txt \\
      -r requirements-docs-lock.txt \\
      -d "$BRIOCHE_OUTPUT"
  `
    .workDir(
      std.glob(source, [
        "requirements-base-lock.txt",
        "requirements-dev-lock.txt",
        "requirements-docs-lock.txt",
      ]),
    )
    .dependencies(venv)
    .unsafe({ networking: true })
    .toDirectory();

  // Install dependencies into the venv
  venv = std.runBash`
    pip install --require-hashes \\
      -r requirements-base-lock.txt \\
      -r requirements-dev-lock.txt \\
      -r requirements-docs-lock.txt
  `
    .workDir(
      std.glob(source, [
        "requirements-base-lock.txt",
        "requirements-dev-lock.txt",
        "requirements-docs-lock.txt",
      ]),
    )
    .env({
      PATH: std.tpl`${std.outputPath}/bin`,
      PIP_NO_INDEX: "1",
      PIP_FIND_LINKS: dependencies,
    })
    .outputScaffold(venv)
    .toDirectory();

  // Install aws-cli into the venv
  venv = std.runBash`
    pip install .
  `
    .workDir(source)
    .env({
      PATH: std.tpl`${std.outputPath}/bin`,
      PIP_NO_INDEX: "1",
      PIP_FIND_LINKS: dependencies,
      LD_LIBRARY_PATH: std.tpl`${std.toolchain()}/lib`,
    })
    .outputScaffold(venv)
    .toDirectory();

  // Create the final recipe with the venv under `venv`
  let recipe = std.directory({
    venv,
  });

  // Add `bin/aws` to run the main script
  recipe = std.addRunnable(recipe, "bin/aws", {
    command: { relativePath: "venv/bin/python" },
    args: [{ relativePath: "venv/bin/aws" }],
  });
  return std.withRunnableLink(recipe, "bin/aws");
}

export async function test() {
  const script = std.runBash`
    aws --version | tr -d '\n' | tee "$BRIOCHE_OUTPUT"
  `.dependencies(awsCli());

  const result = await script.toFile().read();

  // Check that the result contains the expected version
  const expected = `aws-cli/${project.version} `;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/aws/aws-cli/git/matching-refs/
      | get ref
      | each {|ref|
        $ref
        | parse --regex '^refs/tags/(?P<tag>(?P<major>[\\d]+)\\.(?P<minor>[\\d]+)\\.(?P<patch>[\\d]+))'
        | get -i 0
      }
      | sort-by -n major minor patch
      | last
      | get tag

    $env.project | from json | update version $version | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
