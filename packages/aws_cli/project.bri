import * as std from "std";
import python, { fixScriptShebangs } from "python";

export const project = {
  name: "aws_cli",
  version: "2.31.16",
  repository: "https://github.com/aws/aws-cli",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: project.version,
}).pipe((source) =>
  // Patch the source to fix unresolvable `packaging` dependencies
  // across `requirements*.txt` files
  std.applyPatch({
    source,
    patch: Brioche.includeFile("resolved-lockfiles.patch"),
    strip: 1,
  }),
);

export default function awsCli(): std.Recipe<std.Directory> {
  // Create a venv
  // FIXME: Remove setting Python version once https://github.com/aws/aws-cli/pull/9790
  // lands in the next release
  let venv = std.recipe(python({ version: "3.13" }));

  // Download dependencies from PyPI
  // SAFETY: the `requirements-*-lock.txt` files have hashes, and the
  // `--require-hashes` flag ensures we use hashes to verify dependencies
  const dependencies = std.runBash`
    pip download --require-hashes \\
      -r requirements-base-lock.txt \\
      -r requirements-dev-lock.txt \\
      -r requirements-docs-lock.txt \\
      -d "$BRIOCHE_OUTPUT"
  `
    .workDir(
      std.glob(source, [
        "requirements-base-lock.txt",
        "requirements-dev-lock.txt",
        "requirements-docs-lock.txt",
      ]),
    )
    .dependencies(venv)
    .unsafe({ networking: true })
    .toDirectory();

  // Install dependencies into the venv
  venv = std.runBash`
    pip install --require-hashes \\
      -r requirements-base-lock.txt \\
      -r requirements-dev-lock.txt \\
      -r requirements-docs-lock.txt
  `
    .workDir(
      std.glob(source, [
        "requirements-base-lock.txt",
        "requirements-dev-lock.txt",
        "requirements-docs-lock.txt",
      ]),
    )
    .env({
      PATH: std.tpl`${std.outputPath}/bin`,
      PIP_FIND_LINKS: dependencies,
      PIP_NO_INDEX: "1",
    })
    .outputScaffold(venv)
    .toDirectory();

  // Fix shebangs in the venv. `pip install` could install a new version of
  // pip (depending on the requirements file), which can re-introduce a
  // shebang script that we need to re-fix
  venv = std.recipe(fixScriptShebangs(venv));

  // Install the application into the venv
  venv = std.runBash`
    pip install .
  `
    .workDir(source)
    .env({
      PATH: std.tpl`${std.outputPath}/bin`,
      PIP_FIND_LINKS: dependencies,
      PIP_NO_INDEX: "1",
    })
    .outputScaffold(venv)
    .toDirectory();

  // Create the final recipe with the venv under `venv`
  return (
    std
      .directory({
        venv,
      })
      // Add `bin/aws` to run the main script
      .pipe(
        (recipe) =>
          std.addRunnable(recipe, "bin/aws", {
            command: { relativePath: "venv/bin/python" },
            args: [{ relativePath: "venv/bin/aws" }],
          }),
        (recipe) => std.withRunnableLink(recipe, "bin/aws"),
      )
  );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    aws --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(awsCli)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `aws-cli/${project.version} `;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubTags({ project });
}
