import nushell from "nushell";
import * as std from "std";
import { gitCheckout } from "git";

export const project = {
  name: "pcre2",
  version: "10.45",
};

const gitRef = Brioche.gitRef({
  repository: "https://github.com/PCRE2Project/pcre2.git",
  ref: `pcre2-${project.version}`,
});

const source = gitCheckout(gitRef, {
  submodules: true,
});

export default function pcre2(): std.Recipe<std.Directory> {
  const pcre2 = std.runBash`
    ./autogen.sh
    ./configure \\
      --prefix=/ \\
      --enable-jit \\
      --enable-pcre2-8 \\
      --enable-pcre2-16 \\
      --enable-pcre2-32
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain())
    .workDir(source)
    .toDirectory();

  return std.setEnv(pcre2, {
    CPATH: { append: [{ path: "include" }] },
    LIBRARY_PATH: { append: [{ path: "lib" }] },
    PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
  });
}

export async function test() {
  const script = std.runBash`
    pkg-config --modversion libpcre2-8 | tee -a "$BRIOCHE_OUTPUT"
    pkg-config --modversion libpcre2-16 | tee -a "$BRIOCHE_OUTPUT"
    pkg-config --modversion libpcre2-32 | tee -a "$BRIOCHE_OUTPUT"
    pkg-config --modversion libpcre2-posix | tee -a "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain(), pcre2())
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  const expectedNumber = 4;
  std.assert(
    result.match(new RegExp(expected, "g"))?.length === expectedNumber,
    `expected '${expected}' ${expectedNumber} times, got '${result}'`,
  );

  return script;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/PCRE2Project/pcre2/releases/latest
      | get tag_name
      | str replace --regex '^pcre2-' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
