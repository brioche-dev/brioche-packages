import * as std from "std";
import { cargoBuild } from "rust";
import { gitCheckout } from "git";
import nushell from "nushell";

export const project = {
  name: "tokei",
  version: "12.1.2",
};

const source = gitCheckout(
  Brioche.gitRef({
    repository: "https://github.com/XAMPPRocky/tokei.git",
    ref: `v${project.version}`,
  }),
);

export default function tokei(): std.Recipe<std.Directory> {
  return cargoBuild({
    source,
    runnable: "bin/tokei",
  });
}

export async function test() {
  const script = std.runBash`
    tokei --version | tee "$BRIOCHE_OUTPUT"
  `.dependencies(tokei());

  const result = (await script.toFile().read()).trim();

  // Check that the result contains the expected version
  const expected = `tokei ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected ${expected}, got ${result}`,
  );

  return script;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    # Version can be suffixed with '-alpha.X'
    let version = http get https://api.github.com/repos/XAMPPRocky/tokei/git/matching-refs/
      | get ref
      | each {|ref|
        $ref
        | parse --regex '^refs/tags/v(?P<tag>(?P<major>[\\d]+)\\.(?P<minor>[\\d]+)\\.(?P<patch>[\\d]+))$'
        | get -i 0
      }
      | sort-by -n major minor patch
      | last
      | get tag

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
