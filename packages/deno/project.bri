import * as std from "std";
import cmake from "cmake";
import python from "python";
import ninja from "ninja";
import llvm from "llvm";

import { gitCheckout } from "git";
import { cargoBuild } from "rust";

export const project = {
  name: "deno",
  version: "2.2.12",
};

const source = gitCheckout(
  Brioche.gitRef({
    repository: "https://github.com/denoland/deno.git",
    ref: `v${project.version}`,
  }),
);

export default function deno(): std.Recipe<std.Directory> {
  return cargoBuild({
    source,
    path: "cli",
    env: {
      // Pre-built V8 library used for building Deno
      RUSTY_V8_ARCHIVE: rustyV8Archive,

      // Build-time scripts dynamically load `libclang`, so ensure the standard
      // system libraries can be dynamically loaded
      LD_LIBRARY_PATH: std.tpl`${std.toolchain}/lib`,

      // Deno currently uses the linker flag `--export-dynamic-symbol-list`, so
      // ensure we use ld.bfd since ld.gold doesn't support this flag (at
      // the time of writing)
      [`CARGO_TARGET_${cargoTargetTripleEnvVar()}_RUSTFLAGS`]:
        "-Clink-arg=-fuse-ld=bfd",
    },
    runnable: "bin/deno",
    dependencies: [std.toolchain, cmake, python, ninja, llvm],
  });
}

function rustyV8Archive(): std.Recipe<std.File> {
  switch (std.CURRENT_PLATFORM) {
    case "x86_64-linux":
      return Brioche.download(
        "https://github.com/denoland/rusty_v8/releases/download/v135.1.0/librusty_v8_release_x86_64-unknown-linux-gnu.a.gz",
      ).pipe(gunzip);
    case "aarch64-linux":
      return Brioche.download(
        "https://github.com/denoland/rusty_v8/releases/download/v135.1.0/librusty_v8_release_aarch64-unknown-linux-gnu.a.gz",
      ).pipe(gunzip);
    default:
      throw new Error(
        `The platform '${std.CURRENT_PLATFORM}' is currently not supported by this version of the deno package`,
      );
  }
}

/**
 * Decompress a gzip-compressed recipe.
 */
function gunzip(file: std.RecipeLike<std.File>): std.Recipe<std.File> {
  return std.runBash`
    gunzip -c "$file" > "$BRIOCHE_OUTPUT"
  `
    .env({ file })
    .toFile();
}

/**
 * Return the current platform's target triple in `SCREAMING_SNAKE_CASE`, which
 * Cargo uses for target-specific environment variables.
 */
function cargoTargetTripleEnvVar(): string {
  switch (std.CURRENT_PLATFORM) {
    case "x86_64-linux":
      return "X86_64_UNKNOWN_LINUX_GNU";
    case "aarch64-linux":
      return "AARCH64_UNKNOWN_LINUX_GNU";
    default:
      throw new Error(
        `The platform '${std.CURRENT_PLATFORM}' is currently not supported by this version of the deno package`,
      );
  }
}
