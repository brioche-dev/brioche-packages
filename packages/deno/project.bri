import * as std from "std";
import cmake from "cmake";
import python from "python";
import ninja from "ninja";
import llvm from "llvm";

import { gitCheckout } from "git";
import { cargoBuild } from "rust";

export const project = {
  name: "deno",
  version: "2.2.12",
};

const source = gitCheckout(
  Brioche.gitRef({
    repository: "https://github.com/denoland/deno.git",
    ref: `v${project.version}`,
  }),
);

const rustyV8Archive = std
  .download({
    url: "https://github.com/denoland/rusty_v8/releases/download/v135.1.0/librusty_v8_release_x86_64-unknown-linux-gnu.a.gz",
    hash: std.sha256Hash(
      "406a453645473bd8f8b9a818342e57dc95627fcd1155ace9eb7a2aadd5985285",
    ),
  })
  .pipe((gzip) =>
    std.runBash`
      zcat "$gzip" > "$BRIOCHE_OUTPUT"
    `
      .env({ gzip })
      .toFile(),
  );

export default function deno(): std.Recipe<std.Directory> {
  return cargoBuild({
    source,
    path: "cli",
    env: {
      CARGO_TARGET_DIR: "deno_target",
      RUSTY_V8_ARCHIVE: rustyV8Archive,
      LD_LIBRARY_PATH: std.tpl`${std.toolchain}/lib`,
      [`CARGO_TARGET_${targetTripleEnvVar()}_RUSTFLAGS`]:
        "-Clink-arg=-fuse-ld=bfd",
    },
    runnable: "bin/deno",
    dependencies: [std.toolchain, cmake, python, ninja, llvm],
  });
}

function targetTripleEnvVar(): string {
  switch (std.CURRENT_PLATFORM) {
    case "x86_64-linux":
      return "X86_64_UNKNOWN_LINUX_GNU";
    case "aarch64-linux":
      return "AARCH64_UNKNOWN_LINUX_GNU";
    default:
      throw new Error(
        `The platform '${std.CURRENT_PLATFORM}' is currently not supported by this version of the deno package`,
      );
  }
}
