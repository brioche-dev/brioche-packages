import * as std from "std";

export const project = {
  name: "tinycbor",
  version: "0.6.1",
  repository: "https://github.com/intel/tinycbor.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `v${project.version}`,
});

export default function tinycbor(): std.Recipe<std.Directory> {
  return std.runBash`
    make
    make install "prefix=/" DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .toDirectory()
    .pipe(
      std.pkgConfigMakePathsRelative,
      (recipe) =>
        std.setEnv(recipe, {
          CPATH: { append: [{ path: "include" }] },
          LIBRARY_PATH: { append: [{ path: "lib" }] },
          PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
        }),
      (recipe) => std.withRunnableLink(recipe, "bin/cbordump"),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    pkg-config --modversion tinycbor | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, tinycbor)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  // HACK: tinycbor 0.6.1 returns a version number of 0.6.0
  const expected = project.version === "0.6.1" ? "0.6.0" : project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
