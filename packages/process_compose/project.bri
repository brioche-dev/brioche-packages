import * as std from "std";
import { gitCheckout } from "git";
import { goBuild } from "go";

export const project = {
  name: "process_compose",
  version: "1.75.2",
  repository: "https://github.com/F1bonacc1/process-compose.git",
  extra: {
    releaseDate: "2025-09-19",
  },
};

const gitRef = await Brioche.gitRef({
  repository: project.repository,
  ref: `v${project.version}`,
});
const source = gitCheckout(gitRef);

export default function processCompose(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    buildParams: {
      ldflags: [
        "-s",
        "-w",
        "-X",
        `github.com/f1bonacc1/process-compose/src/config.Version=v${project.version}`,
        "-X",
        `github.com/f1bonacc1/process-compose/src/config.Date=${project.extra.releaseDate}`,
        "-X",
        `github.com/f1bonacc1/process-compose/src/config.Commit=${gitRef.commit}`,
      ],
    },
    path: "./...",
  }).pipe(
    // Rename main binary from `bin/src` to `bin/process-compose`
    (recipe) => recipe.insert("bin/process-compose", recipe.get("bin/src")),
    // Add a link for `brioche run`
    (recipe) => std.withRunnableLink(recipe, "bin/process-compose"),
  );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    process-compose version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(processCompose)
    .toFile();

  const result = (await script.read()).trim();

  const version = result.match(/^Version:\s*v([\d.]+)$/m)?.at(1);

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
