import * as std from "std";
import brotli from "brotli";
import libpsl from "libpsl";
import libssh2 from "libssh2";
import nushell from "nushell";
import openssl from "openssl";

export const project = {
  name: "curl",
  version: "8.14.0",
};

const source = Brioche.download(
  `https://curl.se/download/curl-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

interface CurlOptions {
  minimal?: boolean;
}

/**
 * Builds the curl package. By default, this will build with all the optional
 * dependencies enabled.
 *
 * ## Options
 *
 * - `minimal`: If set, will only build with the minimum required dependencies.
 */
export default function curl(
  options: CurlOptions = {},
): std.Recipe<std.Directory> {
  const { minimal = false } = options;

  const curlDependencies = [std.toolchain, openssl];
  const curlBuildFlags = ["--with-openssl"];
  if (!minimal) {
    curlDependencies.push(brotli, libpsl, libssh2);
    curlBuildFlags.push("--with-libssh2");
  } else {
    curlBuildFlags.push("--without-libpsl");
  }

  return std.runBash`
    ./configure \\
      --prefix=/ \\
      --without-ca-bundle \\
      --without-ca-path \\
      --with-ca-fallback \\
      $buildFlags
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(...curlDependencies)
    .env({
      buildFlags: curlBuildFlags.join(" "),
    })
    .toDirectory()
    .pipe(
      std.pkgConfigMakePathsRelative,
      (recipe) =>
        std.setEnv(recipe, {
          CPATH: { append: [{ path: "include" }] },
          LIBRARY_PATH: { append: [{ path: "lib" }] },
          PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
          CURL_ROOT: { fallback: { path: "." } },
        }),
      (recipe) => std.withRunnableLink(recipe, "bin/curl"),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    curl --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(curl)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `curl ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.WithRunnable {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/curl/curl/releases/latest
      | get tag_name
      | str replace --regex '^curl-' ''
      | str replace --regex '^v' ''
      | str replace --all '_' '.'

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}
