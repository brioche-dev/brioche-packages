import * as std from "std";
import { gitCheckout } from "git";
import { goBuild } from "go";

export const project = {
  name: "eks_node_viewer",
  version: "0.7.4",
  repository: "https://github.com/awslabs/eks-node-viewer.git",
};

const gitRef = await Brioche.gitRef({
  repository: project.repository,
  ref: `v${project.version}`,
});
const source = gitCheckout(gitRef);

export default async function eksNodeViewer(): Promise<
  std.Recipe<std.Directory>
> {
  return goBuild({
    source,
    buildParams: {
      generate: true,
      ldflags: [
        "-s",
        "-w",
        `-X main.commit=${gitRef.commit}`,
        `-X main.version=${project.version}`,
      ],
    },
    path: "./cmd/eks-node-viewer",
    runnable: "bin/eks-node-viewer",
  });
}

export async function test() {
  const script = std.runBash`
    eks-node-viewer --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(eksNodeViewer)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `eks-node-viewer version ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate() {
  return std.liveUpdateFromGithubReleases({ project });
}
