import * as std from "std";
import { gitCheckout } from "git";
import { goBuild } from "go";
import nushell from "nushell";

export const project = {
  name: "carapace",
  version: "1.3.0",
};

const source = gitCheckout(
  Brioche.gitRef({
    repository: "https://github.com/carapace-sh/carapace-bin.git",
    ref: `v${project.version}`,
  }),
);

export default function carapace(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    buildParams: {
      generate: true,
      ldflags: ["-s", "-w", `-X main.version=${project.version}`],
    },
    path: "./cmd/carapace",
    runnable: "bin/carapace",
  });
}

export async function test() {
  const script = std.runBash`
    carapace --version 2>&1 | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(carapace())
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `carapace-bin ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export async function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/carapace-sh/carapace-bin/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
