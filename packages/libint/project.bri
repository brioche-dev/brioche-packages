import * as std from "std";
import boost from "boost";
import eigen from "eigen";

export const project = {
  name: "libint",
  version: "2.11.2",
  repository: "https://github.com/evaleev/libint",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `v${project.version}`,
}).pipe((source) =>
  std.runBash`
    sed -i -e "s|/bin/rm|rm|" "$BRIOCHE_OUTPUT/configure.ac"
    sed -i -e "s|/bin/rm|rm|" "$BRIOCHE_OUTPUT/src/bin/libint/Makefile"
    sed -i -e "s|/bin/rm|rm|" "$BRIOCHE_OUTPUT/src/lib/libint/Makefile.library"
  `
    .outputScaffold(source)
    .toDirectory(),
);

export default function libint(): std.Recipe<std.Directory> {
  return std.runBash`
    ./autogen.sh
    ./configure \
      --prefix=/ \
      --enable-shared
    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain, boost, eigen)
    .toDirectory()
    .pipe(std.pkgConfigMakePathsRelative, (recipe) =>
      std.setEnv(recipe, {
        CPATH: { append: [{ path: "include" }] },
        LIBRARY_PATH: { append: [{ path: "lib" }] },
        PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
      }),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    pkg-config --modversion libint2 | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, libint)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
