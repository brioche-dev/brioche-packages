import nushell from "nushell";
import * as std from "std";
import { cargoBuild } from "rust";

export const project = {
  name: "starship",
  version: "1.23.0",
};

const source = Brioche.gitCheckout({
  repository: "https://github.com/starship/starship.git",
  ref: `v${project.version}`,
});

export default function starship(): std.Recipe<std.Directory> {
  return cargoBuild({
    source: source,
    runnable: "bin/starship",
  });
}

export async function test() {
  const script = std.runBash`
    starship --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(starship())
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `starship ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/starship/starship/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
