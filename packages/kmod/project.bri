import * as std from "std";
import meson from "meson";
import ninja from "ninja";
import nushell from "nushell";
import openssl from "openssl";
import scdoc from "scdoc";

export const project = {
  name: "kmod",
  version: "34.2",
};

const source = Brioche.download(
  `https://www.kernel.org/pub/linux/utils/kernel/kmod/kmod-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function kmod(): std.Recipe<std.Directory> {
  return std.runBash`
    meson setup build --prefix=/ -Dmanpages=false
    meson compile -C build
    DESTDIR="$BRIOCHE_OUTPUT" meson install -C build
  `
    .workDir(source)
    .dependencies(std.toolchain, meson, ninja, scdoc, openssl)
    .toDirectory();
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    kmod --version | tee -a "$BRIOCHE_OUTPUT"
  `
    .dependencies(kmod)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `kmod version ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.WithRunnable {
  const src = std.file(std.indoc`
    let version = http get https://www.kernel.org/pub/linux/utils/kernel/kmod
      | lines
      | where {|it| ($it | str contains 'href="kmod-') and ($it | str contains '.tar.gz')}
      | parse --regex '<a href="kmod-(?<version>.+).tar.gz"'
      | sort-by --natural --reverse version
      | get 0.version

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}
