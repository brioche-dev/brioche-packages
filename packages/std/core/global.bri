import {
  type Recipe,
  type File,
  type Directory,
  createRecipe,
} from "./recipes";
import { source } from "./source.bri";

export interface BriocheGlobal {
  /**
   * Include a file from the filesystem. The path is relative to the
   * current Brioche module, and cannot go outside the project root.
   *
   * ## Example
   *
   * ```
   * project/
   * ├── project.bri
   * └── file.txt
   * ```
   *
   * ```typescript
   * // project.bri
   *
   * // Returns a file recipe with the contents of `file.txt`
   * const file = Brioche.includeFile("file.txt");
   * ```
   */
  includeFile(path: string): Recipe<File>;

  /**
   * Include a directory from the filesystem. The path is relative to the
   * current Brioche module, and cannot go outside the project root.
   *
   * ## Example
   *
   * ```
   * project/
   * ├── project.bri
   * └── src/
   *    ├── fizz.txt
   *    └── buzz.txt
   * ```
   *
   * ```typescript
   * // project.bri
   *
   * // Returns a directory containing `fizz.txt` and `buzz.txt`
   * const file = Brioche.includeDirectory("src");
   * ```
   */
  includeDirectory(path: string): Recipe<Directory>;

  /**
   * Include multiple files from the filesystem using a glob pattern. The
   * returned directory structure preserves the relative paths of the files,
   * relative to the current Brioche module. The glob pattern will not
   * match any paths if it tries going outside the current module directory.
   *
   * ## Example
   *
   * ```
   * project/
   * ├── project.bri
   * ├── hello.txt
   * └── src/
   *    ├── foo.txt
   *    └── secretfile.env
   * ```
   *
   * ```typescript
   * // project.bri
   *
   * // Returns a directory with this structure:
   * // .
   * // ├── hello.txt
   * // └── src/
   * //    └── foo.txt
   * const file = Brioche.glob("hello.txt, src/*.txt")
   * ```
   */
  glob(...patterns: string[]): Recipe<Directory>;
}

(globalThis as any).Brioche ??= {};
(globalThis as any).Brioche.includeFile ??= (path: string): Recipe<File> => {
  const sourceFrame = source({ depth: 1 }).at(0);
  if (sourceFrame === undefined) {
    throw new Error(`Could not find source file to retrieve ${path}`);
  }

  const sourceFile = sourceFrame.fileName;

  return createRecipe(["file"], {
    sourceDepth: 1,
    briocheSerialize: async () => {
      return await (globalThis as any).Deno.core.ops.op_brioche_get_static(
        sourceFile,
        {
          type: "include",
          include: "file",
          path,
        },
      );
    },
  });
};
(globalThis as any).Brioche.includeDirectory ??= (
  path: string,
): Recipe<Directory> => {
  const sourceFrame = source({ depth: 1 }).at(0);
  if (sourceFrame === undefined) {
    throw new Error(`Could not find source file to retrieve ${path}`);
  }

  const sourceFile = sourceFrame.fileName;

  return createRecipe(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async () => {
      return await (globalThis as any).Deno.core.ops.op_brioche_get_static(
        sourceFile,
        {
          type: "include",
          include: "directory",
          path,
        },
      );
    },
  });
};
(globalThis as any).Brioche.glob ??= (
  ...patterns: string[]
): Recipe<Directory> => {
  const sourceFrame = source({ depth: 1 }).at(0);
  if (sourceFrame === undefined) {
    throw new Error(`Could not find source file to resolve glob`);
  }

  const sourceFile = sourceFrame.fileName;

  return createRecipe(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async () => {
      return await (globalThis as any).Deno.core.ops.op_brioche_get_static(
        sourceFile,
        {
          type: "glob",
          patterns,
        },
      );
    },
  });
};
