import {
  type Recipe,
  type File,
  type Directory,
  createRecipe,
} from "./recipes";
import { source } from "./source.bri";
import { BRIOCHE_VERSION } from "./runtime.bri";
import { semverMatches } from "./semver.bri";
import { assert } from "./utils.bri";

export interface GitRefOptions {
  repository: string;
  ref: string;
}

interface GitRefResult {
  repository: string;
  commit: string;
}

declare global {
  // eslint-disable-next-line
  namespace Brioche {
    /**
     * Include a file from the filesystem. The path is relative to the
     * current Brioche module, and cannot go outside the project root.
     *
     * ## Example
     *
     * ```
     * project/
     * ├── project.bri
     * └── file.txt
     * ```
     *
     * ```typescript
     * // project.bri
     *
     * // Returns a file recipe with the contents of `file.txt`
     * const file = Brioche.includeFile("file.txt");
     * ```
     */
    function includeFile(path: string): Recipe<File>;

    /**
     * Include a directory from the filesystem. The path is relative to the
     * current Brioche module, and cannot go outside the project root.
     *
     * ## Example
     *
     * ```
     * project/
     * ├── project.bri
     * └── src/
     *    ├── fizz.txt
     *    └── buzz.txt
     * ```
     *
     * ```typescript
     * // project.bri
     *
     * // Returns a directory containing `fizz.txt` and `buzz.txt`
     * const file = Brioche.includeDirectory("src");
     * ```
     */
    function includeDirectory(path: string): Recipe<Directory>;

    /**
     * Include multiple files from the filesystem using a glob pattern. The
     * returned directory structure preserves the relative paths of the files,
     * relative to the current Brioche module. The glob pattern will not
     * match any paths if it tries going outside the current module directory.
     *
     * ## Example
     *
     * ```
     * project/
     * ├── project.bri
     * ├── hello.txt
     * └── src/
     *    ├── foo.txt
     *    └── secretfile.env
     * ```
     *
     * ```typescript
     * // project.bri
     *
     * // Returns a directory with this structure:
     * // .
     * // ├── hello.txt
     * // └── src/
     * //    └── foo.txt
     * const file = Brioche.glob("hello.txt, src/*.txt")
     * ```
     */
    function glob(...patterns: string[]): Recipe<Directory>;

    /**
     * Download a file from a URL. Unlike `std.download`, this function does
     * not take a hash, and it **must** be called with a constant string URL.
     * The hash of the downloaded file will be saved in the lockfile.
     *
     * See also `std.download`, which can be used even if URL is not constant.
     *
     * ## Example
     *
     * ```typescript
     * const file = Brioche.download("http://example.com/");
     * ```
     */
    function download(url: string): Recipe<File>;

    /**
     * Get the commit hash for a git ref in a repository. This function must
     * be called with constant strings for both the repository and ref. The
     * commit hash will be saved in the lockfile, so the same commit hash
     * will be used until the lockfile is updated.
     *
     * See also the `gitCheckout` function from the `git` package, which can
     * checkout a git repo from a commit hash returned from `Brioche.gitRef`.
     *
     * ## Options
     *
     * - `repository`: A git repository URL.
     * - `ref`: A git ref, such as a branch or tag name. Example: `main`
     *
     * ## Example
     *
     * ```typescript
     * import { gitCheckout } from "git";
     *
     * // Check out the main branch from the Brioche repository. The commit
     * // hash will be locked when first run, and will not change until the
     * // lockfile is updated
     * const source = gitCheckout(
     *   Brioche.gitRef({
     *     repository: "https://github.com/brioche-dev/brioche.git",
     *     ref: "main",
     *   }),
     * );
     * ```
     */
    function gitRef(options: GitRefOptions): Promise<GitRefResult>;
  }
}

(globalThis as any).Brioche ??= {};
(globalThis as any).Brioche.includeFile ??= (path: string): Recipe<File> => {
  const sourceFrame = source({ depth: 1 }).at(0);
  if (sourceFrame === undefined) {
    throw new Error(`Could not find source file to retrieve ${path}`);
  }

  const sourceFile = sourceFrame.fileName;

  return createRecipe(["file"], {
    sourceDepth: 1,
    briocheSerialize: async () => {
      return await (globalThis as any).Deno.core.ops.op_brioche_get_static(
        sourceFile,
        {
          type: "include",
          include: "file",
          path,
        },
      );
    },
  });
};
(globalThis as any).Brioche.includeDirectory ??= (
  path: string,
): Recipe<Directory> => {
  const sourceFrame = source({ depth: 1 }).at(0);
  if (sourceFrame === undefined) {
    throw new Error(`Could not find source file to retrieve ${path}`);
  }

  const sourceFile = sourceFrame.fileName;

  return createRecipe(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async () => {
      return await (globalThis as any).Deno.core.ops.op_brioche_get_static(
        sourceFile,
        {
          type: "include",
          include: "directory",
          path,
        },
      );
    },
  });
};
(globalThis as any).Brioche.glob ??= (
  ...patterns: string[]
): Recipe<Directory> => {
  const sourceFrame = source({ depth: 1 }).at(0);
  if (sourceFrame === undefined) {
    throw new Error(`Could not find source file to resolve glob`);
  }

  const sourceFile = sourceFrame.fileName;

  return createRecipe(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async () => {
      return await (globalThis as any).Deno.core.ops.op_brioche_get_static(
        sourceFile,
        {
          type: "glob",
          patterns,
        },
      );
    },
  });
};
(globalThis as any).Brioche.download ??= (url: string): Recipe<File> => {
  assert(
    semverMatches(BRIOCHE_VERSION, ">=0.1.2"),
    "Brioche.download(...) requires Brioche v0.1.2 or later",
  );

  const sourceFrame = source({ depth: 1 }).at(0);
  if (sourceFrame === undefined) {
    throw new Error(`Could not find source file to download ${url}`);
  }

  const sourceFile = sourceFrame.fileName;

  return createRecipe(["file"], {
    sourceDepth: 1,
    briocheSerialize: async () => {
      return await (globalThis as any).Deno.core.ops.op_brioche_get_static(
        sourceFile,
        {
          type: "download",
          url,
        },
      );
    },
  });
};
(globalThis as any).Brioche.gitRef ??= async (
  options: GitRefOptions,
): Promise<GitRefResult> => {
  assert(
    semverMatches(BRIOCHE_VERSION, ">=0.1.2"),
    "Brioche.gitRef(...) requires Brioche v0.1.2 or later",
  );

  const sourceFrame = source({ depth: 1 }).at(0);
  if (sourceFrame === undefined) {
    throw new Error(
      `Could not find source file to resolve git ref '${options.ref}' from repository '${options.repository}'`,
    );
  }

  const result = await (globalThis as any).Deno.core.ops.op_brioche_get_static(
    sourceFrame.fileName,
    {
      type: "git_ref",
      repository: options.repository,
      ref: options.ref,
    },
  );
  if (
    typeof result !== "object" ||
    result === null ||
    typeof result.repository !== "string" ||
    typeof result.commit !== "string"
  ) {
    throw new Error("failed to parse git ref result");
  }

  return { repository: result.repository, commit: result.commit };
};
