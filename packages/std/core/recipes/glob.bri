import * as runtime from "../runtime.bri";
import { assert } from "../utils.bri";
import { semverMatches } from "../semver.bri";
import { type Recipe, type RecipeLike, createRecipe } from "./recipe.bri";
import type { Directory } from "./directory.bri";

/**
 * Returns a directory recipe containing only files that match one of the
 * specified glob patterns.
 *
 * ## Example
 *
 * ```typescript
 * import * as std from "std";
 *
 * const dir = std.directory({
 *   "file.txt": std.file("Hello, world!"),
 *   "script.sh": std.file("echo 'Hello, world!'"),
 * });
 *
 * // Get only the text files from the directory
 * const textFiles = std.glob(dir, ["*.txt"]);
 * ```
 */
export function glob(
  recipe: RecipeLike<Directory>,
  patterns: string[],
): Recipe<Directory> {
  return createRecipe<Directory>(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      assert(
        semverMatches(runtime.BRIOCHE_VERSION, ">=0.1.2"),
        "std.glob requires Brioche v0.1.2 or later",
      );

      const recipeValue =
        typeof recipe === "function" ? await recipe() : await recipe;
      const serializedRecipe = await recipeValue.briocheSerialize();
      return {
        meta,
        type: "glob",
        directory: serializedRecipe,
        patterns: patterns.map((pattern) => runtime.bstring(pattern)),
      };
    },
  });
}
