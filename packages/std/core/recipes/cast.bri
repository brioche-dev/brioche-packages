import {
  type AsyncRecipe,
  type Recipe,
  type Artifact,
  createRecipe,
} from "./recipe.bri";
import type { File } from "./file.bri";
import type { Directory } from "./directory.bri";
import type { Symlink } from "./symlink.bri";

interface CastOptions {
  sourceDepth?: number;
}

/**
 * Cast a generic recipe to a file recipe. This is useful for cases like
 * `std.process()`, or `.get()`, where the output type is not known until
 * runtime. The cast will be validated when the recipe is baked.
 */
export function castToFile<T extends Artifact>(
  recipe: AsyncRecipe<T>,
  options: CastOptions = {},
): T extends File ? Recipe<T & File> : never {
  return createRecipe<File>(["file"], {
    sourceDepth: (options.sourceDepth ?? 0) + 1,
    briocheSerialize: async (meta) => {
      const serializedRecipe = await (await recipe).briocheSerialize();
      return {
        meta,
        type: "cast",
        recipe: serializedRecipe,
        to: "file",
      };
    },
  }) as T extends File ? Recipe<T & File> : never;
}

/**
 * Cast a generic recipe to a directory recipe. This is useful for cases like
 * `std.process()`, or `.get()`, where the output type is not known until
 * runtime. The cast will be validated when the recipe is baked.
 */
export function castToDirectory<T extends Artifact>(
  recipe: AsyncRecipe<T>,
  options: CastOptions = {},
): T extends Directory ? Recipe<T & Directory> : never {
  return createRecipe<Directory>(["directory"], {
    sourceDepth: (options.sourceDepth ?? 0) + 1,
    briocheSerialize: async (meta) => {
      const serializedRecipe = await (await recipe).briocheSerialize();
      return {
        meta,
        type: "cast",
        recipe: serializedRecipe,
        to: "directory",
      };
    },
  }) as T extends Directory ? Recipe<T & Directory> : never;
}

/**
 * Cast a generic recipe to a symlink recipe. This is useful for cases like
 * `std.process()`, or `.get()`, where the output type is not known until
 * runtime. The cast will be validated when the recipe is baked.
 */
export function castToSymlink<T extends Artifact>(
  recipe: AsyncRecipe<T>,
  options: CastOptions = {},
): T extends Symlink ? Recipe<T & Symlink> : never {
  return createRecipe<Symlink>(["symlink"], {
    sourceDepth: (options.sourceDepth ?? 0) + 1,
    briocheSerialize: async (meta) => {
      const serializedRecipe = await (await recipe).briocheSerialize();
      return {
        meta,
        type: "cast",
        recipe: serializedRecipe,
        to: "symlink",
      };
    },
  }) as T extends Symlink ? Recipe<T & Symlink> : never;
}
