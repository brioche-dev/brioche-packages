import * as runtime from "../runtime.bri";
import { source as briocheSource } from "../source.bri";
import { type Awaitable, unreachable, thisPipe } from "../utils.bri";
import { File, type FilePermissions } from "./file.bri";
import { Directory } from "./directory.bri";
import { Symlink } from "./symlink.bri";
import { createProxy } from "./proxy.bri";

export type Artifact = File | Directory | Symlink;

export type ArtifactTypes = {
  file: File;
  directory: Directory;
  symlink: Symlink;
};

export type ArtifactType<T extends Artifact> = T extends File
  ? "file"
  : T extends Directory
    ? "directory"
    : T extends Symlink
      ? "symlink"
      : never;

/**
 * A "recipe" is a type that describes how to create an artifact in Brioche.
 * When you call `brioche build`, the returned recipe is "baked" to produce
 * an output artifact. Recipes are lazy and won't do anything until `.bake()`
 * is called on them.
 */
export type Recipe<T extends Artifact = Artifact> = RecipeCommon &
  ([T] extends [File]
    ? FileRecipeUtils
    : [T] extends [Directory]
      ? DirectoryRecipeUtils
      : [T] extends [Symlink]
        ? SymlinkRecipeUtils
        : T extends Artifact
          ? object
          : never);

/**
 * A recipe that may be wrapped in a promise or a function call. A `RecipeLike`
 * can be converted to a `Recipe` using the `std.recipe()` function, which will
 * delay the function call or awaiting the result until the recipe is baked.
 */
export type RecipeLike<T extends Artifact = Artifact> =
  | AsyncRecipe<T>
  | (() => AsyncRecipe<T>);

/**
 * A recipe that may be wrapped in a promise. An `AsyncRecipe` can be converted
 * to a `Recipe` using the `std.recipe()` function, even when not in
 * an async function.
 */
export type AsyncRecipe<T extends Artifact = Artifact> = Awaitable<Recipe<T>>;

export function briocheDeserializeAny(
  artifact: runtime.Artifact,
  source: runtime.Source | undefined,
): Artifact {
  switch (artifact.type) {
    case "file":
      return File.briocheDeserialize(artifact, source);
    case "directory":
      return Directory.briocheDeserialize(artifact, source);
    case "symlink":
      return Symlink.briocheDeserialize(artifact, source);
    default:
      return unreachable(artifact);
  }
}

/**
 * Create a recipe from a `RecipeLike`. This function itself is not async,
 * meaning it can even be called from a synchronous function. Under the hood,
 * this will delay the function call or awaiting the result until the recipe is
 * baked (or serialized).
 */
export function recipe<T extends Artifact>(recipe: RecipeLike<T>): Recipe<T> {
  let result: Recipe<T> | undefined;

  return createRecipe<T>(
    ["file", "directory", "symlink"] as ArtifactType<T>[],
    {
      sourceDepth: 1,
      briocheSerialize: async () => {
        if (result == null) {
          if (typeof recipe === "function") {
            result = await recipe();
          } else {
            result = await recipe;
          }
        }
        return result.briocheSerialize();
      },
    },
  );
}

/**
 * Wrap a function that returns a `RecipeLike`, returning a new function that
 * accepts the same arguments but returns a `Recipe`.
 *
 * The return result is passed to `std.recipe`, which can be more convenient for
 * function callers, since methods from `Recipe` can be used directly.
 */
export function recipeFn<T extends Artifact, Args extends [] = []>(
  f: (...args: Args) => RecipeLike<T>,
): (...args: Args) => Recipe<T> {
  return (...args: Args): Recipe<T> => {
    return recipe(f(...args));
  };
}

export type CreateRecipeOptions = {
  sourceDepth?: number;
  briocheSerialize(meta: runtime.Meta): Awaitable<runtime.Recipe>;
};

/**
 * Create a new recipe by providing either a list of possible output types,
 * plus either a `bake` method or a `briocheSerialize` method. The returned
 * recipe can be used interchangeably with other, normal recipes.
 *
 * > **Note**: Providing only a `.bake()` function can be really inefficient!
 */
export function createRecipe<T extends Artifact>(
  types: ArtifactType<T>[],
  opts: CreateRecipeOptions,
): Recipe<T> {
  const source = briocheSource({ depth: (opts.sourceDepth ?? 0) + 1 });
  const meta = { source };

  const isFile = types.some((type) => type === "file");
  const isDirectory = types.some((type) => type === "directory");
  const isSymlink = types.some((type) => type === "symlink");

  return {
    briocheSerialize: async () => {
      return opts.briocheSerialize(meta);
    },
    bake: async () => {
      const result = await runtime.bake(await opts.briocheSerialize(meta));
      return briocheDeserializeAny(result, source);
    },
    ...(isFile ? fileRecipeUtils : {}),
    ...(isDirectory ? directoryRecipeUtils : {}),
    ...(isSymlink ? symlinkRecipeUtils : {}),
  } as unknown as Recipe<T>;
}

interface RecipeCommon extends RecipeUtils {
  /**
   * Serialize a recipe to a plain JSON-style object for the Brioche runtime
   * to handle. This is useful for wrapping another recipe, avoiding the need
   * to call `.bake()` when implementing custom recipes.
   */
  briocheSerialize(): Awaitable<runtime.Recipe>;
}

interface RecipeUtils {
  /**
   * Pipe a recipe through a list of functions, feeding the previous
   * value as the input to the next function. This is a convenience method
   * around the `std.pipe()` utility function.
   *
   * ## Example
   *
   * ```typescript
   * const result = recipe.pipe(
   *   function1,
   *   function2,
   *   function3,
   * );
   *
   * // Equivalent to:
   * // function3(function2(function1(recipe)));
   * ```
   */
  pipe: typeof thisPipe;
}

interface FileRecipeUtils extends RecipeUtils {
  /**
   * Returns a new file with the given permissions set.
   *
   * ## Example
   *
   * ```typescript
   * // Create a shell script and mark it as executable
   * std.file(std.indoc`
   *   #!/usr/bin/env bash
   *   echo "Hello, world!"
   * `).withPermissions({ executable: true });
   * ```
   */
  withPermissions(permissions: Partial<FilePermissions>): Recipe<File>;

  /**
   * Unarchive a (possibly compressed) archive file, returning a directory.
   *
   * ## Example
   *
   * ```typescript
   * Brioche.includeFile("archive.tar.gz").unarchive("tar", "gzip");
   * ```
   */
  unarchive(
    archiveFormat: runtime.ArchiveFormat,
    compressionFormat?: runtime.CompressionFormat,
  ): Recipe<Directory>;

  /**
   * Read the contents of the file into a `Uint8Array`.
   */
  readBytes(): Promise<Uint8Array>;

  /**
   * Read the contents of the file as a string. The file must be
   * UTF-8 encoded.
   */
  read(): Promise<string>;
}

interface DirectoryRecipeUtils extends RecipeUtils {
  /**
   * Get a file, directory, or symlink from a directory by path.
   */
  get(...paths: string[]): Recipe<Artifact>;

  /**
   * Return a new directory with the given recipe inserted at the provided
   * path. If the directory already contains a file at the path, it will be
   * replaced. If the path descends into a non-directory, baking the recipe
   * will fail.
   */
  insert(path: string, recipe: RecipeLike<Artifact>): Recipe<Directory>;

  /**
   * Return a new directory with the given recipe removed at the provided
   * path. If the directory does not contain a file at the path, then the
   * directory will be returned unchanged. If the path descends into a
   * non-directory, baking the recipe will fail.
   */
  remove(path: string): Recipe<Directory>;

  /**
   * Peel a directory, which removes an outer layer of the directory. Baking
   * will fail if the directory does not contain exactly one inner directory.
   *
   * Passing `depth` will repeat the peeling process multiple times (default: 1)
   */
  peel(depth?: number): Recipe<Directory>;
}

interface SymlinkRecipeUtils extends RecipeUtils {}

export const fileRecipeUtils: FileRecipeUtils = {
  withPermissions(
    this: Recipe<File>,
    permissions: Partial<FilePermissions>,
  ): Recipe<File> {
    return createRecipe(["file"], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        const file = await this.briocheSerialize();
        return {
          type: "set_permissions",
          file,
          executable: permissions.executable ?? null,
          meta,
        };
      },
    });
  },
  unarchive(
    this: Recipe<File>,
    archiveFormat: runtime.ArchiveFormat,
    compressionFormat?: runtime.CompressionFormat,
  ): Recipe<Directory> {
    return createRecipe(["directory"], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        const file = await this.briocheSerialize();
        return {
          type: "unarchive",
          file,
          archive: archiveFormat,
          compression: compressionFormat,
          meta,
        };
      },
    });
  },
  async readBytes(this: Recipe<File>): Promise<Uint8Array> {
    const serialized = await this.briocheSerialize();
    const artifact = await runtime.bake(serialized);
    if (artifact.type !== "file") {
      throw new Error(
        `expected artifact in '.readBytes()' call to be a file, was ${artifact.type}`,
      );
    }

    const bstring = await runtime.readBlob(artifact.contentBlob);
    return runtime.bstringToBytes(bstring);
  },
  async read(this: Recipe<File>): Promise<string> {
    const bytes = await this.readBytes();
    return runtime.utf8Decode(bytes);
  },
  pipe: thisPipe,
};

export const directoryRecipeUtils: DirectoryRecipeUtils = {
  get(this: Recipe<Directory>, path: string): Recipe<Artifact> {
    return createRecipe(["file", "directory", "symlink"], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        const directory = await this.briocheSerialize();
        return {
          type: "get",
          directory,
          path: runtime.bstring(path),
          meta,
        };
      },
    });
  },
  insert(
    this: Recipe<Directory>,
    path: string,
    recipe: RecipeLike<Artifact>,
  ): Recipe<Directory> {
    const proxyDirectory = createProxy(this);
    const proxyRecipe = createProxy(recipe);

    return createRecipe(["directory"], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        const [serializedDirectory, serializedRecipe] = await Promise.all([
          proxyDirectory.briocheSerialize(),
          proxyRecipe.briocheSerialize(),
        ]);
        return {
          type: "insert",
          directory: serializedDirectory,
          path: runtime.bstring(path),
          recipe: serializedRecipe,
          meta,
        };
      },
    });
  },
  remove(this: Recipe<Directory>, path: string): Recipe<Directory> {
    return createRecipe(["directory"], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        const directory = await this.briocheSerialize();
        return {
          type: "insert",
          directory,
          path: runtime.bstring(path),
          recipe: null,
          meta,
        };
      },
    });
  },
  peel(this: Recipe<Directory>, depth: number = 1): Recipe<Directory> {
    return createRecipe(["directory"], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        return {
          type: "cast",
          recipe: {
            type: "peel",
            directory: await this.briocheSerialize(),
            depth,
            meta,
          },
          to: "directory",
        };
      },
    });
  },
  pipe: thisPipe,
};

export const symlinkRecipeUtils: SymlinkRecipeUtils = {
  pipe: thisPipe,
};
