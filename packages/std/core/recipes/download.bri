import { File } from "./file.bri";
import { Hash } from "./hash.bri";
import { type Recipe, createRecipe } from "./recipe.bri";

/**
 * Options required to download a file from a URL.
 *
 * @param url - The URL to download.
 * @param hash - The hash to verify the downloaded content.
 */
export interface DownloadOptions {
  url: string;
  hash: Hash;
}

/**
 * Returns a recipe that will download a URL, and return
 * a file of its results. A hash must be provided, and will
 * be used to verify the downloaded contents.
 *
 * @description See also `Brioche.download`, which does not require specifying
 * a hash, but only works with a constant URL.
 *
 * @param opts - Download options including URL and hash.
 *
 * @returns A file recipe containing the downloaded content
 *
 * @example
 * ```typescript
 * std.download({
 *   url: "https://gist.githubusercontent.com/kylewlacy/c0f1a43e2641686f377178880fcce6ae/raw/f48155695445aa218e558fba824b61cf718d5e55/lorem-ipsum.txt",
 *   hash: std.sha256Hash(
 *     "642e3f58cc2bcc0d12d2e1e21dd9ea131f058a98e23e9beac79881bb0a324d06"
 *   ),
 * });
 * ```
 */
export function download(opts: DownloadOptions): Recipe<File> {
  return createRecipe(["file"], {
    sourceDepth: 1,
    briocheSerialize: (meta) => ({
      type: "download",
      url: opts.url,
      hash: opts.hash.briocheSerialize(),
      meta,
    }),
  });
}
