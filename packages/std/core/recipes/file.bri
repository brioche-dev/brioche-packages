import * as runtime from "../runtime.bri";
import { assert } from "../utils.bri";
import { type Recipe, createRecipe, fileRecipeUtils } from "./recipe.bri";

/**
 * Create a new file, which contains the provided content.
 *
 * ## Example
 *
 * ```typescript
 * std.file("Hello, world!");
 * ```
 */
export function file(content: string | Uint8Array): Recipe<File> {
  const serializedContent = runtime.bstring(content);
  return createRecipe(["file"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      return {
        type: "create_file",
        content: serializedContent,
        executable: false,
        resources: {
          type: "directory",
          entries: {},
        },
        meta,
      };
    },
  });
}

export interface FilePermissions {
  executable: boolean;
}

export interface FileCtor {
  source?: runtime.Source;
  contentBlob: runtime.BlobHash;
  executable: boolean;
  resources: runtime.Directory;
}

export class File implements Recipe<File> {
  artifactType: "file" = "file";
  source?: runtime.Source;
  contentBlob: runtime.BlobHash;
  executable: boolean;
  resources: runtime.Directory;

  constructor(options: FileCtor) {
    this.source = options.source;
    this.contentBlob = options.contentBlob;
    this.executable = options.executable;
    this.resources = options.resources;
  }

  briocheSerialize(): runtime.File {
    return {
      type: "file",
      contentBlob: this.contentBlob,
      executable: this.executable,
      resources: this.resources,
      meta: {
        source: this.source,
      },
    };
  }

  static briocheDeserialize(
    artifact: runtime.Artifact,
    source: runtime.Source | undefined,
  ): File {
    assert(artifact.type === "file");
    return new File({
      contentBlob: artifact.contentBlob,
      executable: artifact.executable,
      resources: artifact.resources,
      source,
    });
  }

  withPermissions = fileRecipeUtils.withPermissions;
  unarchive = fileRecipeUtils.unarchive;
  readBytes = fileRecipeUtils.readBytes;
  read = fileRecipeUtils.read;
  pipe = fileRecipeUtils.pipe;
}
