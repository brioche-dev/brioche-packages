import * as runtime from "../runtime.bri";
import { type Equatable, jsonSerialize } from "../utils.bri";
import {
  type Artifact,
  type Recipe,
  type RecipeLike,
  type ArtifactType,
  createRecipe,
} from "./recipe.bri";

/**
 * Memoize a function that returns a recipe. The return value will be
 * converted to a proxy automatically (see `std.createProxy()`).
 */
export function memo<Args extends Equatable[], Ret extends Artifact>(
  f: (...args: Args) => RecipeLike<Ret>,
): (...args: Args) => Recipe<Ret> {
  const proxies = new Map<string, Recipe<Ret>>();
  return (...args: Args) => {
    const key = jsonSerialize(args);
    const memoizedProxy = proxies.get(key);
    if (memoizedProxy != null) {
      return memoizedProxy;
    } else {
      const proxy = createProxy(f(...args));
      proxies.set(key, proxy);
      return proxy;
    }
  };
}

/**
 * Convert a recipe into a proxy. When baked, the proxy will bake the
 * inner recipe.
 *
 * This is used as an internal optimization for cases where a recipe
 * is repeated a lot in a build script, and effectively caches the
 * recipe's serialization.
 */
export function createProxy<T extends Artifact>(
  recipe: RecipeLike<T>,
): Recipe<T> {
  let serialized: Promise<runtime.ProxyRecipe> | undefined;

  const serializeProxy = async (): Promise<runtime.ProxyRecipe> => {
    if (serialized === undefined) {
      serialized = (async () => {
        const recipeValue =
          typeof recipe === "function" ? await recipe() : await recipe;
        const serializedRecipe = await recipeValue.briocheSerialize();
        const proxy = await runtime.createProxy(serializedRecipe);
        return {
          ...proxy,
          meta: serializedRecipe.meta,
        };
      })();
    }

    return await serialized;
  };

  return createRecipe(["file", "directory", "symlink"] as ArtifactType<T>[], {
    sourceDepth: 1,
    briocheSerialize: async () => {
      return await serializeProxy();
    },
  });
}
