import * as runtime from "../runtime.bri";
import { assert } from "../utils.bri";
import { createProxy } from "./proxy.bri";
import {
  type Recipe,
  type RecipeLike,
  createRecipe,
  directoryRecipeUtils,
} from "./recipe.bri";

/**
 * Constructs a new directory. Takes an object argument, where each key
 * is a filename and each value is a recipe
 *
 * ## Example
 *
 * ```typescript
 * std.directory({
 *   "hello": std.directory({
 *     "world.txt": std.file("Hello, world!"),
 *   }),
 * });
 * ```
 */
export function directory(
  entries: Record<string, RecipeLike> = {},
): Recipe<Directory> {
  const bEntries: Record<runtime.BString, RecipeLike> = {};
  for (const [k, v] of Object.entries(entries)) {
    bEntries[runtime.bstring(k)] = v;
  }

  return createRecipe(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      const entries = await Promise.all(
        Object.entries(bEntries).map(
          async ([k, v]): Promise<[runtime.BString, runtime.Recipe]> => {
            const recipeValue = typeof v === "function" ? await v() : await v;
            const serializedRecipe = await recipeValue.briocheSerialize();
            return [k as runtime.BString, serializedRecipe];
          },
        ),
      );
      return {
        type: "create_directory",
        entries: Object.fromEntries(entries),
        meta,
      };
    },
  });
}

/**
 * Perform a deep merge of two or more directories. The rightmost directory
 * takes precedence.
 */
export function merge(
  ...directories: RecipeLike<Directory>[]
): Recipe<Directory> {
  const proxyDirectories = directories.map(createProxy);
  return createRecipe(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      const serializedDirectories = await Promise.all(
        proxyDirectories.map(async (dir) => dir.briocheSerialize()),
      );
      return {
        type: "merge",
        directories: serializedDirectories,
        meta,
      };
    },
  });
}

interface DirectoryCtor {
  entries: Record<runtime.BString, runtime.RecipeHash>;
  source?: runtime.Source;
}

export class Directory implements Recipe<Directory> {
  artifactType: "directory" = "directory";
  entries: Record<runtime.BString, runtime.RecipeHash>;
  source?: runtime.Source;

  constructor(options: DirectoryCtor) {
    this.entries = options.entries;
    this.source = options.source;
  }

  briocheSerialize(): runtime.Directory {
    return {
      type: "directory",
      entries: this.entries,
      meta: {
        source: this.source,
      },
    };
  }

  static briocheDeserialize(
    artifact: runtime.Artifact,
    source: runtime.Source | undefined,
  ): Directory {
    assert(artifact.type === "directory");
    return new Directory({ entries: artifact.entries, source });
  }

  get = directoryRecipeUtils.get;
  insert = directoryRecipeUtils.insert;
  remove = directoryRecipeUtils.remove;
  peel = directoryRecipeUtils.peel;
  pipe = directoryRecipeUtils.pipe;
}
