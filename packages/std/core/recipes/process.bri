import { Awaitable, mixin, unreachable } from "../utils.bri";
import * as runtime from "../runtime.bri";
import type { File } from "./file.bri";
import { type Directory, directory } from "./directory.bri";
import type { Symlink } from "./symlink.bri";
import { type AsyncRecipe, type Recipe, createRecipe } from "./recipe.bri";
import { castToFile, castToDirectory, castToSymlink } from "./cast.bri";

export type ProcessOptions = {
  command: ProcessTemplateLike;
  args?: ProcessTemplateLike[];
  env?: Record<string, ProcessTemplateLike>;
  currentDir?: ProcessTemplateLike;
  dependencies?: AsyncRecipe<Directory>[];
  workDir?: AsyncRecipe<Directory>;
  outputScaffold?: AsyncRecipe | null;
  unsafe?: ProcessUnsafeOptions;
};

export interface ProcessUnsafeOptions {
  networking?: boolean;
}

export type Process = Recipe & ProcessUtils;

export interface ProcessUtils {
  /**
   * Returns a new process with more environment variables set.
   */
  env(values: Record<string, ProcessTemplateLike>): Process;

  currentDir(currentDir: ProcessTemplateLike): Process;

  /**
   * Returns a new process with more dependencies added. The new
   * dependencies take precedence over the old ones.
   */
  dependencies(...dependencies: AsyncRecipe<Directory>[]): Process;

  /**
   * Returns a new process with a different working directory.
   */
  workDir(workDir: AsyncRecipe<Directory>): Process;

  /**
   * Returns a new process with a different output scaffold.
   */
  outputScaffold(outputScaffold: AsyncRecipe): Process;

  /**
   * Returns a new process with unsafe options set. If unset, no unsafe
   * options will be enabled.
   */
  unsafe(unsafeOptions?: ProcessUnsafeOptions): Process;

  /**
   * Cast the process's output to a file recipe. This will fail to bake if
   * the process does not write a file to `$BRIOCHE_OUTPUT`.
   */
  toFile(): Recipe<File>;

  /**
   * Cast the process's output to a directory recipe. This will fail to bake
   * if the process does not write a directory to `$BRIOCHE_OUTPUT`.
   */
  toDirectory(): Recipe<Directory>;

  /**
   * Cast the process's output to a symlink recipe. This will fail to bake
   * if the process does not write a symlink to `$BRIOCHE_OUTPUT`.
   */
  toSymlink(): Recipe<Symlink>;
}

/**
 * Create a recipe that will run a process, returning the contents that
 * the process writes to the path `$BRIOCHE_OUTPUT`. The process can
 * write a file, directory, or symlink to this path.
 *
 * Most options can be passed as a string literal, or as a template using
 * the template function `std.tpl`. Recipes in the template will be
 * expanded to an absolute path when the process runs.
 *
 * ## Options
 *
 * These options can be passed when calling `std.process()`, or can be
 * set by calling methods on another process recipe (these methods are
 * **immutable**, so make sure to assign the result to a variable!)
 *
 * - `command`: The command to run. Should either be a template, or a
 *   string referencing a command from `dependencies`.
 * - `args`: An array of arguments to pass to the command.
 * - `env`: An object containing environment variables to set for the process.
 * - `dependencies`: An array of dependencies to call the process with.
 *   Dependencies will be merged into the process's environment.
 * - `workDir`: Set to a directory recipe that will be copied into the
 *   process's starting working directory.
 * - `outputScaffold`: Set to a recipe that will be be used to initialize
 *   `$BRIOCHE_OUTPUT`, which the process can then manipulate.
 * - `unsafe`: A nested object with extra unsafe options that can be enabled.
 *   You must take extra care to ensure that running the process is hermetic
 *   when using these options! The following options are available:
 *   - `networking`: Set to `true` to allow the process to access the network.
 *
 * ## Example
 *
 * ```typescript
 * // Call Bash and write "Hello world!" to the output path
 * std.process({
 *   command: std.tpl`${std.tools()}/bin/bash`,
 *   args: ["-c", 'echo "Hello world!" > "$BRIOCHE_OUTPUT"'],
 * });
 * ```
 */
export function process(options: ProcessOptions): Process {
  const { networking = false, ...unknownUnsafeOptions } = options.unsafe ?? {};
  const env: Record<string, ProcessTemplateLike> = {
    BRIOCHE_OUTPUT: outputPath,
    BRIOCHE_RESOURCE_DIR: resourceDir,
    BRIOCHE_INPUT_RESOURCE_DIRS: inputResourceDirs,
    HOME: homeDir,
    TMPDIR: tempDir,
    ...(networking ? { SSL_CERT_FILE: caCertificateBundlePath } : {}),
    ...options.env,
  };

  const bEnv: Record<runtime.BString, ProcessTemplate> = {};
  for (const [k, v] of Object.entries(env)) {
    bEnv[runtime.bstring(k)] = processTemplate(v);
  }

  const recipe = createRecipe(["file", "directory", "symlink"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      const unknownUnsafeKeys = Object.keys(unknownUnsafeOptions);
      if (unknownUnsafeKeys.length > 0) {
        throw new Error(
          `Unknown unsafe options: ${unknownUnsafeKeys.join(", ")}`,
        );
      }
      const unsafe = networking;

      return {
        type: "process",
        command: await processTemplate(options.command).briocheSerialize(),
        args: await Promise.all(
          (options.args ?? []).map(
            async (arg) => await processTemplate(arg).briocheSerialize(),
          ),
        ),
        env: Object.fromEntries(
          await Promise.all(
            Object.entries(env).map(async ([k, v]) => [
              k,
              await processTemplate(v).briocheSerialize(),
            ]),
          ),
        ),
        currentDir:
          options.currentDir != null
            ? await processTemplate(options.currentDir).briocheSerialize()
            : undefined,
        dependencies: await Promise.all(
          (options.dependencies ?? []).map(
            async (dep) => await (await dep).briocheSerialize(),
          ),
        ),
        platform: "x86_64-linux",
        workDir: await (
          await (options.workDir ?? directory())
        ).briocheSerialize(),
        outputScaffold:
          options.outputScaffold != null
            ? await (await options.outputScaffold).briocheSerialize()
            : null,
        unsafe,
        networking,
        meta,
      };
    },
  });

  return mixin(recipe, {
    env(this: Process, values: Record<string, ProcessTemplateLike>): Process {
      return process({
        ...options,
        env: {
          ...options.env,
          ...values,
        },
      });
    },
    currentDir(this: Process, currentDir: ProcessTemplateLike): Process {
      return process({
        ...options,
        currentDir,
      });
    },
    dependencies(
      this: Process,
      ...dependencies: AsyncRecipe<Directory>[]
    ): Process {
      return process({
        ...options,
        dependencies: [...dependencies, ...(options.dependencies ?? [])],
      });
    },
    workDir(this: Process, workDir: AsyncRecipe<Directory>): Process {
      return process({
        ...options,
        workDir,
      });
    },
    outputScaffold(this: Process, outputScaffold: AsyncRecipe): Process {
      return process({
        ...options,
        outputScaffold,
      });
    },
    unsafe(this: Process, unsafe: ProcessUnsafeOptions): Process {
      return process({
        ...options,
        unsafe,
      });
    },
    toFile(this: Process): Recipe<File> {
      return castToFile(this, { sourceDepth: 1 });
    },
    toDirectory(this: Process): Recipe<Directory> {
      return castToDirectory(this, { sourceDepth: 1 });
    },
    toSymlink(this: Process): Recipe<Symlink> {
      return castToSymlink(this, { sourceDepth: 1 });
    },
  } satisfies ProcessUtils);
}

export function processTemplate(
  ...components: ProcessTemplateLike[]
): ProcessTemplate {
  return new ProcessTemplate(...components);
}

/**
 * Create a process template, which can be used to include recipe paths
 * or other pre-defined values for the command, arguments, or environment
 * variables for a process.
 */
export function tpl(
  strings: TemplateStringsArray,
  ...items: ProcessTemplateLike[]
): ProcessTemplate {
  const components = strings.flatMap((str, i): ProcessTemplateLike[] => {
    const item = items[i];
    if (item != null) {
      return [str, item];
    } else {
      return [str];
    }
  });

  return new ProcessTemplate(...components);
}

// This is a branded type for one of the symbol type of process template
// components. Note that we avoid true symbol/branded types so the types can
// be structurally equivalent across different versions of `std`.
type ProcessTemplateSymbol<
  K extends ProcessTemplateSymbolKind = ProcessTemplateSymbolKind,
> = {
  componentType: "symbol";
  symbol: K;
} & {
  [key in K]?: never;
} & { __processTemplateSymbol: never };

const PROCESS_TEMPLATE_SYMBOL_KINDS = [
  "outputPath",
  "resourceDir",
  "inputResourceDirs",
  "homeDir",
  "workDir",
  "tempDir",
  "caCertificateBundlePath",
] as const;

type ProcessTemplateSymbolKind = (typeof PROCESS_TEMPLATE_SYMBOL_KINDS)[number];

/**
 * Expands to the path where the process should write its output. Equivalent
 * to the default environment variable `$BRIOCHE_OUTPUT`.
 */
// eslint-disable-next-line
export const outputPath = {
  componentType: "symbol",
  symbol: "outputPath",
} as OutputPath;
type OutputPath = ProcessTemplateSymbol<"outputPath">;

/**
 * Expands to the directory where the process can write resources to that
 * can then be referenced by files in the process's output. Equivalent
 * to the default environment variable `$BRIOCHE_RESOURCE_DIR`.
 */
// eslint-disable-next-line
export const resourceDir = {
  componentType: "symbol",
  symbol: "resourceDir",
} as ResourceDir;
type ResourceDir = ProcessTemplateSymbol<"resourceDir">;

/**
 * Expands to a `:`-delimited list of directories where the process can find
 * resources from its inputs. These directories are normally read-only.
 * Equivalent to the default environment variable `$BRIOCHE_INPUT_RESOURCE_DIRS`.
 */
// eslint-disable-next-line
export const inputResourceDirs = {
  componentType: "symbol",
  symbol: "inputResourceDirs",
} as InputResourceDirs;
type InputResourceDirs = ProcessTemplateSymbol<"inputResourceDirs">;

/**
 * Expands to the home directory when the process runs. Equivalent to the
 * default environment variable `$HOME`.
 */
// eslint-disable-next-line
export const homeDir = {
  componentType: "symbol",
  symbol: "homeDir",
} as HomeDir;
type HomeDir = ProcessTemplateSymbol<"homeDir">;

/**
 * Expands to the the "work directory" of the process. This is the directory
 * a process starts in by default (which is usually `$HOME/work`).
 */
// eslint-disable-next-line
export const workDir = {
  componentType: "symbol",
  symbol: "workDir",
} as WorkDir;
type WorkDir = ProcessTemplateSymbol<"workDir">;

/**
 * Expands to the temporary directory where the process can write temporary
 * files. Equivalent to the default environment variable `$TMPDIR`.
 */
// eslint-disable-next-line
export const tempDir = {
  componentType: "symbol",
  symbol: "tempDir",
} as TempDir;
type TempDir = ProcessTemplateSymbol<"tempDir">;

/**
 * Expands to a file path containing trusted CA certificates (PEM-encoded).
 * Can only be used in a process recipe when the `networking` unsafe option
 * is enabled. Equivalent to the default environment variable `$SSL_CERT_FILE`.
 */
// eslint-disable-next-line
export const caCertificateBundlePath = {
  componentType: "symbol",
  symbol: "caCertificateBundlePath",
} as CaCertificateBundlePath;
type CaCertificateBundlePath = ProcessTemplateSymbol<"caCertificateBundlePath">;

function isProcessTemplateSymbol(
  value: unknown,
): value is ProcessTemplateSymbol {
  return (
    typeof value === "object" &&
    value != null &&
    "componentType" in value &&
    value["componentType"] === "symbol" &&
    "symbol" in value &&
    typeof value.symbol === "string" &&
    (PROCESS_TEMPLATE_SYMBOL_KINDS as readonly string[]).includes(value.symbol)
  );
}

export type ProcessTemplateLike = Awaitable<ProcessTemplateComponent>;

export type ProcessTemplateComponent =
  | string
  | ProcessTemplate
  | Recipe
  | ProcessTemplateSymbol
  | undefined;

export class ProcessTemplate {
  componentType: "processTemplate" = "processTemplate";
  components: ProcessTemplateLike[];

  constructor(...components: ProcessTemplateLike[]) {
    /* eslint-disable-next-line */
    this.components = components;
  }

  async briocheSerialize(): Promise<runtime.ProcessTemplate> {
    const components = await Promise.all(this.components);
    const runtimeComponents = await Promise.all(
      components.map(
        async (component): Promise<runtime.ProcessTemplateComponent[]> => {
          if (component == null || component === "") {
            return [];
          } else if (typeof component === "string") {
            return [{ type: "literal", value: runtime.bstring(component) }];
          } else if (isProcessTemplateSymbol(component)) {
            switch (component.symbol) {
              case "outputPath":
                return [{ type: "output_path" }];
              case "resourceDir":
                return [{ type: "resource_dir" }];
              case "inputResourceDirs":
                return [{ type: "input_resource_dirs" }];
              case "homeDir":
                return [{ type: "home_dir" }];
              case "workDir":
                return [{ type: "work_dir" }];
              case "tempDir":
                return [{ type: "temp_dir" }];
              case "caCertificateBundlePath":
                return [{ type: "ca_certificate_bundle_path" }];
              default:
                return unreachable(component.symbol);
            }
          } else if (isProcessTemplateInstance(component)) {
            const serialized = await component.briocheSerialize();
            return serialized.components;
          } else {
            return [
              { type: "input", recipe: await component.briocheSerialize() },
            ];
          }
        },
      ),
    );

    return {
      components: runtimeComponents.flat(1),
    };
  }
}

function isProcessTemplateInstance(value: unknown): value is ProcessTemplate {
  return (
    typeof value === "object" &&
    value != null &&
    "componentType" in value &&
    value.componentType === "processTemplate" &&
    "briocheSerialize" in value &&
    typeof value.briocheSerialize === "function"
  );
}
