import * as std from "/core";

const PLATFORM_RUNTIME_UTILS: Record<
  std.Platform,
  std.Recipe<std.Directory> | undefined
> = {
  "x86_64-linux": Brioche.download(
    "https://development-content.brioche.dev/github.com/brioche-dev/brioche-runtime-utils/commits/fa9ce0565ea067c84216838073c22176bb4a6399/x86_64-linux/brioche-runtime-utils.tar.zstd",
  ).unarchive("tar", "zstd"),
  "aarch64-linux": Brioche.download(
    "https://development-content.brioche.dev/github.com/brioche-dev/brioche-runtime-utils/commits/fa9ce0565ea067c84216838073c22176bb4a6399/aarch64-linux/brioche-runtime-utils.tar.zstd",
  ).unarchive("tar", "zstd"),
};

export function runtimeUtils(): std.Recipe<std.Directory> {
  const platformRuntimeUtils = PLATFORM_RUNTIME_UTILS[std.CURRENT_PLATFORM];
  std.assert(
    platformRuntimeUtils != null,
    `The platform '${std.CURRENT_PLATFORM}' is not handled by this version of std`,
  );

  return platformRuntimeUtils;
}

interface RunnableData {
  command: RunnableTemplate;
  args: RunnableArgValue[];
  env: Record<string, RunnableEnvValue>;
  clearEnv?: boolean;
}

export function makeRunnableExecutable(
  data: RunnableData,
): std.Recipe<std.File> {
  const metadata = {
    command: data.command,
    args: data.args,
    env: data.env,
    clearEnv: data.clearEnv ?? false,
  } satisfies RunnableMetadata;
  const pack = {
    type: "metadata",
    resourcePaths: [],
    format: "application/vnd.brioche.runnable-v0.1.0+json",
    metadata: std.tickEncode(JSON.stringify(metadata)),
  };

  return std
    .process({
      command: runtimeUtils().get("bin/brioche-packer"),
      args: [
        "pack",
        "--packed",
        runtimeUtils().get("bin/brioche-packed-plain-exec"),
        "--output",
        std.outputPath,
        "--pack",
        JSON.stringify(pack),
      ],
    })
    .toFile();
}

export type RunnableArgValue =
  | { type: "arg"; value: RunnableTemplate }
  | { type: "rest" };

export type RunnableEnvValue =
  | { type: "clear" }
  | { type: "inherit" }
  | { type: "set"; value: RunnableTemplate }
  | { type: "fallback"; value: RunnableTemplate }
  | { type: "prepend"; value: RunnableTemplate; separator: std.BString }
  | { type: "append"; value: RunnableTemplate; separator: std.BString };

export interface RunnableTemplate {
  components: RunnableTemplateComponent[];
}

export type RunnableTemplateComponent =
  | { type: "literal"; value: std.BString }
  | { type: "relative_path"; path: std.BString };

interface RunnableMetadata {
  command: RunnableTemplate;
  args: RunnableArgValue[] | undefined;
  env: Record<string, RunnableEnvValue> | undefined;
  clearEnv: boolean;
  source?: RunnableSource | null | undefined;
}

interface RunnableSource {
  path: RunnablePath;
}

type RunnablePath =
  | { type: "relative_path"; path: std.BString }
  | { type: "resource"; resource: std.BString };
