import * as std from "/core";

const PLATFORM_RUNTIME_UTILS: Record<
  std.Platform,
  std.Recipe<std.Directory> | undefined
> = {
  "x86_64-linux": Brioche.download(
    "https://development-content.brioche.dev/github.com/brioche-dev/brioche-runtime-utils/commits/51a8c49dafca2ab1b91a80755eed03799c9cb10b/x86_64-linux/brioche-runtime-utils.tar.zstd",
  ).unarchive("tar", "zstd"),
  "aarch64-linux": Brioche.download(
    "https://development-content.brioche.dev/github.com/brioche-dev/brioche-runtime-utils/commits/51a8c49dafca2ab1b91a80755eed03799c9cb10b/aarch64-linux/brioche-runtime-utils.tar.zstd",
  ).unarchive("tar", "zstd"),
};

export function runtimeUtils(): std.Recipe<std.Directory> {
  const platformRuntimeUtils = PLATFORM_RUNTIME_UTILS[std.CURRENT_PLATFORM];
  std.assert(
    platformRuntimeUtils != null,
    `The platform '${std.CURRENT_PLATFORM}' is not handled by this version of std`,
  );

  return platformRuntimeUtils;
}

interface RunnableData {
  command: RunnableTemplate;
  args: RunnableTemplate[];
  env: Record<string, RunnableTemplate>;
}

export function makeRunnableExecutable(
  data: RunnableData,
): std.Recipe<std.File> {
  const metadata = {
    command: data.command,
    args: [
      ...data.args.map((value) => ({
        type: "arg",
        value,
      })),
      { type: "rest" },
    ],
    env: Object.fromEntries(
      Object.entries(data.env).map(([key, value]) => [
        key,
        { type: "set", value },
      ]),
    ),
    clearEnv: false,
  };
  const pack = {
    type: "metadata",
    resourcePaths: [],
    format: "application/vnd.brioche.runnable-v0.1.0+json",
    metadata: std.tickEncode(JSON.stringify(metadata)),
  };

  return std
    .process({
      command: runtimeUtils().get("bin/brioche-packer"),
      args: [
        "pack",
        "--packed",
        runtimeUtils().get("bin/brioche-packed-plain-exec"),
        "--output",
        std.outputPath,
        "--pack",
        JSON.stringify(pack),
      ],
    })
    .toFile();
}

export interface RunnableTemplate {
  components: RunnableTemplateComponent[];
}

export type RunnableTemplateComponent =
  | { type: "literal"; value: std.BString }
  | { type: "relative_path"; path: std.BString };
