import * as std from "/core";
import stage2 from "/toolchain/stage2";
import gmp from "./gmp.bri";

export default std.memo((): std.Recipe<std.Directory> => {
  let source = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/mpfr-4.2.0.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();

  source = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          cd "$BRIOCHE_OUTPUT"
          sed \
            -e 's/+01,234,567/+1,234,567 /' \
            -e 's/13.10Pd/13Pd/' \
            -i tests/tsprintf.c
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
      },
      outputScaffold: source,
    })
    .toDirectory();

  let mpfr = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          ./configure \
            --prefix= \
            --disable-static \
            --enable-thread-safe
          make
          make install DESTDIR="$BRIOCHE_OUTPUT"
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
        CPPFLAGS: std.tpl`-I${gmp()}/include`,
        LDFLAGS: std.tpl`-L${gmp()}/lib`,
      },
      workDir: source,
    })
    .toDirectory();

  let libtoolArchive = mpfr.get("lib/libmpfr.la");
  libtoolArchive = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        `
          sed 's|//lib/libgmp.la|-lgmp|' "$libtoolArchive" > "$BRIOCHE_OUTPUT"
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
        libtoolArchive,
      },
    })
    .toFile();

  mpfr = mpfr.insert("lib/libmpfr.la", libtoolArchive);

  return mpfr;
});
