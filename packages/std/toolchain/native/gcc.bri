import * as std from "/core";
import { useBriocheCc } from "../utils.bri";
import { currentPlatformInfo } from "../stage0";
import linuxHeaders from "./linux_headers.bri";
import stage2 from "/toolchain/stage2";
import glibc from "./glibc.bri";
import binutils from "./binutils.bri";
import zlib from "./zlib.bri";
import gmp from "./gmp.bri";
import mpfr from "./mpfr.bri";
import mpc from "./mpc.bri";
import libxcrypt from "./libxcrypt.bri";

export default std.memo((): std.Recipe<std.Directory> => {
  const platformInfo = currentPlatformInfo();
  let source = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/gcc-13.2.0.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();

  source = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          cd "$BRIOCHE_OUTPUT"

          sed -e '/m64=/s/lib64/lib/' -i gcc/config/i386/t-linux64
          sed -e '/mabi.lp64=/s/lib64/lib/' -i gcc/config/aarch64/t-aarch64-linux
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
      },
      outputScaffold: source,
    })
    .toDirectory();

  const buildSysroot = std.merge(
    linuxHeaders(),
    glibc(),
    binutils(),
    libxcrypt(),
    std.directory({
      usr: std.directory({
        lib: std.symlink({ target: "../lib" }),
        lib64: std.symlink({ target: "../lib64" }),
        include: std.symlink({ target: "../include" }),
      }),
    }),
  );

  // TODO: Enable NLS
  let gcc = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          mkdir build
          cd build

          ../configure \
            --prefix=/ \
            --enable-languages=c,c++ \
            --enable-default-pie \
            --enable-default-ssp \
            --disable-nls \
            --disable-multilib \
            --disable-bootstrap \
            --disable-fixincludes \
            --with-system-zlib \
            --with-gmp="$gmp" \
            --with-mpfr="$mpfr" \
            --with-mpc="$mpc" \
            --with-build-sysroot="$buildSysroot" \
            CFLAGS_FOR_TARGET="-g -O2 $CPPFLAGS" \
            CXXFLAGS_FOR_TARGET="-g -O2 $CPPFLAGS" \
            LDFLAGS_FOR_TARGET="$LDFLAGS" \
            CFLAGS_FOR_BUILD="$CPPFLAGS" \
            CXXFLAGS_FOR_BUILD="$CPPFLAGS" \
            CFLAGS="$CPPFLAGS" \
            CXXFLAGS="$CPPFLAGS" \
            LD="ld"
          make
          make install DESTDIR="$BRIOCHE_OUTPUT"
        `,
      ],
      env: {
        PATH: std.tpl`${buildSysroot}/bin:${stage2()}/bin`,
        CPPFLAGS: std.tpl`-I${zlib()}/include -I${gmp()}/include -I${mpfr()}/include -I${mpc()}/include -isystem ${stage2()}/usr/lib/gcc/${
          platformInfo.arch
        }-lfs-linux-gnu/13.2.0/include -isystem ${buildSysroot}/include -isystem ${buildSysroot}/usr/include`,
        LDFLAGS: std.tpl`-L${zlib()}/lib -L${gmp()}/lib -L${mpfr()}/lib -L${mpc()}/lib -L${buildSysroot}/lib -L${buildSysroot}/lib64 -lm --sysroot=${buildSysroot}`,
        buildSysroot,
        gmp: gmp(),
        mpfr: mpfr(),
        mpc: mpc(),
      },
      workDir: source,
    })
    .toDirectory();

  gcc = useBriocheCc(gcc, {
    ccPaths: [
      `bin/${toolchainTriple()}-c++`,
      `bin/${toolchainTriple()}-g++`,
      `bin/${toolchainTriple()}-gcc`,
      `bin/${toolchainTriple()}-gcc-13.2.0`,
      "bin/c++",
      "bin/g++",
      "bin/gcc",
    ],
    sysrootPath: "",
  });

  return gcc;
});

function toolchainTriple(): string {
  switch (std.CURRENT_PLATFORM) {
    case "x86_64-linux":
      return "x86_64-pc-linux-gnu";
    case "aarch64-linux":
      return "aarch64-unknown-linux-gnu";
    default:
      throw new Error(
        `The platform '${std.CURRENT_PLATFORM}' is not handled by this version of std`,
      );
  }
}
