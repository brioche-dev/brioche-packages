import * as std from "/core";
import { wrapWithScript } from "../utils.bri";
import stage2 from "/toolchain/stage2";

export default std.memo((): std.Recipe<std.Directory> => {
  let source = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/autoconf-2.71.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();
  source = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          cd "$BRIOCHE_OUTPUT"
          sed -e 's/SECONDS|/&SHLVL|/' \
            -e '/BASH_ARGV=/a\\        /^SHLVL=/ d' \
            -i.orig tests/local.at
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
      },
      outputScaffold: source,
    })
    .toDirectory();

  let autoconf = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          sed -e 's/SECONDS|/&SHLVL|/' \
            -e '/BASH_ARGV=/a\\        /^SHLVL=/ d' \
            -i.orig tests/local.at

          ./configure --prefix=
          make
          make install DESTDIR="$BRIOCHE_OUTPUT"

          # Replace absolute paths to perl with plain program name, and fix shebangs
          sed -i 's|^#![[:space:]]*.*/bin/\\([^[:space:]]*\\)|#! /usr/bin/env \\1|' "$BRIOCHE_OUTPUT"/bin/*
          sed -i 's|[^[:space:]]*/bin/perl|perl|g' "$BRIOCHE_OUTPUT"/bin/*
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
      },
      workDir: source,
    })
    .toDirectory();

  autoconf = wrapWithScript(autoconf, {
    paths: ["bin/autoupdate", "bin/autom4te"],
    renameSuffix: "-orig",
    script: std
      .file(std.indoc`
        #!/usr/bin/env sh
        script_dir=$(cd "$(dirname -- "$0")" && pwd -P)
        top_dir=$(cd "$script_dir/.." && pwd -P)
        "$0-orig" --prepend-include="$top_dir/share/autoconf" "$@"
      `)
      .withPermissions({ executable: true }),
  });

  return autoconf;
});
