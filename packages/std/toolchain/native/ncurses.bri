import * as std from "/core";
import stage2 from "/toolchain/stage2";

export default std.memo((): std.Recipe<std.Directory> => {
  const source = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/ncurses-6.4.tar.gz",
  )
    .unarchive("tar", "gzip")
    .peel();

  let ncurses = std
    .process({
      command: std.tpl`${stage2}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          ./configure \
            --prefix=/ \
            --with-shared \
            --without-debug \
            --without-normal \
            --with-cxx-shared \
            --enable-pc-files \
            --enable-widec \
            --with-pkg-config-libdir=/lib/pkgconfig
          make
          make install DESTDIR="$BRIOCHE_OUTPUT"
        `,
      ],
      env: {
        PATH: std.tpl`${stage2}/bin`,
      },
      workDir: source,
    })
    .toDirectory();

  for (const lib of ["ncurses", "form", "panel", "menu"]) {
    ncurses = ncurses.insert(`lib/lib${lib}.so`, std.file(`INPUT(-l${lib}w)`));
    ncurses = ncurses.insert(
      `lib/pkgconfig/${lib}.pc`,
      std.symlink({ target: `${lib}w.pc` }),
    );
  }

  ncurses = ncurses.insert("lib/libcursesw.so", std.file("INPUT(-lncursesw)"));
  ncurses = ncurses.insert(
    "lib/libcurses.so",
    std.symlink({ target: "libncurses.so" }),
  );

  return ncurses;
});
