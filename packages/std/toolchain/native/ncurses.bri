import * as std from "/core";
import stage2 from "/toolchain/stage2";

export default std.memo((): std.Recipe<std.Directory> => {
  const sourceArchive = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/ncurses-6.4.tar.gz",
  );

  return std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-c",
        std.indoc`
          set -euo pipefail

          tar -xf "$source" --strip-components=1 --no-same-owner --no-same-permissions

          ./configure \
            --prefix=/ \
            --with-shared \
            --without-debug \
            --without-normal \
            --with-cxx-shared \
            --enable-pc-files \
            --enable-widec \
            --with-pkg-config-libdir=/lib/pkgconfig
          make
          make install DESTDIR="$BRIOCHE_OUTPUT"

          for lib in ncurses form panel menu ; do
            rm -f "$BRIOCHE_OUTPUT"/lib/lib\${lib}.so
            echo "INPUT(-l\${lib}w)" > "$BRIOCHE_OUTPUT"/lib/lib\${lib}.so
            ln -sf \${lib}w.pc "$BRIOCHE_OUTPUT"/lib/pkgconfig/\${lib}.pc
          done

          rm -f "$BRIOCHE_OUTPUT"/lib/libcursesw.so
          echo "INPUT(-lncursesw)" > "$BRIOCHE_OUTPUT"/lib/libcursesw.so
          ln -sf libncurses.so "$BRIOCHE_OUTPUT"/lib/libcurses.so
        `,
      ],
      env: {
        source: sourceArchive,
        PATH: std.tpl`${stage2()}/bin`,
      },
    })
    .toDirectory();
});
