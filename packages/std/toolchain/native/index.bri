import * as std from "/core";
import { setEnv } from "/extra/set_env.bri";
import stage2 from "/toolchain/stage2";
import { buildAutopackConfig, AutopackOptions } from "/extra/autopack.bri";
import { runtimeUtils, useBriocheStrip } from "/toolchain/utils.bri";
import linuxHeaders from "./linux_headers.bri";
import glibc from "./glibc.bri";
import zlib from "./zlib.bri";
import bzip2 from "./bzip2.bri";
import xz from "./xz.bri";
import zstd from "./zstd.bri";
import file from "./file.bri";
import readline from "./readline.bri";
import m4 from "./m4.bri";
import bc from "./bc.bri";
import flex from "./flex.bri";
import binutils from "./binutils.bri";
import gmp from "./gmp.bri";
import mpfr from "./mpfr.bri";
import mpc from "./mpc.bri";
import attr from "./attr.bri";
import acl from "./acl.bri";
import libxcrypt from "./libxcrypt.bri";
import gcc from "./gcc.bri";
import pkgconf from "./pkgconf.bri";
import ncurses from "./ncurses.bri";
import sed from "./sed.bri";
import psmisc from "./psmisc.bri";
import gettext from "./gettext.bri";
import bison from "./bison.bri";
import grep from "./grep.bri";
import bash from "./bash.bri";
import libtool from "./libtool.bri";
import gdbm from "./gdbm.bri";
import gperf from "./gperf.bri";
import expat from "./expat.bri";
import inetutils from "./inetutils.bri";
import less from "./less.bri";
import perl from "./perl.bri";
import perlXmlParser from "./perl_xml_parser.bri";
import intltool from "./intltool.bri";
import autoconf from "./autoconf.bri";
import automake from "./automake.bri";
import libelf from "./libelf.bri";
import coreutils from "./coreutils.bri";
import diffutils from "./diffutils.bri";
import gawk from "./gawk.bri";
import findutils from "./findutils.bri";
import groff from "./groff.bri";
import gzip from "./gzip.bri";
import libpipeline from "./libpipeline.bri";
import make from "./make.bri";
import patch from "./patch.bri";
import tar from "./tar.bri";
import texinfo from "./texinfo.bri";
import manDb from "./man_db.bri";
import procpsNg from "./procps_ng.bri";
import utilLinux from "./util_linux.bri";
import which from "./which.bri";
import patchelf from "./patchelf.bri";

export { bash };

const toolPackages = [
  zlib,
  bzip2,
  xz,
  zstd,
  file,
  bc,
  sed,
  grep,
  bash,
  coreutils,
  diffutils,
  gawk,
  findutils,
  gzip,
  make,
  patch,
  tar,
  which,
];

const toolchainOnlyPackages = [
  linuxHeaders,
  glibc,
  readline,
  m4,
  flex,
  binutils,
  gmp,
  mpfr,
  mpc,
  attr,
  acl,
  libxcrypt,
  gcc,
  pkgconf,
  ncurses,
  psmisc,
  gettext,
  bison,
  libtool,
  gdbm,
  gperf,
  expat,
  inetutils,
  less,
  perl,
  perlXmlParser,
  intltool,
  autoconf,
  automake,
  libelf,
  groff,
  libpipeline,
  texinfo,
  manDb,
  procpsNg,
  utilLinux,
  patchelf,
];

/**
 * Returns a set of common Unix-style utilities
 */
export const tools = std.memo(async (): Promise<std.Recipe<std.Directory>> => {
  let tools = std.merge(...toolPackages);

  // Pack binaries and scripts
  tools = autopack(tools, {
    globs: ["bin/**"],
    linkDependencies: [toolchain],
    dynamicBinaryConfig: {
      enabled: true,
    },
    sharedLibraryConfig: {
      enabled: false,
    },
    scriptConfig: {
      enabled: true,
    },
    repackConfig: {
      enabled: true,
    },
  });

  // Only take the binaries (plus the magic file)
  tools = std.directory({
    bin: tools.get("bin"),
    share: std.directory({
      misc: std.directory({
        "magic.mgc": tools.get("share/misc/magic.mgc"),
      }),
    }),
  });

  // Set `$MAGIC` env var for `file` when used as a dependency
  tools = setEnv(tools, {
    MAGIC: { append: [{ path: "share/misc/magic.mgc" }] },
  });

  return tools;
});

/**
 * Returns a complete toolchain, including a C compiler and common libraries.
 * Includes all tools from `tools`.
 */
export const toolchain = std.memo(
  async (): Promise<std.Recipe<std.Directory>> => {
    // Merge all the packages
    const unpackedToolchain = std.merge(
      ...toolchainOnlyPackages,
      ...toolPackages,
    );

    let toolchain = unpackedToolchain;

    // Add a symlink for the C compiler
    toolchain = toolchain.insert("bin/cc", std.symlink({ target: "gcc" }));

    // Fix broken library symlinks
    toolchain = toolchain.insert(
      "lib/libuuid.so",
      std.symlink({ target: "libuuid.so.1" }),
    );
    toolchain = toolchain.insert(
      "lib/libblkid.so",
      std.symlink({ target: "libblk.id.so.1" }),
    );
    toolchain = toolchain.insert(
      "lib/libsmartcols.so",
      std.symlink({ target: "libsmartcols.so.1" }),
    );
    toolchain = toolchain.insert(
      "lib/libfdisk.so",
      std.symlink({ target: "libfdisk.so.1" }),
    );
    toolchain = toolchain.insert(
      "lib/libmount.so",
      std.symlink({ target: "libmount.so.1" }),
    );

    // Add a symlink that libtool needs
    toolchain = toolchain.insert(
      "share/libtool/m4",
      std.symlink({ target: "../aclocal" }),
    );

    // Set env vars when used as a dependency. These are also used
    // when autopacking
    toolchain = setEnv(toolchain, {
      // Library paths for shared libraries
      LIBRARY_PATH: {
        append: [
          { path: "lib" },
          { path: "lib/man-db" },
          { path: "lib/gconv" },
        ],
      },

      // Perl library paths
      PERL5LIB: {
        append: [{ path: "share/autoconf" }, { path: "share/automake-1.16" }],
      },

      // pkg-config search paths
      PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },

      // CMake package paths
      CMAKE_PREFIX_PATH: { append: [{ path: "." }] },
      ZLIB_ROOT: { fallback: { path: "." } },
      LIBLZMA_ROOT: { fallback: { path: "." } },

      // Bison data dir
      BISON_PKGDATADIR: { fallback: { path: "share/bison" } },

      // Magic patterns used by `file`
      MAGIC: { append: [{ path: "share/misc/magic.mgc" }] },

      // Autotools env vars
      AUTOCONF: { fallback: { path: "bin/autoconf" } },
      AUTOHEADER: { fallback: { path: "bin/autoheader" } },
      AUTOM4TE: { fallback: { path: "bin/autom4te" } },
      autom4te_perllibdir: { fallback: { path: "share/autoconf" } },
      AC_MACRODIR: { fallback: { path: "share/autoconf" } },
      trailer_m4: { fallback: { path: "share/autoconf/autoconf/trailer.m4" } },
      ACLOCAL_PATH: { append: [{ path: "share/aclocal" }] },
      ACLOCAL_AUTOMAKE_DIR: { fallback: { path: "share/aclocal-1.16" } },
      AUTOMAKE_LIBDIR: { fallback: { path: "share/automake-1.16" } },
      AUTOMAKE_UNINSTALLED: { fallback: { value: "1" } },
      _lt_pkgdatadir: { fallback: { path: "share/libtool" } },

      // Programs that autotools uses. These default to absolute paths,
      // setting them to just the name will resolve them using `$PATH` instead
      M4: { fallback: { value: "m4" } },
      SED: { fallback: { value: "sed" } },
      GREP: { fallback: { value: "grep" } },
      EGREP: { fallback: { value: "grep -E" } },
      FGREP: { fallback: { value: "grep -F" } },
      NM: { fallback: { value: "nm -B" } },
      LD: { fallback: { value: "ld" } },
    });

    // Re-pack all dynamic binaries and shared libraries
    toolchain = autopack(toolchain, {
      globs: ["**"],
      excludeGlobs: ["lib/libc.so*", "bin/.brioche-ld-orig*"],
      selfDependency: true,
      dynamicBinaryConfig: {
        enabled: true,
      },
      sharedLibraryConfig: {
        enabled: true,
      },
      scriptConfig: {
        enabled: false,
      },
      repackConfig: {
        enabled: true,
      },
    });

    // Repack `ld` and friends to include `libm`. `liblto_plugin.so` links
    // against `libm`, which gets dynamically loaded. But since e.g. `ld.bfd`
    // doesn't depend on `libm`, we need to manually include it
    toolchain = autopack(toolchain, {
      globs: ["bin/.brioche-ld-orig-*"],
      selfDependency: true,
      dynamicBinaryConfig: {
        enabled: true,
        extraLibraries: ["libm.so.6"],
      },
      sharedLibraryConfig: {
        enabled: true,
      },
      scriptConfig: {
        enabled: false,
      },
      repackConfig: {
        enabled: true,
      },
    });

    toolchain = useBriocheStrip(toolchain, {
      stripPaths: ["bin/strip"],
    });

    toolchain = fixShebangs(toolchain);
    toolchain = pkgConfigMakePathsRelative(toolchain);

    return toolchain;
  },
);

function autopack(
  recipe: std.RecipeLike<std.Directory>,
  options: AutopackOptions,
): std.Recipe<std.Directory> {
  const { config, variables } = buildAutopackConfig({
    options,
    defaultLinkDependencies: [],
    runtimeUtils: runtimeUtils(),
  });

  const variableArgs: std.ProcessTemplateLike[] = Object.entries(
    variables,
  ).flatMap(([name, value]) => {
    switch (value.type) {
      case "path":
        return ["--var", std.tpl`${name}=path:${value.value}`];
    }
  });

  return std
    .process({
      command: std.tpl`${runtimeUtils}/bin/brioche-packer`,
      args: [
        "autopack",
        std.outputPath,
        "--config",
        JSON.stringify(config),
        ...variableArgs,
      ],
      outputScaffold: recipe,
    })
    .toDirectory();
}

function fixShebangs(
  recipe: std.RecipeLike<std.Directory>,
): std.Recipe<std.Directory> {
  // TODO: Handle shebangs with wrapper scripts instead of just using
  // `/usr/bin/env`. This currently duplicates the fix from stage 2
  return std
    .process({
      command: std.tpl`${stage2}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          find "$BRIOCHE_OUTPUT"/bin -type f -executable -print0 \
            | while IFS= read -r -d $'\\0' file; do
              if [ "$(head -c 2 "$file")" == "#!" ]; then
                awk '
                  {
                    if (NR == 1 && $0 ~ /^#!/) {
                      shebangInvocation = $0
                      gsub(/^#! */, "", shebangInvocation)
                      numShebangWords = split(shebangInvocation, shebangWords, / +/)
                      if (numShebangWords == 1) {
                        shebangCommand = shebangWords[1]
                        numComponents = split(shebangCommand, shebangCommandComponents, "/")
                        targetCommand = shebangCommandComponents[numComponents]
                        gsub(" ", "", targetCommand)
                        print "#!/usr/bin/env " targetCommand
                      } else {
                        print $0
                      }
                    } else {
                      print $0
                    }
                  }
                ' "$file" > temp
                chmod +x temp
                mv temp "$file"
              fi
            done
        `,
      ],
      env: {
        PATH: std.tpl`${stage2}/bin`,
      },
      outputScaffold: recipe,
    })
    .toDirectory();
}

function pkgConfigMakePathsRelative(
  recipe: std.RecipeLike<std.Directory>,
): std.Recipe<std.Directory> {
  // Replaces things that look like absolute paths in pkg-config files with
  // relative paths (using the `${pcfiledir}` variable)
  return std
    .process({
      command: std.tpl`${stage2}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          find "$BRIOCHE_OUTPUT"/lib/pkgconfig -name '*.pc' -type f -print0 \
            | while IFS= read -r -d $'\\0' file; do
              sed -i 's|=/|=\${pcfiledir}/../../|' "$file"
            done
        `,
      ],
      env: {
        PATH: std.tpl`${stage2}/bin`,
      },
      outputScaffold: recipe,
    })
    .toDirectory();
}
