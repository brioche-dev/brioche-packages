import * as std from "/core";
import stage2 from "/toolchain/stage2";
import perl from "./perl.bri";
import perlXmlParser from "./perl_xml_parser.bri";
import expat from "./expat.bri";

export default std.memo((): std.Recipe<std.Directory> => {
  let source = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/intltool-0.51.0.tar.gz",
  )
    .unarchive("tar", "gzip")
    .peel();

  source = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          cd "$BRIOCHE_OUTPUT"
          sed -i 's:\\\\\\\${:\\\\\\\$\\\\{:' intltool-update.in
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
      },
      outputScaffold: source,
    })
    .toDirectory();

  const perlDep = std.merge(perl(), perlXmlParser());

  return std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          ./configure --prefix=/
          make
          make install DESTDIR="$BRIOCHE_OUTPUT"
        `,
      ],
      env: {
        PATH: std.tpl`${perlDep}/bin:${stage2()}/bin`,

        // expat is dynamically loaded by the Perl XML::Parser module
        LD_LIBRARY_PATH: std.tpl`${expat()}/lib`,
      },
      workDir: source,
    })
    .toDirectory();
});
