import * as std from "/core";
import { currentPlatformInfo } from "/toolchain/stage0";
import stage2 from "/toolchain/stage2";

export default std.memo((): std.Recipe<std.Directory> => {
  const platformInfo = currentPlatformInfo();
  let source = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/glibc-2.38.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();
  const sourcePatchFhs = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/patches/glibc-2.38-fhs-1.patch",
  );
  const sourcePatchMemalign = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/patches/glibc-2.38-memalign_fix-1.patch",
  );

  source = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          cd "$BRIOCHE_OUTPUT"
          patch -Np1 -i "$sourcePatchFhs"
          patch -Np1 -i "$sourcePatchMemalign"
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
        sourcePatchFhs,
        sourcePatchMemalign,
      },
      outputScaffold: source,
    })
    .toDirectory();

  let glibc = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          mkdir build
          cd build

          echo "rootsbindir=/sbin" > configparms

          export PYTHONHOME="$stage2/usr"
          export M4=m4
          export MAGIC="$stage2/usr/share/misc/magic"

          ../configure \
            --prefix=/ \
            --enable-kernel=4.14 \
            --enable-stack-protector=strong \
            --with-headers="$stage2/usr/include" \
            libc_cv_slibdir=/lib

          export BRIOCHE_LD_AUTOPACK=false
          make
          sed '/test-installation/s@$(PERL)@echo not running@' -i ../Makefile
          make install DESTDIR="$BRIOCHE_OUTPUT"
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
        stage2: stage2(),
      },
      workDir: source,
    })
    .toDirectory();

  if (platformInfo.arch === "x86_64") {
    glibc = glibc.insert(
      "lib64",
      std.directory({
        "ld-linux-x86-64.so.2": std.symlink({
          target: "../lib/ld-linux-x86-64.so.2",
        }),
      }),
    );
  }

  return glibc;
});
