import * as std from "/core";
import { runtimeUtils } from "../utils.bri";

interface BootstrapRunOptions {
  script: string;
  env?: Record<string, std.ProcessTemplateLike>;
}

export function bootstrapRun(
  options: BootstrapRunOptions,
): std.Recipe<std.Directory> {
  const bootstrapRootfs = Brioche.download(
    "https://development-content.brioche.dev/github.com/brioche-dev/brioche-bootstrap/99ab9787d5ee27eb613227131e23d2c651de318a/aarch64-linux/brioche-bootstrap.tar.zstd",
  ).unarchive("tar", "zstd");

  const busybox = Brioche.download(
    "https://development-content.brioche.dev/github.com/tangramdotdev/bootstrap/2022-10-31/busybox_arm64_linux.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel(1);

  const briocheLd = runtimeUtils().get("bin/brioche-ld");
  const briochePacked = runtimeUtils().get("bin/brioche-packed-exec");

  const bootstrapScript = std
    .file(options.script)
    .withPermissions({ executable: true });

  const enterBootstrapChrootScript = std
    .file(std.indoc`
      #!/usr/bin/env sh
      set -eu

      "$BUSYBOX/bin/busybox" mkdir -p "$BRIOCHE_OUTPUT"
      "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/hostfs"
      "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/proc"
      "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/sys"
      "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/dev"
      "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/$BUSYBOX"
      "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/$HOME"
      "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/$BRIOCHE_OUTPUT"
      "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/$BRIOCHE_RESOURCE_DIR"

      "$BUSYBOX/bin/busybox" mount --rbind "$(pwd)/rootfs" "$(pwd)/rootfs"
      "$BUSYBOX/bin/busybox" mount --rbind "/proc" "$(pwd)/rootfs/proc"
      "$BUSYBOX/bin/busybox" mount --rbind "/sys" "$(pwd)/rootfs/sys"
      "$BUSYBOX/bin/busybox" mount --rbind "/dev" "$(pwd)/rootfs/dev"
      "$BUSYBOX/bin/busybox" mount --rbind "$BUSYBOX" "$(pwd)/rootfs/$BUSYBOX"
      "$BUSYBOX/bin/busybox" mount --rbind "$HOME" "$(pwd)/rootfs/$HOME"
      "$BUSYBOX/bin/busybox" mount --rbind "$BRIOCHE_OUTPUT" "$(pwd)/rootfs/$BRIOCHE_OUTPUT"
      "$BUSYBOX/bin/busybox" mount --rbind "$BRIOCHE_RESOURCE_DIR" "$(pwd)/rootfs/$BRIOCHE_RESOURCE_DIR"

      "$BUSYBOX/bin/busybox" mkdir -p "$HOME/.local/libexec/brioche-toolchain/bin" "$HOME/.local/libexec/brioche-toolchain/libexec/brioche-ld/lib"
      "$BUSYBOX/bin/busybox" cp "$BRIOCHE_LD" "$HOME/.local/libexec/brioche-toolchain/bin/brioche-ld"
      "$BUSYBOX/bin/busybox" cp "$BRIOCHE_PACKED" "$HOME/.local/libexec/brioche-toolchain/libexec/brioche-ld/brioche-packed"
      "$BUSYBOX/bin/busybox" chmod +x "$HOME/.local/libexec/brioche-toolchain/bin/brioche-ld" "$HOME/.local/libexec/brioche-toolchain/libexec/brioche-ld/brioche-packed"
      "$BUSYBOX/bin/busybox" ln -s "/usr/bin/ld" "$HOME/.local/libexec/brioche-toolchain/libexec/brioche-ld/ld"
      "$BUSYBOX/bin/busybox" ln -s "/lib/ld-linux-aarch64.so.1" "$HOME/.local/libexec/brioche-toolchain/libexec/brioche-ld/lib/"
      "$BUSYBOX/bin/busybox" ln -s "brioche-ld" "$HOME/.local/libexec/brioche-toolchain/bin/ld"
      "$BUSYBOX/bin/busybox" ln -s "brioche-ld" "$HOME/.local/libexec/brioche-toolchain/bin/aarch64-linux-gnu-ld"

      export PATH="$HOME/.local/libexec/brioche-toolchain/bin\${PATH:+:$PATH}"

      "$BUSYBOX/bin/busybox" pivot_root "$(pwd)/rootfs" "$(pwd)/rootfs/hostfs"
      /bin/bash /bootstrap.sh
    `)
    .withPermissions({ executable: true });

  return std
    .process({
      command: std.tpl`${busybox}/bin/busybox`,
      args: ["unshare", "-Umfr", enterBootstrapChrootScript],
      env: {
        BUSYBOX: busybox,
        BRIOCHE_LD: briocheLd,
        BRIOCHE_PACKED: briochePacked,
        ...options.env,
      },
      workDir: std.directory({
        rootfs: std.merge(
          bootstrapRootfs,
          std.directory({
            "bootstrap.sh": bootstrapScript,
          }),
        ),
      }),
    })
    .toDirectory();
}

export default async (): Promise<std.Recipe> => {
  const utils = Brioche.download(
    "https://development-content.brioche.dev/github.com/tangramdotdev/bootstrap/2023-07-06/utils_arm64_linux.tar.zstd",
  ).unarchive("tar", "zstd");

  const toolchain = Brioche.download(
    "https://development-content.brioche.dev/github.com/tangramdotdev/bootstrap/2023-07-06/toolchain_arm64_linux.tar.zstd",
  ).unarchive("tar", "zstd");

  // const make = Brioche.download(
  //   "https://development-content.brioche.dev/github.com/tangramdotdev/bootstrap/2022-10-31/make_static_linux_arm64.tar.xz",
  // ).unarchive("tar", "xz");
  const make = std.directory();

  const briocheLd = runtimeUtils().get("bin/brioche-ld");
  const briochePacked = runtimeUtils().get("bin/brioche-packed-exec");

  const briochePack = std.directory({
    "aarch64-linux-musl": std.directory({
      bin: std.directory({
        "brioche-ld": briocheLd,
      }),
      libexec: std.directory({
        "brioche-ld": std.directory({
          ld: std.symlink({ target: "../../bin/system-ld" }),
          "brioche-packed": briochePacked,
          lib: std.directory({
            "ld-musl-aarch64.so.1": std.symlink({
              target: "../../../../lib/ld-musl-aarch64.so.1",
            }),
          }),
        }),
      }),
    }),
  });

  let stage0 = std.merge(utils, toolchain, make, briochePack);

  const systemLd = stage0.get("aarch-linux-musl/bin/ld");
  stage0 = stage0.insert("aarch-linux-musl/bin/system-ld", systemLd);
  stage0 = stage0.insert(
    "aarch64-linux-musl/bin/ld",
    std.symlink({ target: "brioche-ld" }),
  );
  stage0 = stage0.insert(
    "bin/ld",
    std.symlink({ target: "../aarch64-linux-musl/bin/ld" }),
  );

  return stage0;
};
