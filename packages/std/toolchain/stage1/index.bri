import * as std from "/core";
import binutils from "./1_01_binutils.bri";
import gcc from "./1_02_gcc.bri";
import linuxHeaders from "./1_03_linux_headers.bri";
import glibc from "./1_04_glibc.bri";
import libstdcpp from "./1_05_libstdcpp.bri";
import { currentPlatformInfo } from "../stage0";
import { useBriocheLd, wrapWithScript } from "../utils.bri";

export { default as linuxHeaders } from "./1_03_linux_headers.bri";
export { default as glibc } from "./1_04_glibc.bri";
export { default as libstdcpp } from "./1_05_libstdcpp.bri";

export default std.memo(() => {
  const platformInfo = currentPlatformInfo();
  let stage1 = std.merge(binutils, gcc, linuxHeaders, glibc, libstdcpp);

  stage1 = stage1.insert("bin", std.symlink({ target: "usr/bin" }));

  stage1 = useBriocheLd(stage1, {
    ldPaths: [
      `usr/bin/${platformInfo.arch}-lfs-linux-gnu-ld`,
      `usr/bin/${platformInfo.arch}-lfs-linux-gnu-ld.bfd`,
      `usr/${platformInfo.arch}-lfs-linux-gnu/bin/ld`,
      `usr/${platformInfo.arch}-lfs-linux-gnu/bin/ld.bfd`,
    ],
    interpreterPaths: {
      [platformInfo.dynamicLinkerPath]: platformInfo.dynamicLinkerPath,
    },
  });

  stage1 = wrapWithScript(stage1, {
    paths: [
      `usr/bin/${platformInfo.arch}-lfs-linux-gnu-g++`,
      `usr/bin/${platformInfo.arch}-lfs-linux-gnu-gcc`,
    ],
    renameSuffix: "-orig",
    script: std
      .file(std.indoc`
        #!/usr/bin/env sh
        script_dir=$(cd "$(dirname -- "$0")" && pwd -P)
        sysroot=$(cd "$script_dir/../.." && pwd -P)
        "$0-orig" --sysroot="$sysroot" -isystem "$sysroot/${platformInfo.arch}-lfs-linux-gnu/include/c++/13.2.0/${platformInfo.arch}-lfs-linux-gnu" -isystem "$sysroot/${platformInfo.arch}-lfs-linux-gnu/include/c++/13.2.0" -isystem "$sysroot/usr/include" "$@"
      `)
      .withPermissions({ executable: true }),
  });

  return stage1;
});
