import * as std from "/core";
import { bootstrapRun } from "/toolchain/stage0";
import binutils from "./1_01_binutils.bri";

export default std.memo(async (): Promise<std.Recipe<std.Directory>> => {
  let source = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/gcc-13.2.0.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();
  const mpfr = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/mpfr-4.2.0.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();
  const gmp = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/gmp-6.3.0.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();
  const mpc = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/mpc-1.3.1.tar.gz",
  )
    .unarchive("tar", "gzip")
    .peel();

  source = source.insert("mpfr", mpfr);
  source = source.insert("gmp", gmp);
  source = source.insert("mpc", mpc);

  source = bootstrapRun({
    script: std.indoc`
      cd "$BRIOCHE_OUTPUT"
      sed -e '/m64=/s/lib64/lib/' -i gcc/config/i386/t-linux64
      sed -e '/mabi.lp64=/s/lib64/lib/' -i gcc/config/aarch64/t-aarch64-linux
    `,
    outputScaffold: source,
  });

  const stage1 = binutils();

  return bootstrapRun({
    script: std.indoc`
      export PATH="$stage1/usr/bin:$SYSTEM_TOOLCHAIN_PATH\${PATH:+:$PATH}"

      mkdir -p build
      cd build

      ../configure \
        --prefix=/usr \
        --target="$TARGET" \
        --with-build-sysroot="$stage1" \
        --with-glibc-version=2.38 \
        --with-newlib \
        --without-headers \
        --enable-default-pie \
        --enable-default-ssp \
        --disable-nls \
        --disable-shared \
        --disable-multilib \
        --disable-threads \
        --disable-libatomic \
        --disable-libgomp \
        --disable-libquadmath \
        --disable-libssp \
        --disable-libvtv \
        --disable-libstdcxx \
        --enable-languages=c,c++
      make
      make install DESTDIR="$BRIOCHE_OUTPUT"

      cd ..
      cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
        "$(dirname "$("$BRIOCHE_OUTPUT/usr/bin/$TARGET-gcc" -print-libgcc-file-name)")"/include/limits.h
    `,
    env: {
      BRIOCHE_OUTPUT: std.outputPath,
      TARGET: "x86_64-lfs-linux-gnu",
      stage1,
    },
    workDir: source,
  });
});
