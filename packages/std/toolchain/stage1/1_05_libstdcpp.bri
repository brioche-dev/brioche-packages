import * as std from "/core";
import { bootstrapRun } from "/toolchain/stage0";
import binutils from "./1_01_binutils.bri";
import gcc from "./1_02_gcc.bri";
import linuxHeaders from "./1_03_linux_headers.bri";
import glibc from "./1_04_glibc.bri";
import { wrapWithScript, useBriocheLd } from "../utils.bri";

export default std.memo(async (): Promise<std.Recipe<std.Directory>> => {
  const source = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/gcc-13.2.0.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();

  let stage1 = std.merge(binutils(), gcc(), linuxHeaders(), glibc());

  stage1 = wrapWithScript(stage1, {
    paths: ["usr/bin/x86_64-lfs-linux-gnu-gcc"],
    renameSuffix: "-orig",
    script: std
      .file(std.indoc`
        #!/usr/bin/env sh
        sysroot=$(cd "$(dirname -- "$0")/../.." && pwd)
        "$0-orig" --sysroot="$sysroot" -isystem "$sysroot/usr/include" "$@"
      `)
      .withPermissions({ executable: true }),
  });

  stage1 = useBriocheLd(stage1, {
    ldPaths: [
      "usr/bin/x86_64-lfs-linux-gnu-ld",
      "usr/bin/x86_64-lfs-linux-gnu-ld.bfd",
      "usr/x86_64-lfs-linux-gnu/bin/ld",
      "usr/x86_64-lfs-linux-gnu/bin/ld.bfd",
    ],
    interpreterPaths: {
      "lib64/ld-linux-x86-64.so.2": "lib64/ld-linux-x86-64.so.2",
    },
  });

  return bootstrapRun({
    script: std.indoc`
      export PATH="$stage1/usr/bin:$SYSTEM_TOOLCHAIN_PATH\${PATH:+:$PATH}"

      mkdir -p build
      cd build

      export CFLAGS="--sysroot=$stage1 -isystem $stage1/usr/include"
      export CXXFLAGS="$CFLAGS"
      export LDFLAGS="--sysroot=$stage1"

      ../libstdc++-v3/configure \
        --prefix=/usr \
        --host="$TARGET" \
        --build="$(../config.guess)" \
        --disable-multilib \
        --disable-nls \
        --disable-libstdcxx-pch \
        --with-gxx-include-dir="/$TARGET/include/c++/13.2.0"

      make
      make install DESTDIR="$BRIOCHE_OUTPUT"

      rm -fv "$BRIOCHE_OUTPUT"/usr/lib{,64}/lib{stdc++,stdc++fs,supc++}.la
    `,
    env: {
      BRIOCHE_OUTPUT: std.outputPath,
      TARGET: "x86_64-lfs-linux-gnu",
      stage1,
    },
    workDir: source,
  });
});
