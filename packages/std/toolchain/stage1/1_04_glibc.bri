import * as std from "/core";
import { runtimeUtils } from "../utils.bri";
import { bootstrapRun } from "/toolchain/stage0";
import binutils from "./1_01_binutils.bri";
import gcc from "./1_02_gcc.bri";
import linuxHeaders from "./1_03_linux_headers.bri";

export default std.memo((): std.Recipe<std.Directory> => {
  const sourceArchive = std.download({
    url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/glibc-2.38.tar.xz",
    hash: std.sha256Hash(
      "fb82998998b2b29965467bc1b69d152e9c307d2cf301c9eafb4555b770ef3fd2",
    ),
  });
  const sourcePatch = std.download({
    url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/patches/glibc-2.38-fhs-1.patch",
    hash: std.sha256Hash(
      "643552db030e2f2d7ffde4f558e0f5f83d3fabf34a2e0e56ebdb49750ac27b0d",
    ),
  });

  const briochePacked = runtimeUtils().get("bin/brioche-packed-exec");
  const briochePacker = runtimeUtils().get("bin/brioche-packer");

  const stage1 = std.merge(binutils(), gcc(), linuxHeaders());

  let glibc = bootstrapRun({
    script: std.indoc`
      set -euo pipefail

      export PATH="$stage1/usr/bin:/usr/lib/gcc/x86_64-linux-gnu/12\${PATH:+:$PATH}"

      mkdir -p source
      tar -xf "$source" -C source --strip-components=1 --no-same-owner --no-same-permissions
      cd source

      mkdir "$BRIOCHE_OUTPUT/lib"

      mkdir -p "$HOME/.local/libexec/brioche-toolchain/libexec/brioche-ld/usr/lib"
      ln -s "/lib64/ld-linux-x86-64.so.2" "$HOME/.local/libexec/brioche-toolchain/libexec/brioche-ld/usr/lib/"

      case $(uname -m) in
        i?86)
          ln -sfv ld-linux.so.2 "$BRIOCHE_OUTPUT/lib/ld-lsb.so.3"
          ;;
        x86_64)
          mkdir "$BRIOCHE_OUTPUT/lib64"
          ln -sfv ../lib/ld-linux-x86-64.so.2 "$BRIOCHE_OUTPUT/lib64"
          ln -sfv ../lib/ld-linux-x86-64.so.2 "$BRIOCHE_OUTPUT/lib64/ld-lsb-x86-64.so.3"
          ;;
      esac

      patch -Np1 -i "$sourcePatch"

      mkdir build
      cd build

      echo "rootsbindir=/sbin" > configparms

      ../configure \
        --prefix=/usr \
        --host="$TARGET" \
        --build="$(../scripts/config.guess)" \
        --enable-kernel=4.14 \
        --with-headers="$stage1/usr/include" \
        libc_cv_slibdir=/lib

      make
      make install DESTDIR="$BRIOCHE_OUTPUT"
    `,
    env: {
      source: sourceArchive,
      sourcePatch,
      BRIOCHE_OUTPUT: std.outputPath,
      TARGET: "x86_64-lfs-linux-gnu",
      stage1,
    },
  });

  glibc = bootstrapRun({
    script: std.indoc`
      set -euo pipefail

      export PATH="$stage1/usr/bin:/usr/lib/gcc/x86_64-linux-gnu/12\${PATH:+:$PATH}"

      mkdir -p "$BRIOCHE_OUTPUT"
      cp -r "$glibc"/* "$BRIOCHE_OUTPUT"

      "$packer" \
        autowrap \
        "$BRIOCHE_OUTPUT" \
        --var "packed=path:$packed" \
        --var "lib=path:$BRIOCHE_OUTPUT/lib" \
        --var "usr_lib=path:$BRIOCHE_OUTPUT/usr/lib" \
        --config '{
          "globs": [
            "usr/bin/**"
          ],
          "selfDependency": true,
          "dynamicBinary": {
            "packedExecutable": {
              "variable": "packed"
            },
            "libraryPaths": [
              {
                "variable": "lib"
              },
              {
                "variable": "usr_lib"
              }
            ]
          }
        }'
    `,
    env: {
      BRIOCHE_OUTPUT: std.outputPath,
      stage1,
      glibc,
      packer: briochePacker,
      packed: briochePacked,
    },
  });

  return glibc;
});
