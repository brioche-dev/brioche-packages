import * as std from "/core";
import { bootstrapRun, currentPlatformInfo } from "../stage0";
import stage1 from "../stage1";

export default std.memo(async (): Promise<std.Recipe<std.Directory>> => {
  const source = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/coreutils-9.3.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();

  return bootstrapRun({
    script: std.indoc`
      export PATH="$stage1/usr/bin:$SYSTEM_TOOLCHAIN_PATH\${PATH:+:$PATH}"

      ./configure \
        --prefix=/usr \
        --host="$TARGET" \
        --build="$(./build-aux/config.guess)" \
        --enable-install-program=hostname \
        --enable-no-install-program=kill,uptime \
        gl_cv_macro_MB_CUR_MAX_good=y

      make
      make install DESTDIR="$BRIOCHE_OUTPUT"

      mkdir -p "$BRIOCHE_OUTPUT/usr/sbin" "$BRIOCHE_OUTPUT/usr/share/man/man8"
      mv "$BRIOCHE_OUTPUT/usr/bin/chroot" "$BRIOCHE_OUTPUT/usr/sbin/"
      mv "$BRIOCHE_OUTPUT/usr/share/man/man1/chroot.1" "$BRIOCHE_OUTPUT/usr/share/man/man8/chroot.8"
      sed -i 's/"1"/"8"/' "$BRIOCHE_OUTPUT/usr/share/man/man8/chroot.8"
    `,
    env: {
      BRIOCHE_OUTPUT: std.outputPath,
      TARGET: `${currentPlatformInfo().arch}-lfs-linux-gnu`,
      stage1: stage1(),
    },
    workDir: source,
  });
});
