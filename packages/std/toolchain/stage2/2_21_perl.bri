import * as std from "/core";
import toolchain from "./2_18_toolchain.bri";

export default std.memo(async (): Promise<std.Recipe<std.Directory>> => {
  const source = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/perl-5.38.0.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();

  let perl = std
    .process({
      command: "/usr/bin/env",
      args: [
        "sh",
        "-euo",
        "pipefail",
        "-c",
        std.indoc`
          sh Configure \
            -des \
            -Dprefix="/usr" \
            -Duserelocatableinc
          make
          make install DESTDIR="$BRIOCHE_OUTPUT"
        `,
      ],
      env: {
        PATH: std.tpl`${toolchain()}/bin`,
      },
      workDir: source,
    })
    .toDirectory();

  // Mark the perl binary as executable
  // TODO: Figure out why Perl isn't executable by default?
  let perlBin = std.castToFile(perl.get("usr/bin/perl"));
  perlBin = perlBin.withPermissions({ executable: true });
  perl = perl.insert("usr/bin/perl", perlBin);

  return perl;
});
