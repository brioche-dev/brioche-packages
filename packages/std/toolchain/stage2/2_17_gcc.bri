import * as std from "/core";
import { useBriocheLd } from "../utils.bri";
import { bootstrapRun, currentPlatformInfo } from "../stage0";
import stage1 from "../stage1";
import m4 from "./2_01_m4.bri";
import ncurses from "./2_02_ncurses.bri";
import bash from "./2_03_bash.bri";
import coreutils from "./2_04_coreutils.bri";
import diffutils from "./2_05_diffutils.bri";
import file from "./2_06_file.bri";
import findutils from "./2_07_findutils.bri";
import gawk from "./2_08_gawk.bri";
import grep from "./2_09_grep.bri";
import gzip from "./2_10_gzip.bri";
import make from "./2_11_make.bri";
import patch from "./2_12_patch.bri";
import sed from "./2_13_sed.bri";
import tar from "./2_14_tar.bri";
import xz from "./2_15_xz.bri";
import binutils from "./2_16_binutils.bri";

export default std.memo(async (): Promise<std.Recipe<std.Directory>> => {
  const platformInfo = currentPlatformInfo();
  let source = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/gcc-13.2.0.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();
  const mpfr = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/mpfr-4.2.0.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();
  const gmp = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/gmp-6.3.0.tar.xz",
  )
    .unarchive("tar", "xz")
    .peel();
  const mpc = Brioche.download(
    "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/mpc-1.3.1.tar.gz",
  )
    .unarchive("tar", "gzip")
    .peel();

  source = source.insert("mpfr", mpfr);
  source = source.insert("gmp", gmp);
  source = source.insert("mpc", mpc);

  source = bootstrapRun({
    script: std.indoc`
      cd "$BRIOCHE_OUTPUT"

      sed -e '/m64=/s/lib64/lib/' -i gcc/config/i386/t-linux64
      sed -e '/mabi.lp64=/s/lib64/lib/' -i gcc/config/aarch64/t-aarch64-linux

      sed '/thread_header =/s/@.*@/gthr-posix.h/' \
        -i libgcc/Makefile.in libstdc++-v3/include/Makefile.in
    `,
    outputScaffold: source,
  });

  let stage2 = std.merge(
    stage1,
    m4,
    ncurses,
    bash,
    coreutils,
    diffutils,
    file,
    findutils,
    gawk,
    grep,
    gzip,
    make,
    patch,
    sed,
    tar,
    xz,
    binutils,
  );

  stage2 = useBriocheLd(stage2, {
    ldPaths: [
      "usr/bin/ld",
      "usr/bin/ld.bfd",
      `usr/${platformInfo.arch}-lfs-linux-gnu/bin/ld`,
      `usr/${platformInfo.arch}-lfs-linux-gnu/bin/ld.bfd`,
    ],
    interpreterPaths: {
      [platformInfo.dynamicLinkerPath]: platformInfo.dynamicLinkerPath,
    },
  });

  const prefixedTools = ["gcc", "gcc-orig", "g++", "g++-orig"];
  for (const tool of prefixedTools) {
    stage2 = stage2.insert(
      `usr/bin/${tool}`,
      std.symlink({ target: `${platformInfo.arch}-lfs-linux-gnu-${tool}` }),
    );
  }

  let gcc = bootstrapRun({
    script: std.indoc`
      export PATH="$stage2/bin:$SYSTEM_TOOLCHAIN_PATH\${PATH:+:$PATH}"

      mkdir build
      cd build

      export CFLAGS="-isystem $stage2/usr/include"
      export CXXFLAGS="-isystem $stage2/usr/include"

      ../configure \
        --build="$(../config.guess)" \
        --host="$TARGET" \
        --target="$TARGET" \
        LDFLAGS_FOR_TARGET="-L$PWD/$TARGET/libgcc" \
        CFLAGS_FOR_TARGET="-g -O2 -isystem $stage2/usr/include" \
        CXXFLAGS_FOR_TARGET="-g -O2 -isystem $stage2/usr/include" \
        CFLAGS_FOR_BUILD="-isystem $stage2/usr/include" \
        CXXFLAGS_FOR_BUILD="-isystem $stage2/usr/include" \
        CFLAGS="-isystem $stage2/usr/include" \
        CXXFLAGS="-isystem $stage2/usr/include" \
        --with-build-sysroot="$stage2" \
        --prefix=/usr \
        --enable-default-pie \
        --enable-default-ssp \
        --disable-nls \
        --disable-multilib \
        --disable-libatomic \
        --disable-libgomp \
        --disable-libquadmath \
        --disable-libsanitizer \
        --disable-libssp \
        --disable-libvtv \
        --enable-languages=c,c++

      make
      make install DESTDIR="$BRIOCHE_OUTPUT"
    `,
    env: {
      BRIOCHE_OUTPUT: std.outputPath,
      TARGET: `${platformInfo.arch}-lfs-linux-gnu`,
      stage2,
    },
    workDir: source,
  });

  gcc = gcc.insert("usr/bin/cc", std.symlink({ target: "gcc" }));

  return gcc;
});
