import * as std from "/core";

// NOTE: This download is just like the `runtimeUtils()` export, except
// it's pinned to a specific version. It should only be updated if the
// tools used for building the toolchain should be upgraded
export function runtimeUtils(): std.Recipe<std.Directory> {
  return std
    .download({
      url: "https://development-content.brioche.dev/github.com/brioche-dev/brioche-runtime-utils/commits/47c4991e9f2d965e5604f8e4a6df93de17db8f77/x86_64-linux/brioche-runtime-utils.tar.zstd",
      hash: std.sha256Hash(
        "a7d95992d56a6fa7e0a138ed54b5855ec4bdead94332eda41d0641d95075c7c7",
      ),
    })
    .unarchive("tar", "zstd");
}

interface UseBriocheLdOptions {
  ldPaths: string[];
  interpreterPaths: Record<string, string>;
}

export function useBriocheLd(
  dir: std.Recipe<std.Directory>,
  options: UseBriocheLdOptions,
): std.Recipe<std.Directory> {
  const briocheLd = runtimeUtils().get("bin/brioche-ld");
  const briochePacked = runtimeUtils().get("bin/brioche-packed-exec");

  for (const ldPath of options.ldPaths) {
    const systemLd = dir.get(ldPath);

    const ldDir = ldPath.split("/").slice(0, -1).join("/");
    const ldParentDirComponents = ldDir.split("/").slice(0, -1);
    const ldName = ldPath.split("/").at(-1);
    const ldParentName = ldDir.split("/").at(-1);
    std.assert(ldName != null && ldParentName != null);

    const briocheLdPath = [
      ...ldParentDirComponents,
      "libexec",
      "brioche-ld",
    ].join("/");
    let briocheLdDir: std.Recipe<std.Directory> = std.directory({
      ld: std.symlink({ target: `../../${ldParentName}/${ldName}-orig` }),
      "brioche-packed": briochePacked,
    });

    for (const [interpreterPath, interpreterTargetPath] of Object.entries(
      options.interpreterPaths,
    )) {
      const interpreterDir = interpreterPath.split("/").slice(0, -1).join("/");
      const pathToBriocheLd = interpreterDir
        .split("/")
        .map(() => "..")
        .join("/");
      const pathToRoot = briocheLdPath
        .split("/")
        .map(() => "..")
        .join("/");
      const interpreterTarget = `${pathToBriocheLd}/${pathToRoot}/${interpreterTargetPath}`;
      briocheLdDir = briocheLdDir.insert(
        interpreterPath,
        std.symlink({ target: interpreterTarget }),
      );
    }

    dir = dir.insert(`${ldDir}/${ldName}-orig`, systemLd);
    dir = dir.insert(ldPath, briocheLd);
    dir = dir.insert(briocheLdPath, briocheLdDir);
  }

  return dir;
}

interface WrapWithScriptOptions {
  paths: string[];
  renameSuffix: string;
  script: std.AsyncRecipe<std.File>;
}

export function wrapWithScript(
  directory: std.AsyncRecipe<std.Directory>,
  options: WrapWithScriptOptions,
): std.Recipe<std.Directory> {
  let dir = std.recipe(directory);

  for (const path of options.paths) {
    const program = dir.get(path);

    dir = dir.insert(path, options.script);
    dir = dir.insert(`${path}${options.renameSuffix}`, program);
  }

  return dir;
}
