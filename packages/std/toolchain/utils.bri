import * as std from "/core";

// NOTE: This download is just like the `runtimeUtils()` export, except
// it's pinned to a specific version. It should only be updated if the
// tools used for building the toolchain should be upgraded
export function runtimeUtils(): std.Recipe<std.Directory> {
  return Brioche.download(
    "https://development-content.brioche.dev/github.com/brioche-dev/brioche-runtime-utils/commits/bd8af11dcd61855df38cc12401f5ddc4ff5466e0/x86_64-linux/brioche-runtime-utils.tar.zstd",
  ).unarchive("tar", "zstd");
}

interface UseBriocheLdOptions {
  ldPaths: string[];
  interpreterPaths: Record<string, string>;
}

export function useBriocheLd(
  dir: std.Recipe<std.Directory>,
  options: UseBriocheLdOptions,
): std.Recipe<std.Directory> {
  const briocheLd = runtimeUtils().get("bin/brioche-ld");
  const briochePacked = runtimeUtils().get("bin/brioche-packed-exec");

  for (const ldPath of options.ldPaths) {
    const systemLd = dir.get(ldPath);

    const ldDir = ldPath.split("/").slice(0, -1).join("/");
    const ldParentDirComponents = ldDir.split("/").slice(0, -1);
    const ldName = ldPath.split("/").at(-1);
    const ldParentDirName = ldDir.split("/").at(-1);
    std.assert(ldName != null && ldParentDirName != null);

    const libexecBriocheLdDir = [
      ...ldParentDirComponents,
      "libexec",
      "brioche-ld",
    ].join("/");

    for (const [interpreterPath, interpreterTargetPath] of Object.entries(
      options.interpreterPaths,
    )) {
      const interpreterDir = interpreterPath.split("/").slice(0, -1).join("/");
      const pathToBriocheLd = interpreterDir
        .split("/")
        .map(() => "..")
        .join("/");
      const pathToRoot = libexecBriocheLdDir
        .split("/")
        .map(() => "..")
        .join("/");
      const interpreterTarget = `${pathToBriocheLd}/${pathToRoot}/${interpreterTargetPath}`;
      dir = dir.insert(
        `${libexecBriocheLdDir}/${interpreterPath}`,
        std.symlink({ target: interpreterTarget }),
      );
    }

    dir = dir.insert(
      `${libexecBriocheLdDir}/${ldName}`,
      std.symlink({
        target: `../../${ldParentDirName}/.brioche-ld-orig-${ldName}`,
      }),
    );
    dir = dir.insert(`${libexecBriocheLdDir}/brioche-packed`, briochePacked);
    dir = dir.insert(`${ldDir}/.brioche-ld-orig-${ldName}`, systemLd);
    dir = dir.insert(ldPath, briocheLd);
  }

  return dir;
}

interface UseBriocheCcOptions {
  ccPaths: string[];
  sysrootPath: string;
}

export function useBriocheCc(
  dir: std.Recipe<std.Directory>,
  options: UseBriocheCcOptions,
): std.Recipe<std.Directory> {
  const briocheCc = runtimeUtils().get("bin/brioche-cc");

  for (const ccPath of options.ccPaths) {
    const systemCc = dir.get(ccPath);

    const ccDir = ccPath.split("/").slice(0, -1).join("/");
    const ccParentDirComponents = ccDir.split("/").slice(0, -1);
    const ccName = ccPath.split("/").at(-1);
    const ccParentDirName = ccDir.split("/").at(-1);
    std.assert(ccName != null && ccParentDirName != null);

    const libexecBriocheCcDir = [
      ...ccParentDirComponents,
      "libexec",
      "brioche-cc",
    ].join("/");

    const pathToRoot = libexecBriocheCcDir
      .split("/")
      .map(() => "..")
      .join("/");
    const sysrootTarget = `${pathToRoot}/${options.sysrootPath}`;
    dir = dir.insert(
      `${libexecBriocheCcDir}/sysroot`,
      std.symlink({ target: sysrootTarget }),
    );

    dir = dir.insert(
      `${libexecBriocheCcDir}/${ccName}`,
      std.symlink({
        target: `../../${ccParentDirName}/.brioche-cc-orig-${ccName}`,
      }),
    );
    dir = dir.insert(`${ccDir}/.brioche-cc-orig-${ccName}`, systemCc);
    dir = dir.insert(ccPath, briocheCc);
  }

  return dir;
}

interface UseBriocheStripOptions {
  stripPaths: string[];
}

export function useBriocheStrip(
  dir: std.Recipe<std.Directory>,
  options: UseBriocheStripOptions,
): std.Recipe<std.Directory> {
  const briocheStrip = runtimeUtils().get("bin/brioche-strip");

  for (const stripPath of options.stripPaths) {
    const systemStrip = dir.get(stripPath);

    const stripDir = stripPath.split("/").slice(0, -1).join("/");
    const stripParentDirComponents = stripDir.split("/").slice(0, -1);
    const stripName = stripPath.split("/").at(-1);
    const stripParentDirName = stripDir.split("/").at(-1);
    std.assert(stripName != null && stripParentDirName != null);

    const libexecBriocheStripDir = [
      ...stripParentDirComponents,
      "libexec",
      "brioche-strip",
    ].join("/");

    dir = dir.insert(
      `${libexecBriocheStripDir}/${stripName}`,
      std.symlink({
        target: `../../${stripParentDirName}/.brioche-strip-orig-${stripName}`,
      }),
    );
    dir = dir.insert(
      `${stripDir}/.brioche-strip-orig-${stripName}`,
      systemStrip,
    );
    dir = dir.insert(stripPath, briocheStrip);
  }

  return dir;
}

interface WrapWithScriptOptions {
  paths: string[];
  renamePrefix?: string;
  renameSuffix?: string;
  script: std.RecipeLike<std.File>;
}

export function wrapWithScript(
  directory: std.RecipeLike<std.Directory>,
  options: WrapWithScriptOptions,
): std.Recipe<std.Directory> {
  const renamePrefix = options.renamePrefix ?? "";
  const renameSuffix = options.renameSuffix ?? "";
  std.assert(
    renamePrefix !== "" || renameSuffix !== "",
    "renamePrefix or renameSuffix must be provided",
  );

  let dir = std.recipe(directory);

  for (const path of options.paths) {
    const program = dir.get(path);

    const pathComponents = path.split("/");
    const dirComponents = pathComponents.slice(0, -1);
    const name = pathComponents.at(-1);

    std.assert(
      name != null && name !== "",
      `failed to get filename in path '${path}'`,
    );

    const renameName = `${renamePrefix}${name}${renameSuffix}`;
    const renamePath = [...dirComponents, renameName].join("/");

    dir = dir.insert(path, options.script);
    dir = dir.insert(renamePath, program);
  }

  return dir;
}
