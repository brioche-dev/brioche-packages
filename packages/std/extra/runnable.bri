import * as std from "/core";
import {
  type RunnableTemplate,
  type RunnableTemplateComponent,
  type RunnableArgValue,
  type RunnableEnvValue,
  makeRunnableExecutable,
} from "/runtime_utils.bri";

export type WithRunnable = std.Recipe<std.Directory> & WithRunnableUtils;

export interface WithRunnableUtils {
  /**
   * Set environment variables when the command is run.
   */
  env(values: Record<string, RunnableTemplateEnvValue>): WithRunnable;

  /**
   * Include additional dependencies when the command is run. This
   * will set the `$PATH` environment variable.
   */
  dependencies(...dependencies: std.RecipeLike<std.Directory>[]): WithRunnable;
}

/**
 * Options for configuring a runnable command.
 *
 * @param command - The command to run.
 * @param args - Arguments to pass to the command.
 * @param env - Environment variables to set when running the command.
 * @param dependencies - Additional dependencies to include in the `$PATH`.
 */
export interface RunnableOptions {
  command: RunnableTemplateValue;
  args?: RunnableTemplateValue[];
  env?: Record<string, RunnableTemplateEnvValue>;
  dependencies?: std.RecipeLike<std.Directory>[];
}

/**
 * Return a runnable recipe, where `brioche-run` is an executable that
 * runs the specified command. This wraps the command so it can be run outside
 * Brioche, such as by calling `brioche run` or by putting it into an OCI
 * container image.
 *
 * @description See also `std.bashRunnable`, which allows running a full Bash script instead
 * of a single command.
 *
 * @param recipe - The base recipe to add the runnable to.
 * @param options - Options for the runnable command.
 *
 * @returns A runnable recipe with `brioche-run` executable
 *
 * @example
 * ```typescript
 * import * as std from "std";
 *
 * // Running `brioche run` will print "Hello, world!"
 * export default function () {
 *   return std.withRunnable(std.directory(), {
 *     command: "echo",
 *     args: ["Hello, world!"],
 *     dependencies: [std.tools],
 *   });
 * }
 * ```
 */
export function withRunnable(
  recipe: std.RecipeLike<std.Directory>,
  options: RunnableOptions,
): WithRunnable {
  recipe = addRunnable(recipe, "brioche-run", options);

  return std.mixin(recipe, {
    env(values: Record<string, RunnableTemplateEnvValue>): WithRunnable {
      return withRunnable(recipe, {
        ...options,
        env: { ...options.env, ...values },
      });
    },

    dependencies(
      ...dependencies: std.RecipeLike<std.Directory>[]
    ): WithRunnable {
      return withRunnable(recipe, {
        ...options,
        dependencies: [...(options.dependencies ?? []), ...dependencies],
      });
    },
  });
}

/**
 * Return a new recipe with an executable at `path` that runs the specified
 * command. This wraps the command so it can be run outside Brioche.
 *
 * @param recipe - The base recipe to add the executable to.
 * @param path - The path where the executable should be placed.
 * @param options - Options for the runnable command.
 *
 * @returns A new recipe with an executable at the specified path
 *
 * @example
 * ```typescript
 * import * as std from "std";
 *
 * // Running `brioche run -c bin/hello` will print "Hello, world!"
 * export default function () {
 *   return std.addRunnable(std.directory(), "bin/hello", {
 *     command: "echo",
 *     args: ["Hello, world!"],
 *     dependencies: [std.tools],
 *   });
 * }
 * ```
 */
export function addRunnable(
  recipe: std.RecipeLike<std.Directory>,
  path: string,
  options: RunnableOptions,
): std.Recipe<std.Directory> {
  // Compute the path to get from the runnable path (`path`) to the
  // recipe root
  const pathComponentsToRecipeRoot = [];
  const dirComponents = path.split("/").slice(0, -1);
  for (const component of dirComponents) {
    if (component === "..") {
      if (pathComponentsToRecipeRoot.length === 0) {
        throw new Error(`path escapes recipe root: ${path}`);
      }

      // Remove one traversal when going up a directory
      pathComponentsToRecipeRoot.pop();
    } else if (component === "." || component === "") {
      // Skip current dir and empty components
    } else {
      // For a normal path, we need to go up one more directory to get back
      // to the root
      pathComponentsToRecipeRoot.push("..");
    }
  }
  const pathToRecipeRoot = pathComponentsToRecipeRoot.join("/");

  let n = 0;
  let command: RunnableTemplate;
  [command, recipe, n] = buildTemplate(
    options.command,
    recipe,
    pathToRecipeRoot,
    n,
  );

  const argValues: RunnableTemplate[] = [];
  for (const arg of options.args ?? []) {
    let argTemplate: RunnableTemplate;
    [argTemplate, recipe, n] = buildTemplate(arg, recipe, pathToRecipeRoot, n);
    argValues.push(argTemplate);
  }

  const args: RunnableArgValue[] = [
    ...argValues.map<RunnableArgValue>((value) => ({
      type: "arg",
      value,
    })),
    { type: "rest" },
  ];

  const pathComponents: RunnableTemplateComponent[] = [];
  for (const dep of options.dependencies ?? []) {
    let depTemplate: RunnableTemplate;
    [depTemplate, recipe, n] = buildTemplate(
      [dep, "/bin"],
      recipe,
      pathToRecipeRoot,
      n,
    );

    if (pathComponents.length > 0) {
      pathComponents.push(
        { type: "literal", value: std.bstring(":") },
        ...depTemplate.components,
      );
    } else {
      pathComponents.push(...depTemplate.components);
    }
  }

  const env: Record<string, RunnableEnvValue> = {};
  if (pathComponents.length > 0) {
    env["PATH"] = {
      type: "prepend",
      separator: std.bstring(":"),
      value: { components: pathComponents },
    };
  }

  for (const [key, value] of Object.entries(options.env ?? {})) {
    let envValue: RunnableEnvValue;
    [envValue, recipe, n] = buildEnvValue(value, recipe, pathToRecipeRoot, n);

    env[key] = mergeEnv(env[key], envValue, key);
  }

  const runnable = makeRunnableExecutable({
    command,
    args,
    env,
  });

  return recipe.insert(path, runnable);
}

export type RunnableTemplateValue =
  | string
  | undefined
  | { relativePath: string }
  | std.RecipeLike
  | RunnableTemplateValue[];

export type RunnableTemplateEnvValue =
  | { append: RunnableTemplateValue; separator: string }
  | { prepend: RunnableTemplateValue; separator: string }
  | { fallback: RunnableTemplateValue }
  | { set: RunnableTemplateValue }
  | string
  | undefined
  | { relativePath: string };

function buildTemplate(
  template: RunnableTemplateValue,
  recipe: std.RecipeLike<std.Directory>,
  pathToRecipeRoot: string | undefined,
  n: number,
): [RunnableTemplate, std.Recipe<std.Directory>, number] {
  let recipeValue = std.recipe(recipe);

  if (template == null || template === "") {
    return [{ components: [] }, recipeValue, n];
  } else if (typeof template === "string") {
    return [
      { components: [{ type: "literal", value: std.bstring(template) }] },
      recipeValue,
      n,
    ];
  } else if (Array.isArray(template)) {
    const resultComponents = [];
    for (const component of template) {
      let result: RunnableTemplate;
      [result, recipeValue, n] = buildTemplate(
        component,
        recipeValue,
        pathToRecipeRoot,
        n,
      );

      resultComponents.push(...result.components);
    }

    return [{ components: resultComponents }, recipeValue, n];
  } else if ("relativePath" in template) {
    const relativePath = [pathToRecipeRoot, template.relativePath]
      .filter((path) => path != null && path !== "")
      .join("/");

    return [
      {
        components: [
          { type: "relative_path", path: std.bstring(relativePath) },
        ],
      },
      recipeValue,
      n,
    ];
  } else {
    const pathToBriocheRunDir = [pathToRecipeRoot, "brioche-run.d"]
      .filter((path) => path != null && path !== "")
      .join("/");

    recipeValue = recipeValue.insert(`brioche-run.d/recipe-${n}`, template);
    return [
      {
        components: [
          {
            type: "relative_path",
            path: std.bstring(`${pathToBriocheRunDir}/recipe-${n}`),
          },
        ],
      },
      recipeValue,
      n + 1,
    ];
  }
}

function buildEnvValue(
  value: RunnableTemplateEnvValue,
  recipe: std.RecipeLike<std.Directory>,
  pathToRecipeRoot: string | undefined,
  n: number,
): [RunnableEnvValue, std.Recipe<std.Directory>, number] {
  if (typeof value === "object" && "append" in value) {
    let templateValue: RunnableTemplate;
    [templateValue, recipe, n] = buildTemplate(
      value.append,
      recipe,
      pathToRecipeRoot,
      n,
    );
    return [
      {
        type: "append",
        separator: std.bstring(value.separator),
        value: templateValue,
      },
      recipe,
      n,
    ];
  } else if (typeof value === "object" && "prepend" in value) {
    let templateValue: RunnableTemplate;
    [templateValue, recipe, n] = buildTemplate(
      value.prepend,
      recipe,
      pathToRecipeRoot,
      n,
    );
    return [
      {
        type: "append",
        separator: std.bstring(value.separator),
        value: templateValue,
      },
      recipe,
      n,
    ];
  } else if (typeof value === "object" && "fallback" in value) {
    let templateValue: RunnableTemplate;
    [templateValue, recipe, n] = buildTemplate(
      value.fallback,
      recipe,
      pathToRecipeRoot,
      n,
    );
    return [{ type: "fallback", value: templateValue }, recipe, n];
  } else if (typeof value === "object" && "set" in value) {
    let templateValue: RunnableTemplate;
    [templateValue, recipe, n] = buildTemplate(
      value.set,
      recipe,
      pathToRecipeRoot,
      n,
    );
    return [{ type: "set", value: templateValue }, recipe, n];
  } else if (
    value === undefined ||
    typeof value === "string" ||
    (typeof value === "object" && "relativePath" in value)
  ) {
    let templateValue: RunnableTemplate;
    [templateValue, recipe, n] = buildTemplate(
      value,
      recipe,
      pathToRecipeRoot,
      n,
    );
    return [{ type: "set", value: templateValue }, recipe, n];
  } else {
    return std.unreachable(value);
  }
}

function mergeEnv(
  current: RunnableEnvValue | undefined,
  next: RunnableEnvValue,
  envName: string,
): RunnableEnvValue {
  if (current == null) {
    return next;
  }

  switch (next.type) {
    case "append":
      switch (current.type) {
        case "append":
          return {
            type: "append",
            separator: current.separator,
            value: concatValues(current.value, next.separator, next.value),
          };
        case "clear":
          return {
            type: "set",
            value: next.value,
          };
        case "inherit":
          return next;
        case "set":
          return {
            type: "set",
            value: concatValues(current.value, next.separator, next.value),
          };
        case "prepend":
        case "fallback":
          throw new Error(
            `Unsupported modes for env var $${envName}: ${current.type}, ${next.type}`,
          );
        default:
          return std.unreachable(current);
      }
    case "prepend":
      switch (current.type) {
        case "prepend":
          return {
            type: "prepend",
            separator: current.separator,
            value: concatValues(next.value, next.separator, current.value),
          };
        case "clear":
          return {
            type: "set",
            value: next.value,
          };
        case "inherit":
          return next;
        case "set":
          return {
            type: "set",
            value: concatValues(current.value, next.separator, next.value),
          };
        case "append":
        case "fallback":
          throw new Error(
            `Unsupported modes for env var $${envName}: ${current.type}, ${next.type}`,
          );
        default:
          return std.unreachable(current);
      }
    case "clear":
    case "set":
      return next;
    case "inherit":
    case "fallback":
      return current;
    default:
      return std.unreachable(next);
  }
}

function concatValues(
  ...values: (RunnableTemplate | std.BString)[]
): RunnableTemplate {
  return {
    components: [
      ...values.flatMap((value): RunnableTemplateComponent[] =>
        typeof value === "object"
          ? value.components
          : [{ type: "literal", value }],
      ),
    ],
  };
}
