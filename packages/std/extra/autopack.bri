import * as std from "/core";
import { toolchain } from "/toolchain";
import { runtimeUtils } from "/runnable_tools.bri";

/**
 * "Autopack" one or more files in a directory. Generally, this is useful
 * for making packed executables from dynamically-linked binaries or
 * scripts, such as when packaging a pre-built binary that links to glibc.
 *
 * The default behavior is to autopack dynamic binaries, shared libraries,
 * and scripts, but not to repack already-packed files.
 *
 * See `AutopackOptions` for more details. Either `paths` or `globs` must be
 * provided, but not both.
 */
export function autopack(
  recipe: std.AsyncRecipe<std.Directory>,
  options: AutopackOptions,
): std.Recipe<std.Directory> {
  const { config, variables } = buildAutopackConfig({
    options,
    defaultLinkDependencies: [toolchain()],
    runtimeUtils: runtimeUtils(),
  });

  const variableArgs: std.ProcessTemplateLike[] = Object.entries(
    variables,
  ).flatMap(([name, value]) => {
    switch (value.type) {
      case "path":
        return ["--var", std.tpl`${name}=path:${value.value}`];
    }
  });

  return std
    .process({
      command: std.tpl`${runtimeUtils()}/bin/brioche-packer`,
      args: [
        "autopack",
        std.outputPath,
        "--config",
        JSON.stringify(config),
        ...variableArgs,
      ],
      outputScaffold: recipe,
    })
    .toDirectory();
}

export interface AutopackOptions {
  /**
   * A list of paths to autopack. If a provided path cannot be packed,
   * autopacking will fail. Mutually exclusive with `globs`
   */
  paths?: string[];

  /**
   * A list of glob pattenrs to autopack. If a matched file cannot be packed,
   * it will be skipped. Mutually exclusive with `paths`
   */
  globs?: string[];

  /**
   * A list of glob patterns to exclude when autopacking. Can only be set
   * when `globs` is set
   */
  excludeGlobs?: string[];

  /**
   * A list of dependencies to search when linking. These will be used to find
   * dynamic libraries, the dynamic linker, script interpreters, and any other
   * dependencies needed to pack a file. A dependency will not be used if
   * it isn't used by any packed files
   */
  linkDependencies?: std.AsyncRecipe[];

  /**
   * Include the recipe itself as a dependency. This is useful when a binary
   * depends on a shared library within the recipe
   */
  selfDependency?: boolean;

  /**
   * Configuration for packing dynamic binaries. Enabled by default, but
   * can be disabled by setting `enabled: false`
   */
  dynamicBinaryConfig?: DynamicBinaryConfig;

  /**
   * Configuration for packing shared libraries. Enabled by default, but
   * can be disabled by setting `enabled: false`
   */
  sharedLibraryConfig?: SharedLibraryConfig;

  /**
   * Configuration for packing scripts. Enabled by default, but
   * can be disabled by setting `enabled: false`
   */
  scriptConfig?: ScriptConfig;

  /**
   * Configuration for repacking already-packed files. Disabled by default,
   * but can be enabled by setting `enabled: true`
   */
  repackConfig?: RepackConfig;
}

interface DynamicBinaryConfig extends DynamicLinkingConfig {
  /**
   * Whether to pack dynamic binaries. Defaults to `true`
   */
  enabled?: boolean;

  /**
   * A list of extra paths (relative to the root of the recipe) to include
   * when a dynamic binary is run. This is useful for including shared libraries
   */
  extraRuntimeLibraryPaths?: string[];
}

interface SharedLibraryConfig extends DynamicLinkingConfig {
  /**
   * Whether to pack shared libraries. Defaults to `true`
   */
  enabled?: boolean;

  /**
   * Whether to pack a shared library even if it has no dependencies. Defaults
   * to `false`
   */
  allowEmpty?: boolean;
}

interface ScriptConfig {
  /**
   * Whether to pack scripts. Defaults to `true`
   */
  enabled?: boolean;

  /**
   * Extra environment variables to set when a packed script is run
   */
  env?: Record<string, EnvValueConfig>;

  /**
   * When set, clears the environment when running the script. Specific
   * environment variables can still be inherited by using the `inherit`
   * environment variable config. Defaults to `false`
   */
  clearEnv?: boolean;
}

interface RepackConfig {
  /**
   * Whether to repack already-packed files. Defaults to `false`. When set
   * the original file will be repacked from scratch by default, discarding
   * any options used when it was originally packed
   */
  enabled?: boolean;
}

interface DynamicLinkingConfig {
  /**
   * A list of directory recipes to search for libraries. Only matched libraries
   * will actually be used in the packed file
   */
  libraryPaths?: std.AsyncRecipe<std.Directory>[];

  /**
   * A list of library names to exclude from packing. Even if a library is
   * excluded, its transitive dependencies will still be searched and packed
   */
  skipLibraries?: string[];

  /**
   * A list of extra library names to include while packing. This is useful
   * if a program dynamically loads a library that isn't linked to directly
   */
  extraLibraries?: string[];

  /**
   * When set, libraries that can't be found will be skipped instead of failing.
   * Defaults to `false`
   */
  skipUnknownLibraries?: boolean;
}

type EnvValueConfig =
  | { type: "clear" }
  | { type: "inherit" }
  | { type: "set"; value: EnvValue }
  | { type: "fallback"; value: EnvValue }
  | { type: "prepend"; value: EnvValue; separator: string }
  | { type: "append"; value: EnvValue; separator: string };

type EnvValue =
  | std.ProcessTemplateLike
  | { relativePath: string }
  | { relativePaths: string[]; separator: string };

interface BuildConfigOptions {
  options: AutopackOptions;
  defaultLinkDependencies: std.AsyncRecipe[];
  runtimeUtils: std.Recipe<std.Directory>;
}

export function buildAutopackConfig(
  buildConfigOptions: BuildConfigOptions,
): AutopackConfigResult {
  const { options, defaultLinkDependencies, runtimeUtils } = buildConfigOptions;
  const variables: Record<string, AutopackConfigVariable> = {};

  let variableIndex = 0;
  const addVar = (variable: {
    name?: string;
    value: std.AsyncRecipe;
  }): TemplateVariable => {
    const name = variable.name ?? `var${variableIndex++}`;
    std.assert(!(name in variables), `duplicate variable name ${name}`);
    variables[name] = { type: "path", value: variable.value };
    return { variable: name };
  };

  const buildEnvValue = (value: EnvValue): EnvValueTemplateValue => {
    if (typeof value === "object" && "relativePath" in value) {
      return {
        components: [
          { type: "relative_path", path: std.bstring(value.relativePath) },
        ],
      };
    } else if (typeof value === "object" && "relativePaths" in value) {
      return {
        components: value.relativePaths.flatMap((path, i) => [
          ...(i === 0
            ? []
            : [
                {
                  type: "literal",
                  value: std.bstring(value.separator),
                } satisfies EnvValueTemplateValueComponent,
              ]),
          { type: "relative_path", path: std.bstring(path) },
        ]),
      };
    } else {
      const processTemplate = std.processTemplate(value);
      return {
        components: processTemplate.components.flatMap(
          (component): EnvValueTemplateValueComponent[] => {
            if (component == null || component === "") {
              return [];
            } else if (typeof component === "string") {
              return [{ type: "literal", value: std.bstring(component) }];
            } else if ("componentType" in component) {
              throw new Error(
                `cannot use component type in env value: ${component.componentType}`,
              );
            } else if (component instanceof Promise) {
              throw new Error("cannot use promise in env value");
            } else {
              return [{ type: "variable", ...addVar({ value: component }) }];
            }
          },
        ),
      };
    }
  };

  const dynamicBinaryPackedExecutable = addVar({
    name: "dynamicBinaryPackedExecutable",
    value: runtimeUtils.get("bin/brioche-packed-exec"),
  });
  const scriptPackedExecutable = addVar({
    name: "scriptPackedExecutable",
    value: runtimeUtils.get("bin/brioche-packed-plain-exec"),
  });

  const dynamicBinary =
    options.dynamicBinaryConfig?.enabled !== false
      ? ({
          packedExecutable: dynamicBinaryPackedExecutable,
          extraLibraries: options.dynamicBinaryConfig?.extraLibraries,
          extraRuntimeLibraryPaths:
            options.dynamicBinaryConfig?.extraRuntimeLibraryPaths,
          libraryPaths: options.dynamicBinaryConfig?.libraryPaths?.map((path) =>
            addVar({ value: path }),
          ),
          skipLibraries: options.dynamicBinaryConfig?.skipLibraries,
          skipUnknownLibraries:
            options.dynamicBinaryConfig?.skipUnknownLibraries,
        } satisfies DynamicBinaryConfigTemplate)
      : undefined;
  const sharedLibrary =
    options.sharedLibraryConfig?.enabled !== false
      ? ({
          libraryPaths: options.sharedLibraryConfig?.libraryPaths?.map((path) =>
            addVar({ value: path }),
          ),
          skipLibraries: options.sharedLibraryConfig?.skipLibraries,
          skipUnknownLibraries:
            options.sharedLibraryConfig?.skipUnknownLibraries,
        } satisfies SharedLibraryConfigTemplate)
      : undefined;
  const script =
    options.scriptConfig?.enabled !== false
      ? ({
          packedExecutable: scriptPackedExecutable,
          env: Object.fromEntries(
            Object.entries(options.scriptConfig?.env ?? {}).map(
              ([key, value]): [string, EnvValueTemplate] => {
                switch (value.type) {
                  case "clear":
                  case "inherit":
                    return [key, { type: value.type }];
                  case "set":
                  case "fallback":
                    return [
                      key,
                      { type: value.type, value: buildEnvValue(value.value) },
                    ];
                  case "prepend":
                  case "append":
                    return [
                      key,
                      {
                        type: value.type,
                        value: buildEnvValue(value.value),
                        separator: std.bstring(value.separator),
                      },
                    ];
                }
              },
            ),
          ),
        } satisfies ScriptConfigTemplate)
      : undefined;
  const repack =
    options.repackConfig?.enabled === true
      ? ({} satisfies RepackConfigTemplate)
      : undefined;

  const linkDependencies = [
    ...(options.linkDependencies ?? []),
    ...defaultLinkDependencies,
  ].map((dep) => addVar({ value: dep }));

  const config = {
    paths: options.paths,
    globs: options.globs,
    excludeGlobs: options.excludeGlobs,
    linkDependencies,
    selfDependency: options.selfDependency,
    dynamicBinary,
    sharedLibrary,
    script,
    repack,
  } satisfies AutopackConfigTemplate;
  return { config, variables };
}

interface AutopackConfigResult {
  config: AutopackConfigTemplate;
  variables: Record<string, AutopackConfigVariable>;
}

interface AutopackConfigTemplate {
  paths?: TemplatePath[];
  globs?: string[];
  excludeGlobs?: string[];
  quiet?: boolean;
  linkDependencies?: TemplatePath[];
  selfDependency?: boolean;
  dynamicBinary?: DynamicBinaryConfigTemplate;
  sharedLibrary?: SharedLibraryConfigTemplate;
  script?: ScriptConfigTemplate;
  repack?: RepackConfigTemplate;
}

type TemplateVariable = { variable: string };

type TemplatePath = string | TemplateVariable;

interface DynamicBinaryConfigTemplate extends DynamicLinkingConfigTemplate {
  packedExecutable: TemplatePath;
  extraRuntimeLibraryPaths?: string[];
}

interface SharedLibraryConfigTemplate extends DynamicLinkingConfigTemplate {}

interface ScriptConfigTemplate {
  packedExecutable: TemplatePath;
  env?: Record<string, EnvValueTemplate>;
  clearEnv?: boolean;
}

interface RepackConfigTemplate {}

type EnvValueTemplate =
  | { type: "clear" }
  | { type: "inherit" }
  | { type: "set"; value: EnvValueTemplateValue }
  | { type: "fallback"; value: EnvValueTemplateValue }
  | { type: "prepend"; value: EnvValueTemplateValue; separator: std.BString }
  | { type: "append"; value: EnvValueTemplateValue; separator: std.BString };

interface EnvValueTemplateValue {
  components: EnvValueTemplateValueComponent[];
}

type EnvValueTemplateValueComponent =
  | { type: "literal"; value: std.BString }
  | { type: "relative_path"; path: std.BString }
  | { type: "resource"; path: std.BString }
  | { type: "variable"; variable: string };

interface DynamicLinkingConfigTemplate {
  libraryPaths?: TemplatePath[];
  skipLibraries?: string[];
  extraLibraries?: string[];
  skipUnknownLibraries?: boolean;
}

type AutopackConfigVariable = { type: "path"; value: std.AsyncRecipe };
