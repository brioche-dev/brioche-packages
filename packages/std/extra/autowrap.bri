import * as std from "/core";
import { toolchain } from "/toolchain";
import { runtimeUtils } from "/runnable_tools.bri";

export interface AutowrapOptions {
  executables: string[];
  libraries?: std.ProcessTemplateLike[];
  sysroot?: std.AsyncRecipe<std.Directory>;
  skipUnknownLibraries?: boolean;
  skipLibraries?: string[];
  runtimeLibraryDirs?: string[];
}

/**
 * Automatically wrap dynamic executables so that their dynamic dependencies
 * get loaded correctly when they are run inside and outside of Brioche. This
 * is useful for packaging executables built from outside of Brioche.
 */
export function autowrap(
  recipe: std.AsyncRecipe<std.Directory>,
  options: AutowrapOptions,
): std.Recipe<std.Directory> {
  const sysroot = options.sysroot ?? toolchain();
  const libArgs = (options.libraries ?? []).flatMap(
    (lib): std.ProcessTemplateLike[] => ["--lib-dir", lib],
  );
  const runtimeLibArgs = (options.runtimeLibraryDirs ?? []).flatMap(
    (lib): std.ProcessTemplateLike[] => ["--runtime-lib-dir", lib],
  );
  const skipLibArgs = (options.skipLibraries ?? []).flatMap(
    (lib): std.ProcessTemplateLike[] => ["--skip-lib", lib],
  );

  let result = std.recipe(recipe);
  for (const executablePath of options.executables) {
    const wrappedExecutable = std
      .process({
        command: std.tpl`${runtimeUtils()}/bin/brioche-packer`,
        args: [
          "autowrap",
          "--packed-exec",
          std.tpl`${runtimeUtils()}/bin/brioche-packed-exec`,
          "--sysroot",
          sysroot,
          "--lib-dir",
          std.tpl`${sysroot}/lib`,
          ...libArgs,
          ...(options.skipUnknownLibraries === true
            ? ["--skip-unknown-libs"]
            : []),
          ...skipLibArgs,
          ...runtimeLibArgs,
          "--",
          std.tpl`${std.outputPath}/${executablePath}`,
        ],
      })
      .outputScaffold(recipe)
      .toDirectory()
      .get(executablePath);
    result = result.insert(executablePath, wrappedExecutable);
  }

  return result;
}
