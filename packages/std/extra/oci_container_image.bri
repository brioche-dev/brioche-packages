import * as std from "/core";
import { runBash } from "./run_bash.bri";

interface OciContainerImageOptions {
  recipe: std.AsyncRecipe<std.Directory>;
  entrypoint?: string[];
}

/**
 * Create an OCI container image from a recipe. The recipe
 * will be included as a layer in the image.
 *
 * ## Options
 *
 * - `recipe`: The recipe to use as the image layer.
 * - `entrypoint`: The entrypoint to use for the image.
 *   Defaults to `["/brioche-run"]`.
 *
 * ## Notes
 *
 * The returned image matches the [OCI Image Layout Specification][oci-spec],
 * and additionally has a manifest file following the [Docker Image Specification][docker-spec].
 *
 * [oci-spec]: https://github.com/opencontainers/image-spec/blob/dd33f727e2faea07432ef6f06d6f9afe73f3f519/image-layout.md
 * [docker-spec]: https://github.com/moby/docker-image-spec/blob/main/spec.md
 */
export function ociContainerImage(
  options: OciContainerImageOptions,
): std.Recipe<std.File> {
  return std.recipeFn(async (): Promise<std.Recipe<std.File>> => {
    const entrypoint = options.entrypoint ?? ["/brioche-run"];

    let imageDir = std.directory();

    imageDir = imageDir.insert(
      "oci-layout",
      std.file(
        JSON.stringify({
          imageLayoutVersion: "1.0.0",
        }),
      ),
    );

    const layerTar = tar(collectReferences(options.recipe));
    const { sha256Digest: layerSha256Digest } = await describeBlob(layerTar);
    const diffId = `sha256:${layerSha256Digest}`;

    const layerTarGzip = gzip(layerTar);
    let layerDigest = "";
    let layerSize = 0;
    let layerPath = "";
    [imageDir, { digest: layerDigest, size: layerSize, path: layerPath }] =
      await addBlob(imageDir, layerTarGzip);

    let configDigest: string = "";
    let configSize: number = 0;
    let configPath: string = "";
    [imageDir, { digest: configDigest, size: configSize, path: configPath }] =
      await addBlob(
        imageDir,
        std.file(
          JSON.stringify({
            architecture: "amd64",
            os: "linux",
            config: {
              Entrypoint: entrypoint,
            },
            rootfs: {
              type: "layers",
              diff_ids: [diffId],
            },
          }),
        ),
      );

    let manifestDigest = "";
    let manifestSize = 0;
    [imageDir, { digest: manifestDigest, size: manifestSize }] = await addBlob(
      imageDir,
      std.file(
        JSON.stringify({
          schemaVersion: 2,
          mediaType: "application/vnd.oci.image.manifest.v1+json",
          config: {
            mediaType: "application/vnd.oci.image.config.v1+json",
            digest: configDigest,
            size: configSize,
          },
          layers: [
            {
              mediaType: "application/vnd.oci.image.layer.v1.tar+gzip",
              digest: layerDigest,
              size: layerSize,
            },
          ],
        }),
      ),
    );

    imageDir = imageDir.insert(
      "index.json",
      std.file(
        JSON.stringify({
          schemaVersion: 2,
          mediaType: "application/vnd.oci.image.index.v1+json",
          manifests: [
            {
              mediaType: "application/vnd.oci.image.manifest.v1+json",
              size: manifestSize,
              digest: manifestDigest,
              platform: {
                architecture: "amd64",
                os: "linux",
              },
            },
          ],
        }),
      ),
    );

    imageDir = imageDir.insert(
      "manifest.json",
      std.file(
        JSON.stringify([
          {
            Config: configPath,
            RepoTags: [],
            Layers: [layerPath],
          },
        ]),
      ),
    );

    return tar(imageDir);
  });
}

interface AddBlobResult {
  digest: string;
  size: number;
  path: string;
}

async function addBlob(
  imageDir: std.Recipe<std.Directory>,
  blob: std.Recipe<std.File>,
): Promise<[std.Recipe<std.Directory>, AddBlobResult]> {
  const { sha256Digest, size } = await describeBlob(blob);
  const path = `blobs/sha256/${sha256Digest}`;
  imageDir = imageDir.insert(path, blob);
  return [imageDir, { digest: `sha256:${sha256Digest}`, size, path }];
}

interface DescribeBlobResult {
  sha256Digest: string;
  size: number;
}

async function describeBlob(
  file: std.AsyncRecipe<std.File>,
): Promise<DescribeBlobResult> {
  const description = await runBash`
    sha256sum < "$file" > "$BRIOCHE_OUTPUT"
    wc -c < "$file" >> "$BRIOCHE_OUTPUT"
  `
    .env({ file })
    .cast("file")
    .read();
  const [sha256sum, size] = description.split("\n");
  if (sha256sum == null || size == null) {
    throw new Error(`Invalid output from commands: ${description}`);
  }

  const [sha256Digest] = sha256sum.split(" ");
  if (sha256Digest == null || !/^[0-9a-f]{64}$/.test(sha256Digest)) {
    throw new Error(`Invalid sha256sum: ${sha256sum}`);
  }

  return { sha256Digest, size: parseInt(size) };
}

// TODO: Remove once Brioche v0.1.0 is no longer supported
function collectReferences(
  recipe: std.AsyncRecipe<std.Directory>,
): std.Recipe<std.Directory> {
  // TODO: Use proper semver comparison
  if (std.BRIOCHE_VERSION !== "0.1.0") {
    return std.collectReferences(recipe);
  }

  console.warn(
    "Using fallback to collect references from artifact, container will be much larger than it should be! Run `brioche self-update` to upgrade to the latest version of Brioche",
  );
  return runBash`
    if [ -d "$BRIOCHE_RESOURCE_DIR" -a -n "$(ls -A "$BRIOCHE_RESOURCE_DIR")" ]; then
      mkdir -p "$BRIOCHE_OUTPUT"/brioche-resources.d/
      cp \\
        -dr \\
        --no-preserve=mode,ownership,timestamps \\
        "$BRIOCHE_RESOURCE_DIR"/* "$BRIOCHE_OUTPUT"/brioche-resources.d/
    fi

    oldifs="$IFS"
    IFS=":"
    for resource_dir in $BRIOCHE_INPUT_RESOURCE_DIRS; do
      if [ -d "$resource_dir" -a -n "$(ls -A "$resource_dir")" ]; then
        mkdir -p "$BRIOCHE_OUTPUT"/brioche-resources.d/
        cp \\
          -dr \\
          --no-preserve=mode,ownership,timestamps \\
          "$resource_dir"/* "$BRIOCHE_OUTPUT"/brioche-resources.d/
      fi
    done
    IFS="$oldifs"
  `
    .outputScaffold(recipe)
    .cast("directory");
}

function tar(recipe: std.AsyncRecipe<std.Directory>): std.Recipe<std.File> {
  return runBash`
    tar -cf "$BRIOCHE_OUTPUT" -C "$recipe" .
  `
    .env({ recipe })
    .cast("file");
}

function gzip(file: std.AsyncRecipe<std.File>): std.Recipe<std.File> {
  return runBash`
    gzip -c "$file" > "$BRIOCHE_OUTPUT"
  `
    .env({ file })
    .cast("file");
}
