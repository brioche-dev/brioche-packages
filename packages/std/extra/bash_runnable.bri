import * as std from "/core";
import { tools } from "/toolchain";
import { withRunnable, type RunnableTemplateEnvValue } from "./runnable.bri";

export type BashRunnable = std.Recipe<std.Directory> & BashRunnableUtils;

export interface BashRunnableUtils {
  /**
   * Merge a recipe into the root of the returned recipe. This is useful for
   * wrapping another recipe so that you can call `brioche run` on it. In
   * the Bash script, you can get the path to the recipe root with the
   * `$root` environment variable.
   */
  root(recipe: std.RecipeLike<std.Directory>): BashRunnable;

  /**
   * Set environment variables when the Bash script gets run.
   */
  env(values: Record<string, RunnableTemplateEnvValue>): BashRunnable;

  /**
   * Include additonal dependencies when the Bash script gets run. This
   * will set the `$PATH` environment variable.
   */
  dependencies(...dependencies: std.RecipeLike<std.Directory>[]): BashRunnable;
}

/**
 * Build a Bash script into a self-contained runnable recipe. This does not
 * run the Bash script, but allows it to be run outside of Brioche, such
 * as by calling `brioche run` or by putting it into an OCI container image.
 *
 * @description The Bash script will be called with the `-e`, `-u`, and `-o pipefail`
 * settings. Extra arguments are accessible through `$@`, just like a normal
 * Bash script.
 *
 * See also `std.runBash` to run a Bash script while baking!
 *
 * @param strings - The template string parts for the Bash script.
 * @param values - The template string values.
 *
 * @returns A self-contained runnable recipe containing the Bash script
 *
 * @example
 *
 * ```typescript
 * import * as std from "std";
 *
 * // Running `brioche run` will print "Hello, world!"
 * export default function (): std.BashRunnable {
 *   return std.bashRunnable`
 *     echo "Hello, world!"
 *   `;
 * }
 * ```
 */
export function bashRunnable(
  strings: TemplateStringsArray,
  ...values: string[]
): BashRunnable {
  const script = std.indoc(strings, ...values);
  return makeBashRunnable({
    script,
    root: std.directory(),
    env: {
      root: { relativePath: "." },
    },
    dependencies: [],
  });
}

interface BashRunnableOptions {
  script: string;
  root: std.RecipeLike<std.Directory>;
  env: Record<string, RunnableTemplateEnvValue>;
  dependencies: std.RecipeLike<std.Directory>[];
}

function makeBashRunnable(options: BashRunnableOptions): BashRunnable {
  const recipe = withRunnable(options.root, {
    command: tools().get("bin/bash"),
    args: ["-e", "-u", "-o", "pipefail", "-c", options.script, "--"],
    env: options.env,
    dependencies: options.dependencies,
  });

  return std.mixin(recipe, {
    env(values: Record<string, RunnableTemplateEnvValue>): BashRunnable {
      return makeBashRunnable({
        ...options,
        env: { ...options.env, ...values },
      });
    },

    dependencies(
      ...dependencies: std.RecipeLike<std.Directory>[]
    ): BashRunnable {
      return makeBashRunnable({
        ...options,
        dependencies: [...options.dependencies, ...dependencies],
      });
    },

    root(recipe: std.RecipeLike<std.Directory>): BashRunnable {
      return makeBashRunnable({
        ...options,
        root: recipe,
      });
    },
  });
}
