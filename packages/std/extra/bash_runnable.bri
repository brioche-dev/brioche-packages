import * as std from "/core";
import { tools } from "/toolchain";
import {
  type RunnableTemplate,
  makeRunnableExecutable,
} from "/runnable_tools.bri";

export type BashRunnable = std.Recipe<std.Directory> & BashRunnableUtils;

export interface BashRunnableUtils {
  root(recipe: std.AsyncRecipe<std.Directory>): BashRunnable;
  env(values: Record<string, RunnableTemplateValue>): BashRunnable;
  dependencies(...dependencies: std.AsyncRecipe<std.Directory>[]): BashRunnable;
}

export function bashRunnable(
  strings: TemplateStringsArray,
  ...values: string[]
): BashRunnable {
  const script = std.indoc(strings, ...values);
  return makeBashRunnable({
    script,
    root: std.directory(),
    env: {
      root: { relativePath: "." },
    },
    dependencies: [],
  });
}

interface BashRunnableOptions {
  script: string;
  root: std.AsyncRecipe<std.Directory>;
  env: Record<string, RunnableTemplateValue>;
  dependencies: std.AsyncRecipe<std.Directory>[];
}

function makeBashRunnable(options: BashRunnableOptions): BashRunnable {
  let recipe = options.root;
  let n = 0;
  let command: RunnableTemplate = { components: [] };
  [command, recipe, n] = buildTemplate([tools().get("bin/bash")], recipe, n);

  const argTemplates: RunnableTemplateValue = [
    "-e",
    "-u",
    "-o",
    "pipefail",
    "-c",
    options.script,
    "--",
  ];
  const args: RunnableTemplate[] = [];
  for (const arg of argTemplates) {
    let argTemplate: RunnableTemplate;
    [argTemplate, recipe, n] = buildTemplate(arg, recipe, n);
    args.push(argTemplate);
  }

  const env: Record<string, RunnableTemplate> = {};
  for (const [key, value] of Object.entries(options.env)) {
    let valueTemplate: RunnableTemplate;
    [valueTemplate, recipe, n] = buildTemplate(value, recipe, n);
    env[key] = valueTemplate;
  }

  const path = env["PATH"] ?? { components: [] };
  for (const dep of options.dependencies) {
    let depTemplate: RunnableTemplate;
    [depTemplate, recipe, n] = buildTemplate([dep, "/bin"], recipe, n);

    if (path.components.length > 0) {
      path.components.push(
        { type: "literal", value: std.bstring(":") },
        ...depTemplate.components,
      );
    } else {
      path.components.push(...depTemplate.components);
    }
  }

  if (path.components.length > 0) {
    env["PATH"] = path;
  }

  const runnable = makeRunnableExecutable({
    command,
    args,
    env,
  });

  recipe = recipe.insert("brioche-run", runnable);

  return std.mixin(recipe, {
    env(values: Record<string, RunnableTemplateValue>): BashRunnable {
      return makeBashRunnable({
        ...options,
        env: { ...options.env, ...values },
      });
    },

    dependencies(
      ...dependencies: std.AsyncRecipe<std.Directory>[]
    ): BashRunnable {
      return makeBashRunnable({
        ...options,
        dependencies: [...options.dependencies, ...dependencies],
      });
    },

    root(recipe: std.AsyncRecipe<std.Directory>): BashRunnable {
      return makeBashRunnable({
        ...options,
        root: recipe,
      });
    },
  });
}

type RunnableTemplateValue =
  | string
  | undefined
  | { relativePath: string }
  | std.AsyncRecipe
  | RunnableTemplateValue[];

function buildTemplate(
  template: RunnableTemplateValue,
  recipe: std.AsyncRecipe<std.Directory>,
  n: number,
): [RunnableTemplate, std.Recipe<std.Directory>, number] {
  let recipeValue = std.recipe(recipe);

  if (template == null || template === "") {
    return [{ components: [] }, recipeValue, n];
  } else if (typeof template === "string") {
    return [
      { components: [{ type: "literal", value: std.bstring(template) }] },
      recipeValue,
      n,
    ];
  } else if (Array.isArray(template)) {
    const resultComponents = [];
    for (const component of template) {
      let result: RunnableTemplate;
      [result, recipeValue, n] = buildTemplate(component, recipeValue, n);

      resultComponents.push(...result.components);
    }

    return [{ components: resultComponents }, recipeValue, n];
  } else if ("relativePath" in template) {
    return [
      {
        components: [
          { type: "relative_path", path: std.bstring(template.relativePath) },
        ],
      },
      recipeValue,
      n,
    ];
  } else {
    recipeValue = recipeValue.insert(`brioche-run.d/recipe-${n}`, template);
    return [
      {
        components: [
          {
            type: "relative_path",
            path: std.bstring(`brioche-run.d/recipe-${n}`),
          },
        ],
      },
      recipeValue,
      n + 1,
    ];
  }
}
