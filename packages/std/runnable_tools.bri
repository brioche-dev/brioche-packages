import * as std from "/core";

export function runtimeUtils(): std.Recipe<std.Directory> {
  return std
    .download({
      url: "https://development-content.brioche.dev/github.com/brioche-dev/brioche-runtime-utils/commits/4815f007ab625a42a0e72820fdd6e154b9d5d1c6/x86_64-linux/brioche-runtime-utils.tar.zstd",
      hash: std.sha256Hash(
        "87b43c798f294772810801697333fb82611a35fb3934354fe0b3c37fba8bb196",
      ),
    })
    .unarchive("tar", "zstd");
}

interface RunnableData {
  command: RunnableTemplate;
  args: RunnableTemplate[];
  env: Record<string, RunnableTemplate>;
}

export function makeRunnableExecutable(
  data: RunnableData,
): std.Recipe<std.File> {
  const metadata = {
    command: data.command,
    args: [
      ...data.args.map((value) => ({
        type: "arg",
        value,
      })),
      { type: "rest" },
    ],
    env: Object.fromEntries(
      Object.entries(data.env).map(([key, value]) => [
        key,
        { type: "set", value },
      ]),
    ),
    clearEnv: false,
  };
  const pack = {
    type: "metadata",
    resourcePaths: [],
    format: "application/vnd.brioche.runnable-v0.1.0+json",
    metadata: std.tickEncode(JSON.stringify(metadata)),
  };

  return std
    .process({
      command: runtimeUtils().get("bin/brioche-packer"),
      args: [
        "pack",
        "--packed",
        runtimeUtils().get("bin/brioche-packed-plain-exec"),
        "--output",
        std.outputPath,
        "--pack",
        JSON.stringify(pack),
      ],
    })
    .toFile();
}

export interface RunnableTemplate {
  components: RunnableTemplateComponent[];
}

export type RunnableTemplateComponent =
  | { type: "literal"; value: std.BString }
  | { type: "relative_path"; path: std.BString };
