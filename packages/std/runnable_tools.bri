import * as std from "/core";

export function runtimeUtils(): std.Recipe<std.Directory> {
  return std
    .download({
      url: "https://development-content.brioche.dev/github.com/brioche-dev/brioche-runtime-utils/commits/7daa97fd9dd2efe59e5f594ac05cddebd99caa44/x86_64-linux/brioche-runtime-utils.tar.zstd",
      hash: std.sha256Hash(
        "cfd83135da620ed4847badd572e4702d0d9152b5a39e886086ddaf600d2c10e8",
      ),
    })
    .unarchive("tar", "zstd");
}

interface RunnableData {
  command: RunnableTemplate;
  args: RunnableTemplate[];
  env: Record<string, RunnableTemplate>;
}

export function makeRunnableExecutable(
  data: RunnableData,
): std.Recipe<std.File> {
  return std
    .process({
      command: runtimeUtils().get("bin/runnable"),
      args: [
        "make-runnable",
        "--runnable",
        runtimeUtils().get("bin/start-runnable"),
        "--output",
        std.outputPath,
        "--runnable-data",
        JSON.stringify(data),
      ],
    })
    .toFile();
}

export interface RunnableTemplate {
  components: RunnableTemplateComponent[];
}

export type RunnableTemplateComponent =
  | { type: "literal"; value: std.BString }
  | { type: "relative_path"; path: std.BString };
