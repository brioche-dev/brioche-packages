import nushell from "nushell";
import * as std from "std";
import { cmakeBuild } from "cmake";
import { gitCheckout } from "git";

export const project = {
  name: "pstack",
  version: "2.10",
};

const gitRef = Brioche.gitRef({
  repository: "https://github.com/peadar/pstack.git",
  ref: `v${project.version}`,
});

const source = gitCheckout(gitRef);

export default async function pstack(): Promise<std.Recipe<std.Directory>> {
  return cmakeBuild({
    source,
    config: "RelWithDebInfo",
    dependencies: [std.toolchain()],
    set: {
      VERSION_TAG: (await gitRef).commit,
    },
    env: {
      CMAKE_BUILD_PARALLEL_LEVEL: "16",
    },
    runnable: "bin/pstack",
  });
}

export async function test() {
  const script = std.runBash`
    pstack --version 2>&1 | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(pstack())
    .toFile();

  const version = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = (await gitRef).commit;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export function liveUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/peadar/pstack/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
