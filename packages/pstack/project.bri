import * as std from "std";
import { cmakeBuild } from "cmake";
import { gitCheckout } from "git";

export const project = {
  name: "pstack",
  version: "2.8.3",
};

const gitRef = Brioche.gitRef({
  repository: "https://github.com/peadar/pstack.git",
  ref: `v${project.version}`,
});

const source = gitCheckout(gitRef);

export default async function pstack(): Promise<std.Recipe<std.Directory>> {
  let pstack = cmakeBuild({
    source,
    config: "RelWithDebInfo",
    dependencies: [std.toolchain()],
    set: {
      VERSION_TAG: (await gitRef).commit,
    },
  });
  pstack = std.withRunnableLink(pstack, "bin/pstack");
  return pstack;
  // return std.runBash`
  //   export LIB="$LIBRARY_PATH"

  //   mkdir build
  //   cd build
  //   cmake \\
  //     -DCMAKE_INSTALL_PREFIX="$BRIOCHE_OUTPUT" \\
  //     -DCMAKE_BUILD_TYPE=RelWithDebInfo \\
  //     --debug-find \\
  //     ..
  //   make -j4
  //   make install

  //   if [ -d "$BRIOCHE_OUTPUT/lib64" ]; then
  //     ln -s lib64 "$BRIOCHE_OUTPUT/lib"
  //   fi
  // `
  //   .workDir(source)
  //   .dependencies(std.toolchain(), cmake(), git())
  //   .toDirectory();
}

export function test() {
  return std.runBash`
    pstack --version | tee "$BRIOCHE_OUTPUT"
  `.dependencies(pstack());
}
