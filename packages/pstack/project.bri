import * as std from "std";
import { cmakeBuild } from "cmake";
import { gitCheckout } from "git";

export const project = {
  name: "pstack",
  version: "2.12.1",
  repository: "https://github.com/peadar/pstack.git",
};

const gitRef = await Brioche.gitRef({
  repository: project.repository,
  ref: `v${project.version}`,
});

const source = gitCheckout(gitRef);

export default function pstack(): std.Recipe<std.Directory> {
  return cmakeBuild({
    source,
    config: "RelWithDebInfo",
    dependencies: [std.toolchain],
    set: {
      VERSION_TAG: gitRef.commit,
    },
    env: {
      CMAKE_BUILD_PARALLEL_LEVEL: "16",
    },
    runnable: "bin/pstack",
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    pstack --version 2>&1 | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(pstack)
    .toFile();

  const version = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = gitRef.commit;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
