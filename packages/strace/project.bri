import * as std from "std";

export const project = {
  name: "strace",
  version: "6.17",
  repository: "https://github.com/strace/strace",
};

const source = Brioche.download(
  `${project.repository}/releases/download/v${project.version}/strace-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function strace(): std.Recipe<std.Directory> {
  return std.runBash`
    case "$(uname -m)" in
      aarch64)
        # Disable multiple personality support for aarch64 for now
        ./configure \\
          --prefix=/ \\
          --enable-mpers=no
        ;;
      *)
        ./configure --prefix=/
        ;;
    esac

    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .toDirectory()
    .pipe((recipe) => std.withRunnableLink(recipe, "bin/strace"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    strace --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(strace)
    .toFile();

  const result = (await script.read()).trim();

  const version = result.match(/^strace -- version ([\d.]+)$/m)?.at(1);

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
