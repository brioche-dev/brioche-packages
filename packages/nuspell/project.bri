import * as std from "std";
import { cmakeBuild } from "cmake";
import git from "git";
import icu from "icu";

export const project = {
  name: "nuspell",
  version: "5.1.6",
  repository: "https://github.com/nuspell/nuspell",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `v${project.version}`,
});

export default function nuspell(): std.Recipe<std.Directory> {
  return cmakeBuild({
    source,
    dependencies: [std.toolchain, git, icu],
    set: {
      BUILD_DOCS: "OFF",
    },
    unsafe: {
      networking: true,
    },
    runnable: "bin/nuspell",
  }).pipe((recipe) =>
    std.setEnv(recipe, {
      CPATH: { append: [{ path: "include" }] },
      LIBRARY_PATH: { append: [{ path: "lib" }] },
      PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
      CMAKE_PREFIX_PATH: { append: [{ path: "." }] },
    }),
  );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    nuspell --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(nuspell)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `nuspell ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
