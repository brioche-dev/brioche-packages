import * as std from "std";
import python from "python";
import libxml2 from "libxml2";

export const project = {
  name: "libxslt",
  version: "1.1.42",
};

const source = Brioche.download(
  `https://download.gnome.org/sources/libxslt/1.1/libxslt-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function (): std.Recipe<std.Directory> {
  let libxslt = std.runBash`
    ./configure --prefix=/
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain(), python(), libxml2())
    .toDirectory();

  libxslt = makePkgConfigPathsRelative(libxslt);

  libxslt = std.setEnv(libxslt, {
    CPATH: { append: [{ path: "include" }] },
    LIBRARY_PATH: { append: [{ path: "lib" }] },
    PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
  });

  return libxslt;
}

// TODO: Figure out where to move this, this is copied from `std`
function makePkgConfigPathsRelative(
  recipe: std.AsyncRecipe<std.Directory>,
): std.Recipe<std.Directory> {
  // Replaces things that look like absolute paths in pkg-config files with
  // relative paths (using the `${pcfiledir}` variable)
  return std.runBash`
    find "$BRIOCHE_OUTPUT"/lib/pkgconfig -name '*.pc' -type f -print0 \
      | while IFS= read -r -d $'\\0' file; do
        sed -i 's|=/|=\${pcfiledir}/../../|' "$file"
      done
  `
    .outputScaffold(recipe)
    .toDirectory();
}
