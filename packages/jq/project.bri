import nushell from "nushell";
import * as std from "std";

export const project = {
  name: "jq",
  version: "1.7.1",
};

const source = Brioche.download(
  `https://github.com/jqlang/jq/releases/download/jq-${project.version}/jq-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function jq(): std.Recipe<std.Directory> {
  const jq = std.runBash`
    ./configure \\
      --prefix=/ \\
      --with-oniguruma=builtin
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain())
    .toDirectory();
  return std.withRunnableLink(jq, "bin/jq");
}

export async function test() {
  const script = std.runBash`
    jq --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(jq())
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `jq-${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/jqlang/jq/releases/latest
      | get tag_name
      | str replace --regex '^jq-' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
