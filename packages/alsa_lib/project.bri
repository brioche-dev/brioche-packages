import nushell from "nushell";
import * as std from "std";

export const project = {
  name: "alsa_lib",
  version: "1.2.13",
};

const source = Brioche.download(
  `https://www.alsa-project.org/files/pub/lib/alsa-lib-${project.version}.tar.bz2`,
)
  .unarchive("tar", "bzip2")
  .peel();

export default function alsaLib(): std.Recipe<std.Directory> {
  const alsaLib = std.runBash`
    ./configure --prefix=/
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain())
    .toDirectory();

  return std.setEnv(alsaLib, {
    CPATH: { append: [{ path: "include" }] },
    LIBRARY_PATH: { append: [{ path: "lib" }] },
    PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
  });
}

export async function test() {
  const src = std.file(std.indoc`
      #include <stdio.h>
      #include <alsa/asoundlib.h>

      int main(void)
      {
          const char *version = snd_asoundlib_version();
          printf("%s", version);

          return 0;
      }
  `);

  const script = std.runBash`
    cp "$src" main.c
    gcc main.c -o main -lasound
    ./main | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain(), alsaLib())
    .env({ src: src });

  const result = await script.toFile().read();

  // Check that the result contains the expected version
  const expected = `${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://www.alsa-project.org/files/pub/lib
      | lines
      | where {|it| ($it | str contains "alsa-lib") and (not ($it | str contains ".sig")) }
      | parse --regex '<a href="alsa-lib-(?<version>.+)\.tar\.bz2">'
      | sort-by --natural --reverse version
      | get 0.version

    $env.project | from json | update version $version | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
