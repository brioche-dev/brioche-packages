import nushell from "nushell";
import * as std from "std";
import { cargoBuild } from "rust";

export const project = {
  name: "amber",
  version: "0.4.0-alpha",
};

const source = Brioche.download(
  `https://github.com/amber-lang/amber/archive/refs/tags/${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function amber(): std.Recipe<std.Directory> {
  return cargoBuild({
    source,
    runnable: "bin/amber",
  });
}

export async function test() {
  const script = std.runBash`
    amber --version | tr -d '\n' | tee "$BRIOCHE_OUTPUT"
  `.dependencies(amber());

  const result = await script.toFile().read();

  // Check that the result contains the expected version
  const expected = `amber ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/amber-lang/amber/releases/latest
      | get tag_name

    $env.project | from json | update version $version | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
