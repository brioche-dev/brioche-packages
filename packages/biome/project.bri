import * as std from "std";
import { cargoBuild } from "rust";

export const project = {
  name: "biome",
  version: "2.1.2",
  repository: "https://github.com/biomejs/biome.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `@biomejs/biome@${project.version}`,
});

export default function biome(): std.Recipe<std.Directory> {
  return cargoBuild({
    source: source,
    runnable: "bin/biome",
    path: "crates/biome_cli",
    env: {
      BIOME_VERSION: project.version,
    },
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    biome --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(biome)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `Version: ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({
    project,
    matchTag: /^@biomejs\/biome@(?<version>.*)$/,
  });
}
