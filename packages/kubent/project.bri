import * as std from "std";
import { goBuild } from "go";

export const project = {
  name: "kubent",
  version: "0.7.3",
  repository: "https://github.com/doitintl/kube-no-trouble.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: project.version,
});

export default function kubent(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    path: "./cmd/kubent",
    buildParams: {
      ldflags: ["-s", "-w", `-X main.version=v${project.version}`],
    },
    runnable: "bin/kubent",
  });
}

export async function test() {
  const script = std.runBash`
    kubent --version 2>&1 | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(kubent)
    .toFile();

  const result = (await script.read()).trim();

  const versionMatch = result.match(/version v([^\s]+)/);
  const version = versionMatch == null ? null : versionMatch[1];

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export function liveUpdate() {
  return std.liveUpdateFromGithubReleases({ project });
}
