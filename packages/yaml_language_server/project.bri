import * as std from "std";
import { npmInstallGlobal } from "nodejs";

export const project = {
  name: "yaml_language_server",
  version: "1.19.2",
  extra: {
    packageName: "yaml-language-server",
  },
};

export default function yamlLanguageServer(): std.Recipe<std.Directory> {
  return npmInstallGlobal({
    packageName: project.extra.packageName,
    version: project.version,
  }).pipe((recipe) => std.withRunnableLink(recipe, "bin/yaml-language-server"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  // The package does not provide any version no help commands,
  // so we will run the server and check that it starts with error output.
  const script = std.runBash`
    (yaml-language-server 2>&1 || true) | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(yamlLanguageServer)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected output
  const expected = "Error: Connection input stream is not set.";
  std.assert(
    result.includes(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromNpmPackages({ project });
}
