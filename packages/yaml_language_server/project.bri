import * as std from "std";
import { npmInstallGlobal } from "nodejs";
import nushell from "nushell";

export const project = {
  name: "yaml_language_server",
  version: "1.18.0",
  packageName: "yaml-language-server",
};

export default function yamlLanguageServer(): std.Recipe<std.Directory> {
  return npmInstallGlobal({
    packageName: project.packageName,
    version: project.version,
  }).pipe((recipe) => std.withRunnableLink(recipe, "bin/yaml-language-server"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  // The package does not provide any version no help commands,
  // so we will run the server and check that it starts with error output.
  const script = std.runBash`
    (yaml-language-server 2>&1 || true) | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(yamlLanguageServer)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected output
  const expected = "Error: Connection input stream is not set.";
  std.assert(
    result.includes(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.WithRunnable {
  const src = std.file(std.indoc`
    let releaseData = http get https://registry.npmjs.org/${project.packageName}/latest

    let version = $releaseData
      | get version
      | str replace --regex '^v' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}
