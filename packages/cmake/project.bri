import nushell from "nushell";
import * as std from "std";
import { gitCheckout } from "git";
import openssl from "openssl";
import curl from "curl";

export const project = {
  name: "cmake",
  version: "3.31.1",
};

function patch(): std.Recipe<std.File> {
  // Instead of directly using a fork of CMake, we instead grab the branch
  // `brioche-patches`, diff it from `base/brioche-patches`, then apply it
  // to whichever version of CMake we're building. This may make it easier
  // to stay up-to-date, but it's not clear if this is the right approach...

  return std.recipeFn(() => {
    const base = gitCheckout(
      Brioche.gitRef({
        repository: "https://github.com/brioche-dev/CMake.git",
        ref: "base/brioche-patches",
      }),
    );
    const patched = gitCheckout(
      Brioche.gitRef({
        repository: "https://github.com/brioche-dev/CMake.git",
        ref: "brioche-patches",
      }),
    );

    return std.runBash`
      diff -ru base patched > "$BRIOCHE_OUTPUT" || true
    `
      .workDir(
        std.directory({
          base: base.remove(".git"),
          patched: patched.remove(".git"),
        }),
      )
      .toFile();
  });
}

const source = (() => {
  let source = Brioche.download(
    `https://github.com/Kitware/CMake/releases/download/v${project.version}/cmake-${project.version}.tar.gz`,
  )
    .unarchive("tar", "gzip")
    .peel();

  // Apply patch file
  source = std
    .process({
      command: "patch",
      args: ["-p1", "-i", patch(), "-d", std.outputPath],
      outputScaffold: source,
      dependencies: [std.tools()],
    })
    .toDirectory();

  return source;
})();

export default function cmake(): std.Recipe<std.Directory> {
  let cmake = std.runBash`
    ./bootstrap \\
      --prefix=/ \\
      --system-curl \\
      --parallel=16
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain(), openssl(), curl())
    .toDirectory();

  cmake = cmake.insert("libexec/cmake/runtime-utils", std.runtimeUtils());
  cmake = cmake.insert(
    "libexec/cmake/brioche-packer",
    std.symlink({ target: "runtime-utils/bin/brioche-packer" }),
  );

  cmake = std.setEnv(cmake, {
    CPATH: { append: [{ path: "include" }] },
    LIBRARY_PATH: { append: [{ path: "lib" }] },
    PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
  });

  return std.withRunnableLink(cmake, "bin/cmake");
}

export interface CMakeBuildInstallOptions {
  source: std.AsyncRecipe<std.Directory>;
  path?: string;
  dependencies?: std.AsyncRecipe<std.Directory>[];
  config?: string;
  env?: Record<string, std.ProcessTemplateLike>;
  set?: Record<string, CMakeVariable>;
  runnable?: string;
}

export type CMakeVariable = CMakeVariableValue | std.ProcessTemplateLike;

export interface CMakeVariableValue {
  type?: CMakeVariableType;
  value: std.ProcessTemplateLike;
}

export type CMakeVariableType =
  | "BOOL"
  | "FILEPATH"
  | "PATH"
  | "STRING"
  | "INTERNAL";

/**
 * Generate and build a CMake project.
 *
 * A project buildsystem will be generated out-of-tree from the source project,
 * and will be built and installed automatically with the chosen build
 * generator.
 *
 * If the result includes a `lib64/`, the symlink `lib/` will be added
 * automatically to follow the standard Brioche conventions.
 *
 * ## Options
 *
 * - `source`: The CMake project to build.
 * - `path`: Optional subpath containing the root CMake project to build,
 *   relative to `source`. This can be useful for monorepos with multiple
 *   CMake projects that reference each other.
 * - `dependencies`: Optionally add dependencies to the build. Most projects
 *   will want to include `std.toolchain()` or a similar toolchain.
 * - `env`: Optionally set environment variables for the build.
 * - `set`: Optionally set CMake cache variables during the build, as if
 *   by passing `-D...`.
 * - `runnable`: Optionally set a path to the binary to run by default
 *   (e.g. `bin/foo`).
 */
export function cmakeBuild(
  options: CMakeBuildInstallOptions,
): std.Recipe<std.Directory> {
  const { source, dependencies = [], config = "Release", set = {} } = options;

  const env: Record<string, std.ProcessTemplateLike> = {};

  const setEntries = Object.entries(set);
  setEntries.sort(([aName, _aValue], [bName, _bValue]) => {
    if (aName > bName) {
      return 1;
    } else if (aName < bName) {
      return -1;
    } else {
      return 0;
    }
  });
  const setEntriesWithIndices = setEntries.map(
    ([name, value], index) => [name, value, index] as const,
  );

  for (const [name, variable, index] of setEntriesWithIndices) {
    const value = isCMakeVariableValue(variable) ? variable.value : variable;
    const type = isCMakeVariableValue(variable) ? variable.type : undefined;

    env[`cmake_name_${index}`] = name;
    env[`cmake_value_${index}`] = value;
    env[`cmake_type_${index}`] = type ?? "";
  }

  let result = std.runBash`
    export LIB="$LIBRARY_PATH"

    cmake_args=()
    for index in $(seq 0 "$((cmake_num_set_entries-1))"); do
      var_cmake_name="cmake_name_$index"
      var_cmake_value="cmake_value_$index"
      var_cmake_type="cmake_type_$index"
      if [ -n "\${!var_cmake_type}" ]; then
        cmake_args+=("-D\${!var_cmake_name}:\${!var_cmake_type}=\${!var_cmake_value}")
      else
        cmake_args+=("-D\${!var_cmake_name}=\${!var_cmake_value}")
      fi
    done

    cmake "$source/$path" "\${cmake_args[@]}"
    cmake --build . --config "$config"
    cmake --install . --prefix="$BRIOCHE_OUTPUT"

    if [ -d "$BRIOCHE_OUTPUT/lib64" ]; then
      ln -s lib64 "$BRIOCHE_OUTPUT/lib"
    fi
  `
    .dependencies(...dependencies, cmake())
    .env({
      ...options.env,
      source,
      path: options.path ?? ".",
      config,
      cmake_num_set_entries: setEntriesWithIndices.length.toString(),
      ...env,
    })
    .toDirectory();

  if (options.runnable != null) {
    result = std.withRunnableLink(result, options.runnable);
  }

  return result;
}

export function test() {
  return std.runBash`
    cmake --version | tee "$BRIOCHE_OUTPUT"
  `.dependencies(cmake());
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/Kitware/CMake/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project | from json | update version $version | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}

function isCMakeVariableValue(
  variable: CMakeVariable,
): variable is CMakeVariableValue {
  if (
    typeof variable !== "object" ||
    !("type" in variable) ||
    !("value" in variable)
  ) {
    return false;
  }

  switch (variable.type) {
    case undefined:
    case "PATH":
    case "BOOL":
    case "FILEPATH":
    case "INTERNAL":
    case "STRING":
      return true;
    default:
      return false;
  }
}
