import * as std from "std";
import openssl from "openssl";
import curl from "curl";

export const project = {
  name: "cmake",
  version: "4.1.2",
  repository: "https://github.com/Kitware/CMake",
};

const source = Brioche.download(
  `${project.repository}/releases/download/v${project.version}/cmake-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel()
  .pipe((source) =>
    // Apply patch file
    std.applyPatch({
      source,
      patch,
      strip: 1,
    }),
  );

function patch(): std.Recipe<std.File> {
  // Instead of directly using a fork of CMake, we instead grab the branch
  // `brioche-patches`, diff it from `base/brioche-patches`, then apply it
  // to whichever version of CMake we're building. This may make it easier
  // to stay up-to-date, but it's not clear if this is the right approach...

  return std.recipe(() => {
    const base = Brioche.gitCheckout({
      repository: "https://github.com/brioche-dev/CMake.git",
      ref: "base/brioche-patches",
    });
    const patched = Brioche.gitCheckout({
      repository: "https://github.com/brioche-dev/CMake.git",
      ref: "brioche-patches",
    });

    return std.runBash`
      diff -ru base patched > "$BRIOCHE_OUTPUT" || true
    `
      .workDir(
        std.directory({
          base: base.remove(".git"),
          patched: patched.remove(".git"),
        }),
      )
      .toFile();
  });
}

export default function cmake(): std.Recipe<std.Directory> {
  return std.runBash`
    ./bootstrap \\
      --prefix=/ \\
      --system-curl \\
      --parallel="$(nproc)"
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain, openssl, curl({ minimal: true }))
    .env({
      // Set the number of threads to use during compilation
      OMP_NUM_THREADS: "16",
    })
    .toDirectory()
    .pipe(
      (recipe) =>
        recipe.insert("libexec/cmake/runtime-utils", std.runtimeUtils),
      (recipe) =>
        recipe.insert(
          "libexec/cmake/brioche-packer",
          std.symlink({ target: "runtime-utils/bin/brioche-packer" }),
        ),
      std.pkgConfigMakePathsRelative,
      (recipe) =>
        std.setEnv(recipe, {
          CPATH: { append: [{ path: "include" }] },
          LIBRARY_PATH: { append: [{ path: "lib" }] },
          PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
          ACLOCAL_PATH: { append: [{ path: "share/aclocal" }] },
        }),
      (recipe) => std.withRunnableLink(recipe, "bin/cmake"),
    );
}

/**
 * Options for building and installing a CMake project.
 *
 * @param source - The CMake project to build.
 * @param path - Optional subpath containing the root CMake project to build,
 *   relative to `source`. This can be useful for monorepos with multiple
 *   CMake projects that reference each other.
 * @param dependencies - Optionally add dependencies to the build. Most projects
 *   will want to include `std.toolchain()` or a similar toolchain.
 * @param config - Optionally set the build type on single-configuration generators.
 * @param env - Optionally set environment variables for the build.
 * @param unsafe - Optional unsafe options to enable when building. For example,
 *   passing `{ networking: true }` will allow to download files during the build.
 *   You must take extra care to ensure the build is hermetic when setting these
 *   options!
 * @param set - Optionally set CMake cache variables during the build, as if
 *   by passing `-D...`.
 * @param disablePostBuildSteps - If set, the post build steps will not run. By
 *   default, only `std.pkgConfigMakePathsRelative` will be executed.
 * @param runnable - Optionally set a path to the binary to run by default
 *   (e.g. `bin/foo`).
 */
export interface CMakeBuildInstallOptions {
  source: std.RecipeLike<std.Directory>;
  path?: string;
  dependencies?: std.RecipeLike<std.Directory>[];
  config?: string;
  env?: Record<string, std.ProcessTemplateLike>;
  unsafe?: std.ProcessUnsafeOptions;
  set?: Record<string, CMakeVariable>;
  disablePostBuildSteps?: boolean;
  runnable?: string;
}

export type CMakeVariable = CMakeVariableValue | std.ProcessTemplateLike;

export interface CMakeVariableValue {
  type?: CMakeVariableType;
  value: std.ProcessTemplateLike;
}

export type CMakeVariableType =
  | "BOOL"
  | "FILEPATH"
  | "PATH"
  | "STRING"
  | "INTERNAL";

/**
 * Generate and build a CMake project.
 *
 * @description A project build system will be generated out-of-tree from the source project,
 * and will be built using parallel jobs and installed automatically with the chosen build
 * generator.
 *
 * If the result includes a `lib64/`, the symlink `lib/` will be added
 * automatically to follow the standard Brioche conventions.
 *
 * @remarks To override the number of parallel jobs, set the environment variable `CMAKE_BUILD_PARALLEL_LEVEL`
 * to the desired number. Setting it to `1` will disable parallelism.
 *
 * @param options - The options for building the CMake project.
 *
 * @returns The built CMake project artifact
 */
export function cmakeBuild(
  options: CMakeBuildInstallOptions,
): std.Recipe<std.Directory> {
  const { source, dependencies = [], config = "Release", set = {} } = options;

  const env: Record<string, std.ProcessTemplateLike> = {};

  const setEntries = Object.entries(set);
  setEntries.sort(([aName, _aValue], [bName, _bValue]) => {
    if (aName > bName) {
      return 1;
    } else if (aName < bName) {
      return -1;
    } else {
      return 0;
    }
  });
  const setEntriesWithIndices = setEntries.map(
    ([name, value], index) => [name, value, index] as const,
  );

  for (const [name, variable, index] of setEntriesWithIndices) {
    const value = isCMakeVariableValue(variable) ? variable.value : variable;
    const type = isCMakeVariableValue(variable) ? variable.type : undefined;

    env[`cmake_name_${index}`] = name;
    env[`cmake_value_${index}`] = value;
    env[`cmake_type_${index}`] = type ?? "";
  }

  return std.runBash`
    export LIB="$LIBRARY_PATH"

    cmake_args=()
    for index in $(seq 0 "$((cmake_num_set_entries-1))"); do
      var_cmake_name="cmake_name_$index"
      var_cmake_value="cmake_value_$index"
      var_cmake_type="cmake_type_$index"
      if [ -n "\${!var_cmake_type}" ]; then
        cmake_args+=("-D\${!var_cmake_name}:\${!var_cmake_type}=\${!var_cmake_value}")
      else
        cmake_args+=("-D\${!var_cmake_name}=\${!var_cmake_value}")
      fi
    done

    # If not set, set the build type to the config
    if [ -z "\${CMAKE_BUILD_TYPE:-}" ]; then
      cmake_args+=("-DCMAKE_BUILD_TYPE=$config")
    fi

    # If not set, set the parallel build level to the number of cores
    if [ -z "\${CMAKE_BUILD_PARALLEL_LEVEL:-}" ]; then
      export CMAKE_BUILD_PARALLEL_LEVEL="$(nproc)"
    fi

    build_dir=$(mktemp -p . -d build.XXXXXX)

    cmake -S "$path" -B "$build_dir" --install-prefix "$BRIOCHE_OUTPUT" "\${cmake_args[@]}"
    cmake --build "$build_dir"
    cmake --install "$build_dir"
  `
    .dependencies(...dependencies, cmake)
    .workDir(source)
    .env({
      ...options.env,
      path: options.path ?? ".",
      config,
      cmake_num_set_entries: setEntriesWithIndices.length.toString(),
      ...env,
    })
    .unsafe(options.unsafe)
    .toDirectory()
    .pipe(
      libFolderMakeRelativeSymlink,
      (recipe) => {
        return options.disablePostBuildSteps == null ||
          !options.disablePostBuildSteps
          ? std.pkgConfigMakePathsRelative(recipe)
          : recipe;
      },
      (recipe) => {
        return options.runnable != null
          ? std.withRunnableLink(recipe, options.runnable)
          : recipe;
      },
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    # Only retrieve the first line of the output, other lines are not relevant for the version check
    cmake --version | head -n 1 | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(cmake)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `cmake version ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}

function isCMakeVariableValue(
  variable: CMakeVariable,
): variable is CMakeVariableValue {
  if (
    typeof variable !== "object" ||
    !("type" in variable) ||
    !("value" in variable)
  ) {
    return false;
  }

  switch (variable.type) {
    case undefined:
    case "PATH":
    case "BOOL":
    case "FILEPATH":
    case "INTERNAL":
    case "STRING":
      return true;
    default:
      return false;
  }
}

/**
 * Creates a relative symlink from lib64 to lib folder if lib64 folder exists.
 *
 * @param recipe The recipe to create the symlink for.
 *
 * @returns The recipe with the symlink created.
 */
function libFolderMakeRelativeSymlink(
  recipe: std.RecipeLike<std.Directory>,
): std.Recipe<std.Directory> {
  return std.runBash`
    if [ -d "$BRIOCHE_OUTPUT/lib64" ]; then
      # Ensure the lib folder exists
      mkdir -p "$BRIOCHE_OUTPUT/lib"

      # Create relative symlinks for lib64 contents to lib folder
      ln --symbolic --relative "$BRIOCHE_OUTPUT"/lib64/* "$BRIOCHE_OUTPUT/lib/"
    fi
  `
    .dependencies(std.toolchain)
    .outputScaffold(recipe)
    .toDirectory();
}
