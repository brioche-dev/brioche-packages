import * as std from "std";
import kmod from "kmod";
import openssl from "openssl";
import python from "python";
import { nushellRunnable, type NushellRunnable } from "nushell";

export const project = {
  name: "linux",
  version: "6.17",
  extra: {
    majorVersion: "6",
  },
};

// Ensure the major version number matches the version
std.assert(project.version.startsWith(`${project.extra.majorVersion}.`));

/**
 * The Linux kernel source tree. Cleaned by running `make distclean`
 * within the directory, as recommended.
 */
export function linuxSource(): std.Recipe<std.Directory> {
  const source = Brioche.download(
    `https://cdn.kernel.org/pub/linux/kernel/v${project.extra.majorVersion}.x/linux-${project.version}.tar.xz`,
  )
    .unarchive("tar", "xz")
    .peel();
  return distClean(source);
}

interface LinuxDefconfigOptions {
  env?: Record<string, std.ProcessTemplateLike>;
  dependencies?: std.RecipeLike<std.Directory>[];
}

/**
 * Generate a default Linux kernel `.config` file using `make defconfig`.
 */
export function linuxDefconfig(
  options: LinuxDefconfigOptions = {},
): std.Recipe<std.File> {
  const { env = {}, dependencies = [] } = options;

  const source = linuxSource();

  return std.runBash`
    make defconfig
  `
    .workDir(source)
    .dependencies(...dependencies, ldWrapper, std.toolchain)
    .env({
      ...env,
      KCONFIG_CONFIG: std.outputPath,
    })
    .toFile();
}

/**
 * Options for the Linux kernel build.
 *
 * @param config - The kernel `.config` file to use for the build. Defaults
 *   to the default configuration produced by `make defconfig`.
 * @param dependencies - Additional build dependencies.
 * @param env - Additional environment variables to set during the build.
 */
interface LinuxOptions {
  config?: std.RecipeLike<std.File>;
  dependencies?: std.RecipeLike<std.Directory>[];
  env?: Record<string, std.ProcessTemplateLike>;
}

/**
 * A recipe that builds the Linux kernel. Defaults to using a default
 * configuration using `make defconfig`.
 *
 * @description The output will contain the following paths:
 * - `boot/linux`: A symlink to the kernel image within `boot/`.
 * - `boot/System.map`: The kernel's system map.
 * - `lib/modules/${version}`: Built kernel modules.
 *
 * @param options - Options for the Linux kernel build.
 *
 * @returns A recipe containing the built Linux kernel with boot files and modules
 */
export default function linux(
  options: LinuxOptions = {},
): std.Recipe<std.Directory> {
  const { config = linuxDefconfig(), env = {}, dependencies = [] } = options;

  const source = linuxSource().insert(".config", config);

  // Build and install the kernel. We explicitly install the kernel image
  // and `System.map` because not all architectures have a `make install`
  // target
  return std.runBash`
    make -j "$(nproc)"

    image_path="$(make image_name)"
    image_name="$(basename "$image_path")"

    mkdir -p "$BRIOCHE_OUTPUT/boot"
    install -m 0644 "$image_path" "$BRIOCHE_OUTPUT/boot/$image_name"
    install -m 0644 System.map "$BRIOCHE_OUTPUT/boot/System.map"
    if [ ! -f "$BRIOCHE_OUTPUT/boot/linux" ]; then
      ln -s "$image_name" "$BRIOCHE_OUTPUT/boot/linux"
    fi

    make modules_install
  `
    .workDir(source)
    .dependencies(
      ...dependencies,
      kmod,
      openssl,
      python,
      ldWrapper,
      std.toolchain,
    )
    .env({
      // Set the number of threads to use during compilation
      OMP_NUM_THREADS: "16",

      INSTALL_MOD_PATH: std.outputPath,

      // Needed since we're using `ld.bfd`, which tries to resolve transitive
      // dependencies for libraries, so it needs to know where to look
      HOSTLDFLAGS: std.tpl`-Wl,-rpath-link,${std.toolchain}/lib`,

      // Needed because tools from the kernel build use `pthread_exit`, which
      // dynamically opens `libgcc_s.so.1`, which is not directly a dependency
      // of glibc
      LD_LIBRARY_PATH: std.tpl`${std.toolchain}/lib`,

      ...env,
    })
    .toDirectory();
}

export async function test(): Promise<std.Recipe<std.File>> {
  // Make sure the version is valid for kmod tools by always using the format
  // 'X.Y.Z'
  let linuxVersion = project.version;
  if (project.version.split(".").length === 2) {
    linuxVersion += ".0";
  }

  // There are plenty of modules built-in, just pick one that should stay
  // in the tree across kernel updates
  const script = std.runBash`
    modinfo "$linux_path/lib/modules/$linux_version/kernel/fs/fuse/fuse.ko" | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(kmod)
    .env({
      linux_path: linux,
      linux_version: linuxVersion,
    })
    .toFile();

  const result = (await script.read()).trim();

  const versionMatch = result.match(/vermagic:\s+([^\s]+)\s+(.*)/);
  const version = versionMatch?.[1] ?? "";

  // Check that the result contains the expected version
  const expected = linuxVersion;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export function liveUpdate(): NushellRunnable {
  return nushellRunnable`
    let sourceUrl = http get https://cdn.kernel.org/pub/linux/kernel
      | lines
      | parse --regex '<a href="v(?<version>.+)/">'
      | sort-by --natural --reverse version
      | get 0.version

    let version = http get $"https://cdn.kernel.org/pub/linux/kernel/v($sourceUrl)"
      | lines
      | where {|it| ($it | str contains 'linux') and ($it | str contains '.tar.xz') }
      | parse --regex '<a href="linux-(?<version>[^"]+)\.tar\.xz"'
      | sort-by --natural --reverse version
      | get 0.version

    let majorVersion = $version
      | split words
      | get 0

    $env.project
      | from json
      | update version $version
      | update extra.majorVersion $majorVersion
      | to json
  `.env({ project: JSON.stringify(project) });
}

type LinuxUpdateConfigValue =
  | true
  | false
  | undefined
  | "module"
  | { value: string }
  | { enableAfter: string }
  | { disableAfter: string }
  | { moduleAfter: string };

/**
 * Update a Linux kernel configuration file by setting (or un-setting)
 * various configuration values.
 *
 * @param config - The base kernel configuration file to start with.
 * @param values - An object mapping configuration options to their values. Each
 *   value can be one of the following:
 *   - `true`: Enable the option
 *   - `false`: Disable the option
 *   - `"module"`: Enable the option as a module
 *   - `undefined`: Unset the option
 *   - `{ value: string }`: Set the option to a specific string value
 *   - `{ enableAfter: string }`: Enable the option after another option is
 *      enabled
 *   - `{ disableAfter: string }`: Disable the option after another option
 *      is disabled
 *   - `{ moduleAfter: string }`: Enable the option as a module after
 *      another option is enabled
 *
 * @returns An updated Linux kernel configuration file
 *
 * @example
 * ```typescript
 * const config = linuxUpdateConfig(linuxDefconfig(), {
 *   VIRTIO: true, // enable CONFIG_VIRTIO
 *   USER_NS: false, // disable CONFIG_USER_NS
 *   OVERLAY_FS: "module", // enable CONFIG_OVERLAY_FS as a module
 *   DEFAULT_INIT: { value: "/example" }, // override the default init path
 * });
 * ```
 */
export function linuxUpdateConfig(
  config: std.RecipeLike<std.File>,
  values: Record<string, LinuxUpdateConfigValue>,
): std.Recipe<std.File> {
  const args = Object.entries(values).flatMap(([key, value]) => {
    if (value === true) {
      return ["--enable", key];
    } else if (value === false) {
      return ["--disable", key];
    } else if (value === "module") {
      return ["--module", key];
    } else if (value == null) {
      return ["--unset", key];
    } else if (typeof value === "object") {
      if ("value" in value) {
        return ["--set-str", key, value.value];
      } else if ("enableAfter" in value) {
        return ["--enable-after", key, value.enableAfter];
      } else if ("disableAfter" in value) {
        return ["--disable-after", key, value.disableAfter];
      } else if ("moduleAfter" in value) {
        return ["--module-after", key, value.moduleAfter];
      } else {
        return std.unreachable(value);
      }
    } else {
      return std.unreachable(value);
    }
  });

  return std
    .process({
      command: std.tpl`${linuxSource}/scripts/config`,
      args: ["--file", std.outputPath, ...args],
      dependencies: [std.tools],
      outputScaffold: config,
    })
    .toFile();
}

function distClean(
  source: std.RecipeLike<std.Directory>,
): std.Recipe<std.Directory> {
  return std.runBash`
    cd "$BRIOCHE_OUTPUT"
    make distclean
  `
    .dependencies(std.toolchain)
    .outputScaffold(source)
    .toDirectory();
}

function ldWrapper(): std.Recipe<std.Directory> {
  // Create a custom wrapper to use `ld.bfd` instead of gold when linking.
  // HACK: We also explicitly disable autopacking based on the output filename,
  // but `brioche-ld` should handle these edge cases better.
  return std.directory({
    "bin/ld": std
      .file(std.indoc`
        #!/usr/bin/env sh

        for (( i=1; i <= "$#"; i++ )); do
            if [[ "\${!i}" == "-o" ]]; then
                i=$((i + 1))
                case "\${!i}" in
                    *.o | *.ko | *.elf | *vmlinux* )
                        export BRIOCHE_LD_AUTOPACK=false
                        ;;
                    *)
                        ;;
                esac
            fi
        done

        exec ld.bfd "$@"
      `)
      .withPermissions({ executable: true }),
  });
}
