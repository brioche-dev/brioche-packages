import * as std from "std";
import nushell from "nushell";

export const project = {
  name: "libarchive",
  version: "3.8.0",
};

const source = Brioche.download(
  `https://www.libarchive.org/downloads/libarchive-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function libarchive(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure --prefix="$BRIOCHE_OUTPUT"
    make
    make install
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .toDirectory()
    .pipe((recipe) =>
      std.setEnv(recipe, {
        CPATH: { append: [{ path: "include" }] },
        LIBRARY_PATH: { append: [{ path: "lib" }] },
        PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
      }),
    );
}

export async function test() {
  const script = std.runBash`
    pkg-config --modversion libarchive | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, libarchive)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://www.libarchive.de/downloads
      | lines
      | where {|it| $it | str contains "libarchive" }
      | parse --regex '<a href="./libarchive-(?<version>.+)\.tar\.gz">'
      | sort-by --natural --reverse version
      | get 0.version

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}
