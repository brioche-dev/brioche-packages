import nushell from "nushell";
import * as std from "std";
import { goBuild } from "go";
import { gitCheckout } from "git";

export const project = {
  name: "terraform",
  version: "1.11.4",
};

const source = gitCheckout(
  Brioche.gitRef({
    repository: "https://github.com/hashicorp/terraform.git",
    ref: `v${project.version}`,
  }),
);

export default function terraform(): std.Recipe<std.Directory> {
  const patchedSource = std.runBash`
    # Workaround for Go 1.24, see: https://github.com/NixOS/nixpkgs/blob/2631b0b7abcea6e640ce31cd78ea58910d31e650/pkgs/applications/networking/cluster/terraform/default.nix#L48
    cd "$BRIOCHE_OUTPUT"
    sed -i 's/godebug tlskyber=0/godebug tlsmlkem=0/g' go.mod
  `
    .outputScaffold(source)
    .toDirectory();

  return goBuild({
    source: patchedSource,
    buildParams: {
      ldflags: ["-w", "-s", `-X github.com/hashicorp/terraform/version.dev=no`],
      mod: "readonly",
    },
    runnable: "bin/terraform",
  });
}

export async function test() {
  const script = std.runBash`
    # Only retrieve the first line of the output, other lines are not relevant for the version check
    echo -n $(terraform --version | head -n 1) | tee "$BRIOCHE_OUTPUT"
  `.dependencies(terraform());

  const result = await script.toFile().read();

  // Check that the result contains the expected version
  const expected = `Terraform v${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export async function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/hashicorp/terraform/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
