import * as std from "std";
import { cargoBuild } from "rust";

export const project = {
  name: "asciinema",
  version: "3.0.0",
  extra: {
    crateName: "asciinema",
  },
};

const source = Brioche.download(
  `https://crates.io/api/v1/crates/${project.extra.crateName}/${project.version}/download`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function asciinema(): std.Recipe<std.Directory> {
  return cargoBuild({
    source: source,
    runnable: "bin/asciinema",
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  // Generate a locale which is required by asciinema to run properly
  const locale = std.runBash`
    mkdir -p "$BRIOCHE_OUTPUT"/C.UTF-8
    localedef -i POSIX -f UTF-8 "$BRIOCHE_OUTPUT"/C.UTF-8 || true
  `
    .dependencies(std.toolchain)
    .env({
      I18NPATH: std.tpl`${std.toolchain}/share/i18n`,
    })
    .toDirectory();

  const script = std.runBash`
    asciinema --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(asciinema)
    .env({
      LOCPATH: locale,
      LANG: "C.UTF-8",
    })
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `asciinema ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export async function liveUpdate(): Promise<std.Recipe<std.Directory>> {
  return std.liveUpdateFromRustCrates({ project });
}
