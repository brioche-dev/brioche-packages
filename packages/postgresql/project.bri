import * as std from "std";
import icu from "icu";
import openssl from "openssl";
import libxml from "libxml2";
import libxslt from "libxslt";
import nushell from "nushell";
import curl from "curl";

export const project = {
  name: "postgresql",
  version: "17.4",
};

const source = Brioche.download(
  `https://ftp.postgresql.org/pub/source/v${project.version}/postgresql-${project.version}.tar.bz2`,
)
  .unarchive("tar", "bzip2")
  .peel();

export default function postgresql(): std.Recipe<std.Directory> {
  let postgresql = std.runBash`
    ./configure \\
      --prefix=/ \\
      --disable-rpath \\
      --with-zstd \\
      --with-openssl \\
      --with-uuid=e2fs \\
      --with-libxml \\
      --with-libxslt
    make world-bin -j16
    make install-world-bin DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain(), icu(), openssl(), libxml(), libxslt())
    .toDirectory();

  postgresql = std.setEnv(postgresql, {
    LIBRARY_PATH: { append: [{ path: "lib" }] },
    CPATH: { append: [{ path: "include" }] },
    PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
  });

  return postgresql;
}

export async function test() {
  const script = std.runBash`
    echo -n $(postgres --version) | tee "$BRIOCHE_OUTPUT"
  `.dependencies(postgresql());

  const result = await script.toFile().read();

  // Check that the result contains the expected version
  const expected = `postgres (PostgreSQL) ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    # Get the URL that '/ftp/latest' redirects to. The resulting URL
    # will have the version number at the end
    let latestUrl = curl --proto '=https' --tlsv1.2 -fsSLI -o /dev/null 'https://www.postgresql.org/ftp/latest' -w '%{url_effective}'

    let version = $latestUrl
      | parse --regex '/ftp/source/v([\\d\\.]+)/?$'
      | get 0.capture0

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell(), curl()],
  });
}
