import * as std from "std";
import icu from "icu";
import openssl from "openssl";
import libxml from "libxml2";
import libxslt from "libxslt";
import { nushellRunnable, type NushellRunnable } from "nushell";
import curl from "curl";

export const project = {
  name: "postgresql",
  version: "18.0",
};

const source = Brioche.download(
  `https://ftp.postgresql.org/pub/source/v${project.version}/postgresql-${project.version}.tar.bz2`,
)
  .unarchive("tar", "bzip2")
  .peel();

export default function postgresql(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure \\
      --prefix=/ \\
      --disable-rpath \\
      --with-zstd \\
      --with-openssl \\
      --with-uuid=e2fs \\
      --with-libxml \\
      --with-libxslt
    make -j "$(nproc)" world-bin
    make install-world-bin DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain, icu, openssl, libxml, libxslt)
    .env({
      // Set the number of threads to use during compilation
      OMP_NUM_THREADS: "16",
    })
    .toDirectory()
    .pipe(
      std.pkgConfigMakePathsRelative,
      (recipe) =>
        std.setEnv(recipe, {
          LIBRARY_PATH: { append: [{ path: "lib" }] },
          CPATH: { append: [{ path: "include" }] },
          PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
        }),
      (recipe) => std.withRunnableLink(recipe, "bin/postgres"),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    postgres --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(postgresql)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `postgres (PostgreSQL) ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): NushellRunnable {
  return nushellRunnable`
    # Get the URL that '/ftp/latest' redirects to. The resulting URL
    # will have the version number at the end
    let latestUrl = curl --proto '=https' --tlsv1.2 -fsSLI -o /dev/null 'https://www.postgresql.org/ftp/latest' -w '%{url_effective}'

    let version = $latestUrl
      | parse --regex '/ftp/source/v([\\d\\.]+)/?$'
      | get 0.capture0

    $env.project
      | from json
      | update version $version
      | to json
  `
    .env({ project: JSON.stringify(project) })
    .dependencies(curl);
}
