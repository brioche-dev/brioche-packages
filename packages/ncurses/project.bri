import * as std from "std";
import { nushellRunnable, type NushellRunnable } from "nushell";

export const project = {
  name: "ncurses",
  version: "6.5",
};

const source = Brioche.download(
  `https://ftp.gnu.org/gnu/ncurses/ncurses-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function ncurses(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure \
      --prefix=/ \
      --without-debug \
      --with-shared \
      --with-cxx-shared \
      --with-versioned-syms \
      --enable-sigwinch \
      --enable-symlinks \
      --enable-pc-files \
      --enable-widec \
      --with-pkg-config-libdir=/lib/pkgconfig
    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .toDirectory()
    .pipe(std.pkgConfigMakePathsRelative, (recipe) =>
      std.setEnv(recipe, {
        CPATH: { append: [{ path: "include" }] },
        LIBRARY_PATH: { append: [{ path: "lib" }] },
        PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
      }),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    pkg-config --modversion ncursesw | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, ncurses)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `${project.version}.`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): NushellRunnable {
  return nushellRunnable`
    let version = http get https://ftp.gnu.org/gnu/ncurses
      | lines
      | where {|it| ($it | str contains "ncurses-") and (not ($it | str contains ".sig")) }
      | parse --regex '<a href="ncurses-(?<version>.+)\.tar\.gz">'
      | sort-by --natural --reverse version
      | get 0.version

    $env.project
      | from json
      | update version $version
      | to json
  `.env({ project: JSON.stringify(project) });
}
