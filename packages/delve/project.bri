import * as std from "std";
import { goBuild } from "go";

export const project = {
  name: "delve",
  version: "1.25.2",
  repository: "https://github.com/go-delve/delve.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `v${project.version}`,
});

export default function delve(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    buildParams: {
      ldflags: ["-s", "-w"],
    },
    path: "./cmd/dlv",
    runnable: "bin/dlv",
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    dlv version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(delve)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `Version: ${project.version}`;
  std.assert(
    result.includes(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export async function liveUpdate(): Promise<std.Recipe<std.Directory>> {
  return std.liveUpdateFromGithubReleases({ project });
}
