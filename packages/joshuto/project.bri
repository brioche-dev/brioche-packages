import nushell from "nushell";
import * as std from "std";
import { cargoBuild } from "rust";

export const project = {
  name: "joshuto",
  version: "0.9.9",
};

const source = Brioche.gitCheckout({
  repository: "https://github.com/kamiyaa/joshuto.git",
  ref: `v${project.version}`,
});

export default function joshuto(): std.Recipe<std.Directory> {
  return cargoBuild({
    source,
    runnable: "bin/joshuto",
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    joshuto --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(joshuto)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `joshuto-${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.WithRunnable {
  const src = std.file(std.indoc`
    # Version can either be prefixed with 'v' or not
    let version = http get https://api.github.com/repos/kamiyaa/joshuto/git/matching-refs/tags
      | get ref
      | each {|ref|
        $ref
        | parse --regex '^refs/tags/v?(?P<tag>(?P<major>[\\d]+)\\.(?P<minor>[\\d]+)\\.(?P<patch>[\\d]+))$'
        | get -i 0
      }
      | sort-by -n major minor patch
      | last
      | get tag

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}
