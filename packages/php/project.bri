import * as std from "std";
import nushell from "nushell";
import libxml2 from "libxml2";
import sqlite from "sqlite";

export const project = {
  name: "php",
  version: "8.4.6",
};

const source = Brioche.download(
  `https://www.php.net/distributions/php-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function php(): std.Recipe<std.Directory> {
  let php = std.runBash`
    ./configure --prefix="$BRIOCHE_OUTPUT"
    make -j16
    make install
  `
    .dependencies(std.toolchain(), libxml2(), sqlite())
    .workDir(source)
    .toDirectory();

  php = std.setEnv(php, {
    CPATH: { append: [{ path: "include" }] },
    LIBRARY_PATH: { append: [{ path: "lib" }] },
  });

  return std.withRunnableLink(php, "bin/php");
}

export async function test() {
  const script = std.runBash`
    php --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(php())
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `PHP ${project.version} (cli)`;
  std.assert(
    result.startsWith(expected),
    `result '${result}' should start with expected '${expected}'`,
  );

  return script;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let releaseData = http get https://api.github.com/repos/php/php-src/releases/latest

    let version = $releaseData
      | get tag_name
      | str replace --regex '^php-' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
