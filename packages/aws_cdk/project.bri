import * as std from "std";
import { npmInstallGlobal } from "nodejs";
import nushell from "nushell";

export const project = {
  name: "aws_cdk",
  version: "2.1010.0",
  packageName: "aws-cdk",
};

export default function awsCdk() {
  const recipe = npmInstallGlobal({
    packageName: project.packageName,
    version: project.version,
  });

  return std.withRunnableLink(recipe, "bin/cdk");
}

export async function test() {
  const script = std.runBash`
    cdk --version | tee "$BRIOCHE_OUTPUT"
  `.dependencies(awsCdk());

  const result = await script.toFile().read();

  const versionMatch = result.match(/([^\s]+) \(build [^\s]+\)/);
  const version = versionMatch == null ? null : versionMatch[1];

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let releaseData = http get https://registry.npmjs.org/${project.packageName}/latest

    let version = $releaseData
      | get version
      | str replace --regex '^v' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
