import * as std from "std";
import { npmInstallGlobal } from "nodejs";

export const project = {
  name: "aws_cdk",
  version: "2.1022.0",
  extra: {
    packageName: "aws-cdk",
  },
};

export default function awsCdk(): std.Recipe<std.Directory> {
  return npmInstallGlobal({
    packageName: project.extra.packageName,
    version: project.version,
  }).pipe((recipe) => std.withRunnableLink(recipe, "bin/cdk"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    cdk --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(awsCdk)
    .toFile();

  const result = (await script.read()).trim();

  const versionMatch = result.match(/([^\s]+) \(build [^\s]+\)/);
  const version = versionMatch == null ? null : versionMatch[1];

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromNpmPackages({ project });
}
