import * as std from "std";
import { nushellRunnable, type NushellRunnable } from "nushell";

export const project = {
  name: "gperf",
  version: "3.3",
};

const source = Brioche.download(
  `https://ftp.gnu.org/gnu/gperf/gperf-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function gperf(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure --prefix=/
    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .toDirectory()
    .pipe((recipe) => std.withRunnableLink(recipe, "bin/gperf"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    gperf --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(gperf)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `GNU gperf ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): NushellRunnable {
  return nushellRunnable`
    let version = http get https://ftp.gnu.org/gnu/gperf
      | lines
      | where {|it| ($it | str contains "gperf-") and (not ($it | str contains ".sig")) }
      | parse --regex '<a href="gperf-(?<version>.+)\.tar\.gz">'
      | sort-by --natural --reverse version
      | get 0.version

    $env.project
      | from json
      | update version $version
      | to json
  `.env({ project: JSON.stringify(project) });
}
