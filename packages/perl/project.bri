import * as std from "std";

export const project = {
  name: "perl",
  version: "5.40.1",
};

const source = Brioche.download(
  `https://www.cpan.org/src/5.0/perl-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function perl(): std.Recipe<std.Directory> {
  // Perl will fail to build if there isn't at least one extra locale
  // at build time, so generate a `C.UTF-8` locale
  const locale = std.runBash`
    mkdir -p "$BRIOCHE_OUTPUT"/C.UTF-8
    localedef -i POSIX -f UTF-8 "$BRIOCHE_OUTPUT"/C.UTF-8 || true
  `
    .dependencies(std.toolchain)
    .env({
      I18NPATH: std.tpl`${std.toolchain}/share/i18n`,
    })
    .toDirectory();

  return std.runBash`
    sh Configure \\
      -des \\
      -Dprefix=/ \\
      -Duserelocatableinc \\
      -Dusethreads
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .env({
      LOCPATH: locale,
      LANG: "C.UTF-8",
    })
    .toDirectory();
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    perl --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(perl)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `v${project.version}`;
  std.assert(
    result.includes(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}
