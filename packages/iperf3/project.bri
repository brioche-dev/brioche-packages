import * as std from "std";

export const project = {
  name: "iperf3",
  version: "3.19.1",
  repository: "https://github.com/esnet/iperf.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: project.version,
});

export default function iperf3(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure --prefix=/
    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .toDirectory();
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    iperf3 --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(iperf3)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `iperf ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({
    project,
  });
}
