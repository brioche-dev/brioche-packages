import * as std from "std";
import nushell from "nushell";

export const project = {
  name: "libtirpc",
  version: "1.3.6",
};

const source = Brioche.download(
  `https://sourceforge.net/projects/libtirpc/files/libtirpc/${project.version}/libtirpc-${project.version}.tar.bz2/download`,
)
  .unarchive("tar", "bzip2")
  .peel();

export default function libtirpc(): std.Recipe<std.Directory> {
  return std.runBash`
    ./bootstrap
    ./configure \\
      --prefix=/ \\
      --disable-gssapi
    make -j16
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .toDirectory()
    .pipe(
      (recipe) =>
        std.setEnv(recipe, {
          CPATH: { append: [{ path: "include" }] },
          LIBRARY_PATH: { append: [{ path: "lib" }] },
          PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
        }),
      makePkgConfigPathsRelative,
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    pkg-config --modversion libtirpc | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, libtirpc)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate() {
  const src = std.file(std.indoc`
    let sourceUrl = http get https://sourceforge.net/projects/libtirpc/files/libtirpc
      | lines
      | where {|it| $it | str contains 'href="/projects/libtirpc/files/libtirpc/' }
      | parse --regex '<a href="/projects/libtirpc/files/libtirpc/(?<version>.+)/"'
      | sort-by --natural --reverse version
      | get 0.version

    let version = http get $"https://sourceforge.net/projects/libtirpc/files/libtirpc/($sourceUrl)"
      | lines
      | where {|it| ($it | str contains '<a href="https://sourceforge.net') and ($it | str contains '.tar.bz2') }
      | parse --regex ($"<a href=\\"https://sourceforge.net/projects/libtirpc/files/libtirpc/($sourceUrl)/libtirpc-" + '(?<version>[^"]+)\.tar\.bz2/')
      | sort-by --natural --reverse version
      | get 0.version

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}

// TODO: Figure out where to move this, this is copied from `std`
function makePkgConfigPathsRelative(
  recipe: std.RecipeLike<std.Directory>,
): std.Recipe<std.Directory> {
  // Replaces things that look like absolute paths in pkg-config files with
  // relative paths (using the `${pcfiledir}` variable)
  return std.runBash`
    find "$BRIOCHE_OUTPUT"/lib/pkgconfig -name '*.pc' -type f -print0 \
      | while IFS= read -r -d $'\\0' file; do
        sed -i 's|=/|=\${pcfiledir}/../../|' "$file"
      done
  `
    .outputScaffold(recipe)
    .toDirectory();
}
