import * as std from "std";
import { gitCheckout } from "git";
import { goBuild } from "go";

export const project = {
  name: "k9s",
  version: "0.50.6",
  repository: "https://github.com/derailed/k9s.git",
};

const gitRef = await Brioche.gitRef({
  repository: project.repository,
  ref: `v${project.version}`,
});
const source = gitCheckout(gitRef);

export default function k9s(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    buildParams: {
      ldflags: [
        "-s",
        "-w",
        "-X",
        `github.com/derailed/k9s/cmd.version=${project.version}`,
        "-X",
        `github.com/derailed/k9s/cmd.commit=${gitRef.commit}`,
      ],
    },
    runnable: "bin/k9s",
  });
}

export async function test() {
  const script = std.runBash`
    # Remove ANSI color codes from the output, before extracting the version
    k9s version | sed -r 's/\x1B\[[0-9;]*[mK]//g' | awk '/^Version:/ { print $2 }' | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(k9s)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export async function liveUpdate() {
  return std.liveUpdateFromGithubReleases({ project });
}
