import nushell from "nushell";
import * as std from "std";
import { gitCheckout } from "git";
import { goBuild } from "go";

export const project = {
  name: "k9s",
  version: "0.32.7",
};

const gitRef = await Brioche.gitRef({
  repository: "https://github.com/derailed/k9s.git",
  ref: `v${project.version}`,
});
const source = gitCheckout(gitRef);

export default function (): std.Recipe<std.Directory> {
  return goBuild({
    source,
    buildParams: {
      ldflags: [
        "-s",
        "-w",
        `-X github.com/derailed/k9s/cmd.version=${project.version}`,
        `-X github.com/derailed/k9s/cmd.commit=${gitRef.commit}`,
      ],
    },
    runnable: "bin/k9s",
  });
}

export async function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/derailed/k9s/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project | from json | update version $version | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
