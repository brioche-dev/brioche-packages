import * as std from "std";

export const project = {
  name: "pv",
  version: "1.9.27",
};

const source = Brioche.download(
  `https://www.ivarch.com/programs/sources/pv-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function pv(): std.Recipe<std.Directory> {
  const pv = std.runBash`
    ./configure --prefix=/
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain())
    .toDirectory();

  return std.withRunnableLink(pv, "bin/pv");
}

export async function test() {
  const script = std.runBash`
    pv --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(pv())
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `pv ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}
