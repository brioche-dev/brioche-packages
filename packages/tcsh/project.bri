import * as std from "std";
import nushell from "nushell";

export const project = {
  name: "tcsh",
  version: "6.24.15",
};

const source = Brioche.download(
  `https://astron.com/pub/tcsh/tcsh-${project.version}.tar.gz`,
)
  .unarchive("tar", "gzip")
  .peel();

export default function tcsh(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure \\
      --prefix=/
    make
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain)
    .workDir(source)
    .toDirectory()
    .pipe((recipe) => std.withRunnableLink(recipe, "bin/tcsh"));
}

export async function test() {
  const script = std.runBash`
    tcsh --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(tcsh)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `tcsh ${project.version}`;
  std.assert(
    result.startsWith(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://astron.com/pub/tcsh
      | lines
      | where {|it| ($it | str contains "tcsh") and (not ($it | str contains ".asc")) }
      | parse --regex '<a href="tcsh-(?<version>.+)\.tar\.[^"]+">'
      | sort-by --natural --reverse version
      | get 0.version

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell],
  });
}
