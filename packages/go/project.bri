import * as std from "std";
import caCertificates from "ca_certificates";

export const project = {
  name: "go",
  version: "1.24.0",
};

/**
 * The Go programming language.
 *
 * Returns a recipe containing the standard Go tools, including:
 *
 * - `go/bin/go`
 * - `go/bin/gofmt`
 * - `bin/go` (symlink to `go/bin/go`)
 * - `bin/gofmt` (symlink to `go/bin/gofmt`)
 *
 * The directory `go` is intended to be used as the `$GOROOT` env var.
 */
export default function go(): std.Recipe<std.Directory> {
  const goRoot = Brioche.download(
    `https://go.dev/dl/go${project.version}.linux-amd64.tar.gz`,
  )
    .unarchive("tar", "gzip")
    .peel();

  let go = std.directory({
    go: goRoot,
    bin: std.directory({
      go: std.symlink({ target: "../go/bin/go" }),
      gofmt: std.symlink({ target: "../go/bin/gofmt" }),
    }),
  });
  go = std.setEnv(go, {
    GOROOT: { fallback: { path: "go" } },
  });
  go = std.withRunnableLink(go, "go/bin/go");

  return go;
}

type ModOptions = "readonly" | "vendor" | "mod";

interface GoBuildParameters {
  generate?: boolean;
  ldflags?: string[];
  trimpath?: boolean;
  mod?: ModOptions;
}

interface GoBuildOptions {
  source: std.AsyncRecipe<std.Directory>;
  dependencies?: std.AsyncRecipe<std.Directory>[];
  env?: Record<string, std.ProcessTemplateLike>;
  buildParams?: GoBuildParameters;
  path?: string;
  runnable?: string;
}

/**
 * Build a Go module. Calls `go install` in the module directory, and
 * returns a recipe with the results stored in the `bin/` directory.
 *
 * ## Options
 *
 * - `source`: The Go module to build. Should include `go.mod`, as well as
 *   `go.sum` if external dependencies are needed.
 * - `buildParams`: Optional build parameters:
 *   - `generate`: Run `go generate` before building.
 *   - `ldflags`: An array of ldflags to pass to the `go install` command.
 *   - `trimpath`: Set the `-trimpath` flag.
 *   - `mod`: Set the `-mod` flag to one of `"readonly"`, `"vendor"`, or `"mod"`.
 * - `dependencies`: Optionally add additional dependencies to the build.
 * - `env`: Optionally set environment variables for the build.
 * - `path`: Optionally set the package path to build (e.g. `./cmd/foo`).
 * - `runnable`: Optionally set a path to the binary to run
 *   by default (e.g. `bin/foo`).
 *
 * ## Example
 *
 * ```typescript
 * import { goBuild } from "go";
 * import openssl from "openssl";
 *
 * export default function {
 *   return goBuild({
 *     source: Brioche.glob("**\/*.go", "go.mod", "go.sum"),
 *     dependencies: [openssl()],
 *     env: {
 *       CGO_ENABLED: "0",
 *     },
 *     buildParams: {
 *       generate: true,
 *       trimpath: true,
 *       mod: "readonly",
 *       ldflags: [
 *         "-s",
 *         "-w"
 *       ],
 *     },
 *     path: "./cmd/hello",
 *     runnable: "bin/hello",
 *   });
 * };
 * ```
 */
export function goBuild(options: GoBuildOptions): std.Recipe<std.Directory> {
  const modules = goModDownload(options.source);

  let buildResult = std.runBash`
    # Run generate if requested
    if [ "$go_generate" = "true" ]; then
      go generate ./...
    fi

    goargs=()

    if [ -n "$ldflags" ]; then
      goargs+=("-ldflags=$ldflags")
    fi

    if [ "$trimpath" = "true" ]; then
      goargs+=("-trimpath")
    fi

    if [ -n "$mod" ]; then
      goargs+=("-mod=$mod")
    fi

    go install "\${goargs[@]}" "$package_path"
  `
    .workDir(options.source)
    .dependencies(go(), ...(options.dependencies ?? []))
    .env({
      GOMODCACHE: modules,
      GOBIN: std.tpl`${std.outputPath}/bin`,
      go_generate: options.buildParams?.generate ?? false ? "true" : "false",
      ldflags: ldflagsWrapper(options.buildParams?.ldflags ?? []),
      trimpath: options.buildParams?.trimpath ?? false ? "true" : "false",
      mod: options.buildParams?.mod ?? "",
      package_path: options.path ?? ".",
      ...options.env,
    })
    .toDirectory();

  if (options.runnable != null) {
    buildResult = std.withRunnableLink(buildResult, options.runnable);
  }

  return buildResult;
}

function goModDownload(
  goModule: std.AsyncRecipe<std.Directory>,
): std.Recipe<std.Directory> {
  return std.runBash`
    go mod download all
  `
    .workDir(std.glob(goModule, ["**/go.mod", "**/go.sum"]))
    .dependencies(go(), caCertificates())
    .env({ GOMODCACHE: std.outputPath })
    .unsafe({ networking: true })
    .toDirectory();
}

/**
 * Wrapper function to escape ldflags for use in a shell command.
 * Escapes single quotes and double quotes.
 *
 * @param ldflags An array of ldflags to escape.
 * @returns A string of escaped ldflags.
 */
function ldflagsWrapper(ldflags: string[]): string {
  return ldflags.map((ldflag) => ldflag.replace(/['"]/g, "\\$&")).join(" ");
}
