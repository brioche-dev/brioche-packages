import * as std from "std";
import git from "git";
import { goBuild } from "go";

export const project = {
  name: "rclone",
  version: "1.70.2",
  repository: "https://github.com/rclone/rclone.git",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `v${project.version}`,
});

export default function rclone(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    dependencies: [git],
    runnable: "bin/rclone",
    buildParams: {
      // Remove `-DEV` suffix from version number
      ldflags: ["-s", "-w", "-X", "github.com/rclone/rclone/fs.VersionSuffix="],
    },
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    rclone --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(rclone)
    .toFile();

  const result = (await script.read()).trim();

  const version = result.split("\n").at(0);

  // Check that the result contains the expected version
  const expected = `rclone v${project.version}`;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
