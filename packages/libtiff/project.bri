import * as std from "std";
import lerc from "lerc";
import libdeflate from "libdeflate";
import libjpegTurbo from "libjpeg_turbo";

export const project = {
  name: "libtiff",
  version: "4.7.1",
  repository: "https://gitlab.com/libtiff/libtiff",
};

const source = Brioche.download(
  `http://download.osgeo.org/libtiff/tiff-${project.version}.tar.xz`,
)
  .unarchive("tar", "xz")
  .peel();

export default function libtiff(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure --prefix=/
    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain, lerc, libdeflate, libjpegTurbo)
    .toDirectory()
    .pipe(std.libtoolSanitizeDependencies)
    .pipe(std.pkgConfigMakePathsRelative)
    .pipe((recipe) =>
      std.setEnv(recipe, {
        CPATH: { append: [{ path: "include" }] },
        LIBRARY_PATH: { append: [{ path: "lib" }] },
        PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
      }),
    )
    .pipe((recipe) => std.withRunnableLink(recipe, "bin/tiffinfo"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    pkg-config --modversion libtiff-4 | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(std.toolchain, libtiff)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected output
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGitlabReleases({ project });
}
