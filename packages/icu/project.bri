import * as std from "std";

export const project = {
  name: "icu",
  version: "77.1",
  repository: "https://github.com/unicode-org/icu",
  extra: {
    versionDash: "77-1",
    versionUnderscore: "77_1",
  },
};

std.assert(
  project.extra.versionDash === std.projectVersionToDashFormat({ project }),
  `expected 'project.extra.versionDash' field '${project.extra.versionDash}' to match version '${project.version}'`,
);
std.assert(
  project.extra.versionUnderscore ===
    std.projectVersionToUnderscoreFormat({ project }),
  `expected 'project.extra.versionUnderscore' field '${project.extra.versionUnderscore}' to match version '${project.version}'`,
);

const source = Brioche.download(
  `${project.repository}/releases/download/release-${project.extra.versionDash}/icu4c-${project.extra.versionUnderscore}-src.tgz`,
).unarchive("tar", "gzip");

export default function icu(): std.Recipe<std.Directory> {
  return std.runBash`
    cd icu/source
    ./runConfigureICU Linux \\
      --prefix=/
    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .toDirectory()
    .pipe(std.pkgConfigMakePathsRelative)
    .pipe((recipe) =>
      std.setEnv(recipe, {
        ICU_ROOT: { fallback: { path: "." } },
        LIBRARY_PATH: { append: [{ path: "lib" }] },
        CPATH: { append: [{ path: "include" }] },
        PKG_CONFIG_PATH: { append: [{ path: "lib/pkgconfig" }] },
      }),
    )
    .pipe(
      // During the build, ICU uses "stub" libraries for compilation. Re-pack
      // the artifact to use the final libraries after compilation instead
      (recipe) =>
        std.autopack(recipe, {
          globs: ["bin/**", "lib/**"],
          selfDependency: true,
          dynamicBinaryConfig: {
            enabled: true,
          },
          sharedLibraryConfig: {
            enabled: true,
            allowEmpty: true,
          },
          repackConfig: {
            enabled: true,
          },
        }),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    icuinfo | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(icu)
    .toFile();

  const result = (await script.read()).trim();

  const version = result.match(/<param name="version">([^<]*)<\/param>/)?.at(1);
  const returnCode = result
    .match(/^ICU Initialization returned: (.*)$/m)
    ?.at(1);

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(version === expected, `expected '${expected}', got '${version}'`);

  // Check that the result contains the expected return code
  std.assert(
    returnCode === "U_ZERO_ERROR",
    `expected icuinfo initialization to return U_ZERO_ERROR, got '${returnCode}'`,
  );

  return script;
}

export async function liveUpdate(): Promise<std.Recipe<std.Directory>> {
  return std.liveUpdateFromGithubReleases({
    project,
    matchTag: /^release-(?<version>.+)$/,
    normalizeVersion: true,
  });
}
