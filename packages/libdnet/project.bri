import * as std from "std";

export const project = {
  name: "libdnet",
  version: "1.18.0",
  repository: "https://github.com/ofalk/libdnet",
};

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `libdnet-${project.version}`,
});

export default function libdnet(): std.Recipe<std.Directory> {
  return std.runBash`
    ./configure \
      --prefix=/ \
      --sbindir="/bin" \
      --disable-check
    make -j "$(nproc)"
    make install DESTDIR="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain)
    .toDirectory()
    .pipe(
      std.libtoolSanitizeDependencies,
      (recipe) =>
        std.setEnv(recipe, {
          CPATH: { append: [{ path: "include" }] },
          LIBRARY_PATH: { append: [{ path: "lib" }] },
        }),
      (recipe) => std.withRunnableLink(recipe, "bin/dnet"),
    );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    dnet-config --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(libdnet)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = project.version;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({
    project,
    matchTag: /^libdnet-(?<version>\d+\.\d+\.\d+)$/,
  });
}
