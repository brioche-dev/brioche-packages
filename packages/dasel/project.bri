import * as std from "std";
import { gitCheckout } from "git";
import { goBuild } from "go";

export const project = {
  name: "dasel",
  version: "2.8.1",
};

const majorVersion = "2";
std.assert(
  project.version.split(".").at(0) === majorVersion,
  `Dasel major version ${majorVersion} does not match version number ${project.version}`,
);

const gitRef = Brioche.gitRef({
  repository: "https://github.com/TomWright/dasel.git",
  ref: `v${project.version}`,
});
const source = gitCheckout(gitRef);

export default function dasel(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    path: "./cmd/dasel",
    runnable: "bin/dasel",
    buildParams: {
      ldflags: [
        `-X github.com/tomwright/dasel/v${majorVersion}/internal.Version=${project.version}`,
      ],
    },
  });
}

export function test() {
  return std.runBash`
    dasel --version | tee "$BRIOCHE_OUTPUT"
  `.dependencies(dasel());
}
