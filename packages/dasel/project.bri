import nushell from "nushell";
import * as std from "std";
import { gitCheckout } from "git";
import { goBuild } from "go";

export const project = {
  name: "dasel",
  version: "2.8.1",
};

const majorVersion = "2";
std.assert(
  project.version.split(".").at(0) === majorVersion,
  `Dasel major version ${majorVersion} does not match version number ${project.version}`,
);

const gitRef = Brioche.gitRef({
  repository: "https://github.com/TomWright/dasel.git",
  ref: `v${project.version}`,
});
const source = gitCheckout(gitRef);

export default function dasel(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    path: "./cmd/dasel",
    runnable: "bin/dasel",
    buildParams: {
      ldflags: [
        `-X github.com/tomwright/dasel/v${majorVersion}/internal.Version=${project.version}`,
      ],
    },
  });
}

export async function test() {
  const script = std.runBash`
    echo -n $(dasel --version) | tee "$BRIOCHE_OUTPUT"
  `.dependencies(dasel());

  const result = await script.toFile().read();

  // Check that the result contains the expected version
  const expected = `dasel version ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/TomWright/dasel/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project | from json | update version $version | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
