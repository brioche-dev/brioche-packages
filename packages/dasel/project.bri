import * as std from "std";
import { goBuild } from "go";

export const project = {
  name: "dasel",
  version: "2.8.1",
  repository: "https://github.com/TomWright/dasel.git",
};

const majorVersion = "2";
std.assert(
  project.version.split(".").at(0) === majorVersion,
  `Dasel major version ${majorVersion} does not match version number ${project.version}`,
);

const source = Brioche.gitCheckout({
  repository: project.repository,
  ref: `v${project.version}`,
});

export default function dasel(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    path: "./cmd/dasel",
    runnable: "bin/dasel",
    buildParams: {
      ldflags: [
        "-s",
        "-w",
        "-X",
        `github.com/tomwright/dasel/v${majorVersion}/internal.Version=${project.version}`,
      ],
    },
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    dasel --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(dasel)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `dasel version ${project.version}`;
  std.assert(result === expected, `expected '${expected}', got '${result}'`);

  return script;
}

export function liveUpdate() {
  return std.liveUpdateFromGithubReleases({ project });
}
