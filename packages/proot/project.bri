import * as std from "std";
import git, { gitCheckout } from "git";
import talloc from "talloc";
import libarchive from "libarchive";
import uthash from "uthash";

export const project = {
  name: "proot",
  version: "5.4.0",
  repository: "https://github.com/proot-me/proot.git",
};

const gitRef = await Brioche.gitRef({
  repository: project.repository,
  ref: `v${project.version}`,
});
const source = std.recipe(() => {
  const source = gitCheckout(gitRef);

  return std.runBash`
    cd "$BRIOCHE_OUTPUT"
    sed -i 's|/bin/echo|/usr/bin/env echo|g' src/GNUmakefile
  `
    .outputScaffold(source)
    .toDirectory();
});

export default function proot(): std.Recipe<std.Directory> {
  return std.runBash`
    BRIOCHE_LD_AUTOPACK=false make -C src loader.elf loader-m32.elf build.h
    make -C src proot care
    make -C src install PREFIX="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain, git, talloc, uthash, libarchive)
    .toDirectory()
    .pipe((recipe) => std.withRunnableLink(recipe, "bin/proot"));
}

export async function test(): Promise<std.Recipe<std.File>> {
  // No version is outputted, only the short hash of the commit version is displayed
  const script = std.runBash`
    proot --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(proot)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected output
  const expected = `-${gitRef.commit.slice(0, 8)}`;
  std.assert(
    result.includes(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): std.Recipe<std.Directory> {
  return std.liveUpdateFromGithubReleases({ project });
}
