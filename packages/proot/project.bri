import nushell from "nushell";
import * as std from "std";
import git, { gitCheckout } from "git";
import talloc from "talloc";
import libarchive from "libarchive";
import uthash from "uthash";

export const project = {
  name: "proot",
  version: "5.4.0",
};

const gitRef = await Brioche.gitRef({
  repository: "https://github.com/proot-me/proot.git",
  ref: `v${project.version}`,
});
const source = std.recipeFn(() => {
  const source = gitCheckout(gitRef);

  return std.runBash`
    cd "$BRIOCHE_OUTPUT"
    sed -i 's|/bin/echo|/usr/bin/env echo|g' src/GNUmakefile
  `
    .outputScaffold(source)
    .toDirectory();
});

export default function proot(): std.Recipe<std.Directory> {
  let proot = std.runBash`
    BRIOCHE_LD_AUTOPACK=false make -C src loader.elf loader-m32.elf build.h
    make -C src proot care
    make -C src install PREFIX="$BRIOCHE_OUTPUT"
  `
    .workDir(source)
    .dependencies(std.toolchain(), git(), talloc(), uthash(), libarchive())
    .toDirectory();

  proot = std.withRunnableLink(proot, "bin/proot");

  return proot;
}

export async function test() {
  // No version is outputted, only the short hash of the commit version is displayed
  const script = std.runBash`
    proot --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(proot())
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected output
  const expected = `-${gitRef.commit.slice(0, 8)}`;
  std.assert(
    result.includes(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/proot-me/proot/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project
      | from json
      | update version $version
      | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
