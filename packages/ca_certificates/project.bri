import * as std from "std";
import openssl from "openssl";
import { nushellRunnable, type NushellRunnable } from "nushell";

export const project = {
  name: "ca_certificates",
  version: "2025-08-12",
};

const source = Brioche.download(
  `https://curl.se/ca/cacert-${project.version}.pem`,
);

export default function caCertificates(): std.Recipe<std.Directory> {
  return std.setEnv(
    std.directory({
      etc: std.directory({
        ssl: std.directory({
          certs: std.directory({
            "ca-bundle.crt": source,
          }),
        }),
      }),
    }),
    {
      SSL_CERT_FILE: { fallback: { path: "etc/ssl/certs/ca-bundle.crt" } },
    },
  );
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    openssl x509 -in $SSL_CERT_FILE -noout -text | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(caCertificates, openssl)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the CA certificate
  const expected = `CA:TRUE`;

  std.assert(
    result.includes(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export function liveUpdate(): NushellRunnable {
  return nushellRunnable`
    let version = http get https://curl.se/docs/caextract.html
      | lines
      | where {|it| $it | str contains 'href="/ca/cacert-' }
      | parse --regex '<a href="/ca/cacert-(?<version>.+).pem"'
      | sort-by --natural --reverse version
      | get 0.version

    $env.project
      | from json
      | update version $version
      | to json
  `.env({ project: JSON.stringify(project) });
}
