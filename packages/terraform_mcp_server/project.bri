import * as std from "std";
import { gitCheckout } from "git";
import { goBuild } from "go";

export const project = {
  name: "terraform_mcp_server",
  version: "0.3.2",
  repository: "https://github.com/hashicorp/terraform-mcp-server.git",
  extra: {
    releaseDate: "2025-10-24",
  },
};

const gitRef = await Brioche.gitRef({
  repository: project.repository,
  ref: `v${project.version}`,
});
const source = gitCheckout(gitRef);

export default function terraformMcpServer(): std.Recipe<std.Directory> {
  return goBuild({
    source,
    buildParams: {
      ldflags: [
        "-s",
        "-w",
        "-X",
        `github.com/hashicorp/terraform-mcp-server/version.GitCommit=${gitRef.commit}`,
        "-X",
        `github.com/hashicorp/terraform-mcp-server/version.BuildDate=${project.extra.releaseDate}`,
      ],
    },
    path: "./cmd/terraform-mcp-server",
    runnable: "bin/terraform-mcp-server",
  });
}

export async function test(): Promise<std.Recipe<std.File>> {
  const script = std.runBash`
    terraform-mcp-server --version | tee "$BRIOCHE_OUTPUT"
  `
    .dependencies(terraformMcpServer)
    .toFile();

  const result = (await script.read()).trim();

  // Check that the result contains the expected version
  const expected = `Version: ${project.version}`;
  std.assert(
    result.includes(expected),
    `expected '${expected}', got '${result}'`,
  );

  return script;
}

export async function liveUpdate(): Promise<std.Recipe<std.Directory>> {
  return std.liveUpdateFromGithubReleases({ project });
}
