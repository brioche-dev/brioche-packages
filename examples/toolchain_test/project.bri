import * as std from "std";

export const project = {
  dependencies: {
    std: "*",
  },
};

export default async (): Promise<std.Lazy> => {
  return std.process({
    command: "/usr/bin/env",
    args: [
      "sh",
      "-c",
      `
        set -euo pipefail

        mkdir -p "$BRIOCHE_OUTPUT/bin"
        gcc \
          -o "$BRIOCHE_OUTPUT/bin/test" \
          test.c
        "$BRIOCHE_OUTPUT/bin/test" >> "$BRIOCHE_OUTPUT/test.txt"

        echo "$test_script" > "$BRIOCHE_OUTPUT/test.sh"
        chmod +x "$BRIOCHE_OUTPUT/test.sh"

        "$BRIOCHE_OUTPUT/test.sh" >> "$BRIOCHE_OUTPUT/test.txt"
      `,
    ],
    workDir: std.directory({
      "test.c": std.file(std.indoc`
        #include <stdio.h>

        int main() {
          printf("Hello world!\\n");
        }
      `),
    }),
    env: {
      BRIOCHE_OUTPUT: std.outputPath,
      toolchain: std.native(),
      PATH: std.tpl`${std.native()}/bin`,
      MAGIC: std.tpl`${std.native()}/share/misc/magic`,
      test_script: `#!/usr/bin/env bash
        set -euo pipefail

        strings --version
        gcc --version
        m4 --version
        bash --version
        ls --version
        diff --version
        file --version
        file /usr/bin/env
        find --version
        gawk --version
        grep --version
        gzip --version
        make --version
        patch --version
        sed --version
        tar --version
        xz --version
      `,
    },
  });
};
