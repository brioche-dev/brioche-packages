name: Live updates

on:
  workflow_dispatch:
  schedule:
    - cron: '17 12 * * FRI' # Every Friday at 12:17pm UTC

jobs:
  live-update-packages:
    name: Live-update packages
    runs-on: ubuntu-22.04
    steps:
      - name: Create GitHub App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.LIVE_UPDATE_APP_ID }}
          private-key: ${{ secrets.LIVE_UPDATE_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false

      # See: https://github.com/actions/create-github-app-token/tree/a3c826a2042b1cef171cbabedfd93c93623f4061?tab=readme-ov-file#configure-git-cli-for-an-apps-bot-user
      - name: Configure git user
        run: |
          user_id=$(gh api "/users/${app_slug}[bot]" --jq .id)
          git config --global user.name "${app_slug}[bot]"
          git config --global user.email "${user_id}+${app_slug}[bot]@users.noreply.github.com"
        env:
          app_slug: ${{ steps.app-token.outputs.app-slug }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Install Brioche
        run: |
          mkdir -p ~/.local/bin
          curl -L https://development-content.brioche.dev/github.com/brioche-dev/brioche/branches/main/x86_64-linux/brioche -o ~/.local/bin/brioche
          chmod +x ~/.local/bin/brioche
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update packages
        run: |
          git_head="$(git rev-parse HEAD)"
          failed_packages=()

          for package in packages/*; do
            branch_name="live-update/$(basename "$package")"
            if grep -q 'export.*liveUpdate' "$package/project.bri"; then
              echo "::group::$package"

              git checkout "origin/${branch_name}" || git checkout "${git_head}"
              git clean -ffdx
              if ! brioche live-update -p "$package" --locked; then
                echo "ðŸ”´ Failed to update $package"
                echo "::error file=$package/project.bri::Failed to update $package"
                failed_packages+=( "$package" )
                continue
              fi

              if [ -n "$(git status --porcelain)" ]; then
                git checkout -b "$branch_name"
                git add "$package"
                git commit -m "[live-update] $package"
                echo "ðŸŸ¢ Updated $package"
              else
                echo "âšª No updates for $package"
              fi

              echo "::endgroup::"
            else
              echo "$package: no live-update found"
            fi
          done

          git checkout "$git_head"
          printf "%s\n" "${failed_packages[@]}" > failed-packages.txt

      - name: Configure git credentials
        run: git remote set-url origin "$auth_url"
        env:
          auth_url: https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ github.repository }}.git

      - name: Push branches
        run: |
          git for-each-ref --format='%(refname:short)' refs/heads/live-update | while read branch; do
            echo "Creating PR for $branch"

            package_name=$(basename "$branch")
            pr_title="[${package_name}] (Live update)"
            pr_body=$(echo -e "Automatic update for ${package_name}\n\nGenerated by workflow [${run_label}](${run_url})")

            git push origin "$branch"
            gh pr create --head "$branch" --title "$pr_title" --body "$pr_body" --label "live update" || gh pr comment "$branch" --body "$pr_body"
          done
        env:
          run_label: "${{ github.workflow }} #${{ github.run_number}}"
          run_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Check for failed packages
        run: |
          if [ -n "$(cat failed-packages.txt)" ]; then
            echo "The following package live updates failed:"
            cat failed-packages.txt
            exit 1
          fi
