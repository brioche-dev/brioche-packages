name: "[Build]"

on:
  workflow_call:
    inputs:
      enabled:
        type: boolean
        default: true

jobs:
  build:
    name: Build packages [${{ matrix.host.platform }}]
    if: inputs.enabled
    strategy:
      fail-fast: false
      matrix:
        host:
          - platform: x86_64-linux
            runs-on: brioche-dev-builder-runner
          - platform: aarch64-linux
            runs-on: brioche-dev-builder-runner-aarch64

    runs-on: ${{ matrix.host.runs-on }}
    timeout-minutes: 720
    steps:
      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Brioche
        run: |
          mkdir -p ~/.local/bin
          curl -L https://development-content.brioche.dev/github.com/brioche-dev/brioche/branches/main/$PLATFORM/brioche -o ~/.local/bin/brioche
          chmod +x ~/.local/bin/brioche
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        env:
          PLATFORM: ${{ matrix.host.platform }}

      - name: Build packages
        run: |
          packages=(packages/*)

          n=1
          for package in "${packages[@]}"; do
            label="$package ($n / ${#packages[@]})"
            ((n++))
            if grep -q "@brioche-packages skip-platform $PLATFORM" "$package/project.bri"; then
              echo "$label: skipping (does not support $PLATFORM)"
            else
              echo "::group::$label"
              brioche build -p "$package" --sync --locked --display plain-reduced
              echo "::endgroup::"
            fi
          done
        env:
          PLATFORM: ${{ matrix.host.platform }}
          BRIOCHE_REGISTRY_PASSWORD: ${{ secrets.BRIOCHE_REGISTRY_PASSWORD }}
          BRIOCHE_CACHE_URL: ${{ vars.BRIOCHE_CACHE_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.CACHE_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CACHE_AWS_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL_S3: ${{ secrets.CACHE_AWS_ENDPOINT_URL_S3 }}
          AWS_REGION: ${{ vars.CACHE_AWS_REGION }}
          AWS_REQUEST_CHECKSUM_CALCULATION: WHEN_REQUIRED
          AWS_RESPONSE_CHECKSUM_CALCULATION: WHEN_REQUIRED

      - name: Run package tests
        run: |
          packages=(packages/*)

          n=1
          for package in "${packages[@]}"; do
            label="$package ($n / ${#packages[@]})"
            ((n++))

            if grep -q 'export.*test' "$package/project.bri"; then
              if grep -q "@brioche-packages skip-platform $PLATFORM" "$package/project.bri"; then
                echo "$label: skipping (does not support $PLATFORM)"
              else
                echo "::group::$label"
                brioche build -p "$package" -e test --sync --locked
                echo "::endgroup::"
              fi
            else
              echo "$label: no tests found"
            fi
          done
        env:
          BRIOCHE_REGISTRY_PASSWORD: ${{ secrets.BRIOCHE_REGISTRY_PASSWORD }}
          BRIOCHE_CACHE_URL: ${{ vars.BRIOCHE_CACHE_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.CACHE_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CACHE_AWS_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL_S3: ${{ secrets.CACHE_AWS_ENDPOINT_URL_S3 }}
          AWS_REGION: ${{ vars.CACHE_AWS_REGION }}
          AWS_REQUEST_CHECKSUM_CALCULATION: WHEN_REQUIRED
          AWS_RESPONSE_CHECKSUM_CALCULATION: WHEN_REQUIRED

      - name: Save failed processes
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: process-events
          path: ~/.local/share/brioche/process-temp/*/events.bin.zst
          compression-level: 0

      - name: Show failed processes
        if: failure()
        run: |
          process_events=(~/.local/share/brioche/process-temp/*/events.bin.zst)
          process_event="${process_events[0]}"

          if [ -f "$process_event" ]; then
            truncated_line_count="$(brioche jobs logs "$process_event" --limit 200 | wc -l)"
            if [ "$truncated_line_count" -gt 190 ]; then
              # Looks like the output might be long, so show the first 80
              # lines and the last 80 lines

              brioche jobs logs "$process_event" --limit 80 | head -n80
              echo "..."
              brioche jobs logs "$process_event" | tail -n80
            else
              # Looks like the output might be short, so show the whole file
              brioche jobs logs "$process_event"
            fi
          fi
