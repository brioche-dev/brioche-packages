name: CI

on:
  push:
    branches:
      - main
      - 'build/**'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  check:
    name: Check packages
    runs-on: ubuntu-22.04
    steps:
      # 1) Use dorny/paths-filter@v3 to detect changes in packages/**
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          list-files: shell
          filters: |
            packages:
              - 'packages/**'

      # 2) Only checkout if there's a change in packages
      - name: Checkout code
        if: steps.changes.outputs.packages == 'true'
        uses: actions/checkout@v4

      - name: Install Brioche
        if: steps.changes.outputs.packages == 'true'
        run: |
          mkdir -p ~/.local/bin
          curl -L https://development-content.brioche.dev/github.com/brioche-dev/brioche/branches/main/x86_64-linux/brioche -o ~/.local/bin/brioche
          chmod +x ~/.local/bin/brioche
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # 3) Only run 'check' for the subdirectories under packages that changed
      - name: Check updated packages
        if: steps.changes.outputs.packages == 'true'
        run: |
          echo "Changed files:"
          echo "${{ steps.changes.outputs.packages_files }}"

          # Convert the JSON array of changed files to a bash-friendly list
          changed_files=$(echo '${{ steps.changes.outputs.packages_files }}' | jq -r '.[]')

          # Extract unique subdirectories in packages/ (e.g. packages/dir1) and run check
          unique_projects=$(echo "$changed_files" \
            | sed -E 's|(packages/[^/]+).*|\1|' \
            | sort -u)

          for project in $unique_projects; do
            echo "::group::Check $project"
            brioche check -p "$project" --locked
            brioche fmt -p "$project" --check
            echo "::endgroup::"
          done

  build:
    name: Build packages
    needs: [check]
    if: github.repository == 'brioche-dev/brioche-packages' && github.event_name == 'push' && ( github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/build/') )
    runs-on: proxmox-runner-set
    timeout-minutes: 720
    steps:
      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Brioche
        run: |
          mkdir -p ~/.local/bin
          curl -L https://development-content.brioche.dev/github.com/brioche-dev/brioche/branches/main/x86_64-linux/brioche -o ~/.local/bin/brioche
          chmod +x ~/.local/bin/brioche
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Build projects
        run: |
          for project in packages/*; do
            echo "::group::$project"
            brioche build -p "$project" --check --sync --locked --display plain-reduced
            echo "::endgroup::"
          done
        env:
          BRIOCHE_REGISTRY_PASSWORD: ${{ secrets.BRIOCHE_REGISTRY_PASSWORD }}
      - name: Save failed processes
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: process-events
          path: ~/.local/share/brioche/process-temp/*/events.bin.zst
          compression-level: 0

  publish:
    name: Publish packages
    needs: [build]
    if: github.repository == 'brioche-dev/brioche-packages' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Brioche
        run: |
          mkdir -p ~/.local/bin
          curl -L https://development-content.brioche.dev/github.com/brioche-dev/brioche/branches/main/x86_64-linux/brioche -o ~/.local/bin/brioche
          chmod +x ~/.local/bin/brioche
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Publish projects
        run: |
          for project in packages/*; do
            echo "::group::$project"
            brioche publish -p "$project"
            echo "::endgroup::"
          done
        env:
          BRIOCHE_REGISTRY_PASSWORD: ${{ secrets.BRIOCHE_REGISTRY_PASSWORD }}
