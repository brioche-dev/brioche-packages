import * as runtime from "../runtime.bri";
import { source as briocheSource } from "../source.bri";
import { type CastTo, type CastResult, cast } from "./cast.bri";
import { Directory } from "./directory.bri";
import { createProxy } from "./proxy.bri";
import { type Value, type AsyncLazy, type Lazy, briocheDeserializeAny, createLazy } from "./value.bri";

export function peel(directory: AsyncLazy<Directory>, depth: number = 1): Lazy {
  const proxyDirectory = createProxy(directory);
  return createLazy(["file", "directory", "symlink"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      return {
        type: "peel",
        directory: await proxyDirectory.briocheSerialize(),
        depth,
        meta,
      };
    },
  });
}
