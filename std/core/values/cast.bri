import { type Awaitable, unreachable } from "../utils.bri";
import { source as briocheSource } from "../source.bri";
import * as runtime from "../runtime.bri";
import { File } from "./file.bri";
import { Symlink } from "./symlink.bri";
import { Directory } from "./directory.bri";
import { type Value, type Lazy, type ValueType, type LazyValueSerialization, briocheDeserializeAny, createLazy } from "./value.bri";

type LazyResult<T extends Lazy> = T extends Lazy<infer U> ? U : never;

export type CastTo = "file" | "directory" | "symlink";

export type CastResult<T extends CastTo> =
  T extends "file" ? File :
  T extends "directory" ? Directory :
  T extends "symlink" ? Symlink :
  never;

interface CastOptions {
  sourceDepth?: number,
}

export function cast<V extends Lazy, T extends CastTo>(value: V, to: T, options: CastOptions = {}): Lazy<LazyResult<V> & CastResult<T>> {
  return createLazy([to as unknown as ValueType<LazyResult<V>>], {
    sourceDepth: options.sourceDepth ?? 1,
    briocheSerialize: async (meta) => ({
      type: "cast",
      value: await value.briocheSerialize(),
      to,
    } as unknown as LazyValueSerialization<LazyResult<V> & CastResult<T>>),
  }) as unknown as Lazy<LazyResult<V> & CastResult<T>>;
}
