import * as runtime from "../runtime.bri";
import { source as briocheSource } from "../source.bri";
import { type Awaitable, unreachable } from "../utils.bri";
import { File, type FilePermissions } from "./file.bri";
import { Directory, directory } from "./directory.bri";
import { Symlink } from "./symlink.bri";
import { createProxy } from "./proxy.bri";

export type Value = File | Directory | Symlink;

export type ValueTypes = {
  file: File,
  directory: Directory,
  symlink: Symlink,
};

export type ValueType<T extends Value> = T extends File ? "file" : T extends Directory ? "directory" : T extends Symlink ? "symlink" : never;

export type LazyValueSerialization<T extends Value> = runtime.WithMeta & (
  T extends File ? (
    | runtime.CompleteFile
    | runtime.LazyDownload
    | runtime.LazyProcess
    | runtime.LazyCreateFile
    | runtime.LazyCast
    | runtime.LazyPeel
    | runtime.LazyGet
    | runtime.LazySetPermissions
    | runtime.LazyProxy) :
  T extends Directory ? (
    | runtime.LazyDirectory
    | runtime.LazyUnpack
    | runtime.LazyProcess
    | runtime.LazyCast
    | runtime.LazyMerge
    | runtime.LazyPeel
    | runtime.LazyGet
    | runtime.LazyRemove
    | runtime.LazyProxy) :
  T extends Symlink ? (
    | runtime.CompleteSymlink
    | runtime.LazyProcess
    | runtime.LazyCast
    | runtime.LazyPeel
    | runtime.LazyGet
    | runtime.LazyProxy) :
  never
);

// This symbol is used in `Lazy` so that `Lazy<Value>` doesn't simplify to
// `LazyCommon<Value>` in TypeScript messages. This is mainly done for the LSP.
const lazyMarker: unique symbol = Symbol("lazyMarker");

export type Lazy<T extends Value = Value> =
  & {[lazyMarker]?: undefined}
  & LazyCommon<T>
  & (
    [T] extends [File] ? LazyFileUtils
    : [T] extends [Directory] ? LazyDirectoryUtils
    : [T] extends [Symlink] ? LazySymlinkUtils
    : T extends Value ? {}
    : never
  );

export type AsyncLazy<T extends Value = Value> = Awaitable<Lazy<T>>;

export function briocheDeserializeAny(value: runtime.CompleteValue, source: runtime.Source | undefined): Value {
  switch (value.type) {
    case "file":
      return File.briocheDeserialize(value, source);
    case "directory":
      return Directory.briocheDeserialize(value, source);
    case "symlink":
      return Symlink.briocheDeserialize(value, source);
    default:
      return unreachable(value);
  }
}

export function lazy<T extends Value>(value: AsyncLazy<T>): Lazy<T> {
  return createLazy<T>(["file", "directory", "symlink"] as ValueType<T>[], {
    sourceDepth: 1,
    briocheSerialize: async () => {
      return (await value).briocheSerialize();
    },
    resolve: async () => {
      return (await value).resolve();
    },
  });
}

export type CreateLazyOptions<T extends Value> = {
  sourceDepth?: number;
} & (
  | {
    briocheSerialize?(meta: runtime.Meta): Awaitable<LazyValueSerialization<T>>;
    resolve(meta: runtime.Meta): Awaitable<T>;
  }
  | {
    briocheSerialize(meta: runtime.Meta): Awaitable<LazyValueSerialization<T>>;
    resolve?(meta: runtime.Meta): Awaitable<T>;
  }
);

export function createLazy<T extends Value>(
  types: ValueType<T>[],
  opts: CreateLazyOptions<T>,
): Lazy<T> {
  const source = briocheSource({ depth: (opts.sourceDepth ?? 0) + 1 });
  const meta = { source };

  const isFile = types.some(type => type === "file");
  const isDirectory = types.some(type => type === "directory");
  const isSymlink = types.some(type => type === "symlink");

  return {
    briocheSerialize: async () => {
      if (opts.briocheSerialize) {
        return opts.briocheSerialize(meta);
      } else if (opts.resolve) {
        return (await opts.resolve(meta)).briocheSerialize();
      } else {
        throw new Error("resolve or briocheSerialize is required");
      }
    },
    resolve: async () => {
      if (opts.resolve) {
        return opts.resolve(meta);
      } else if (opts.briocheSerialize) {
        const result = await runtime.resolve(await opts.briocheSerialize(meta));
        return briocheDeserializeAny(result, source);
      } else {
        throw new Error("resolve or briocheSerialize is required");
      }
    },
    ...lazyUtils,
    ...(isFile ? lazyFileUtils : {}),
    ...(isDirectory ? lazyDirectoryUtils : {}),
    ...(isSymlink ? lazySymlinkUtils : {}),
  } as Lazy<T>;
}

interface LazyCommon<T extends Value> extends LazyUtils<T> {
  resolve(): Awaitable<T>;
  briocheSerialize(): Awaitable<LazyValueSerialization<T>>;
}

interface LazyUtils<T extends Value> {
  cast<To extends ValueType<T> & keyof ValueTypes>(to: To): Lazy<ValueTypes[To] & T>;
}

interface LazyFileUtils extends LazyUtils<File> {
  withPermissions(permissions: Partial<FilePermissions>): Lazy<File>;
  unpack(archiveFormat: runtime.ArchiveFormat, compressionFormat?: runtime.CompressionFormat): Lazy<Directory>;
  readBytes(): Promise<Uint8Array>;
  read(): Promise<string>;
}

interface LazyDirectoryUtils extends LazyUtils<Directory> {
  get(...paths: string[]): Lazy<Value>;
  insert(path: string, value: AsyncLazy<Value>): Lazy<Directory>;
  remove(...paths: string[]): Lazy<Directory>;
  peel(depth?: number): Lazy;
}

interface LazySymlinkUtils extends LazyUtils<Symlink> {}

export const lazyUtils: LazyUtils<Value> = {
  cast<To extends keyof ValueTypes>(this: Lazy, to: To): Lazy<ValueTypes[To]> {
    return createLazy([to satisfies ValueType<Value> as ValueType<ValueTypes[To]>], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        const value = await this.briocheSerialize();
        return {
          type: "cast",
          value,
          to,
          meta,
        } satisfies LazyValueSerialization<Value> as any;
      },
    });
  }
};

export const lazyFileUtils: LazyFileUtils = {
  ...lazyUtils,
  withPermissions(this: Lazy<File>, permissions: Partial<FilePermissions>): Lazy<File> {
    return createLazy(["file"], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        const file = await this.briocheSerialize();
        return {
          type: "set_permissions",
          file,
          executable: permissions.executable ?? null,
          meta,
        }
      },
    });
  },
  unpack(this: Lazy<File>, archiveFormat: runtime.ArchiveFormat, compressionFormat?: runtime.CompressionFormat): Lazy<Directory> {
    return createLazy(["directory"], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        const file = await this.briocheSerialize();
        return {
          type: "unpack",
          file,
          archive: archiveFormat,
          compression: compressionFormat,
          meta,
        }
      },
    });
  },
  async readBytes(this: Lazy<File>): Promise<Uint8Array> {
    const resolved = await this.resolve();
    const bstring = await runtime.readBlob(resolved.blobId);
    return runtime.bstringToBytes(bstring);
  },
  async read(this: Lazy<File>): Promise<string> {
    const bytes = await this.readBytes();
    return runtime.utf8Decode(bytes);
  },
};

export const lazyDirectoryUtils: LazyDirectoryUtils = {
  ...lazyUtils,
  get(this: Lazy<Directory>, path: string): Lazy<Value> {
    return createLazy(["file", "directory", "symlink"], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        const directory = await this.briocheSerialize();
        return {
          type: "get",
          directory,
          path: runtime.bstring(path),
          meta,
        }
      },
    });
  },
  insert(this: Lazy<Directory>, path: string, value: AsyncLazy<Value>): Lazy<Directory> {
    const pathComponents = path.split("/");
    const dirPathComponents = pathComponents.slice(0, -1);
    const fileName = pathComponents.at(-1);
    if (fileName == null || dirPathComponents.some((pathComponent) => pathComponent === "")) {
      throw new Error(`invalid path: "${path}"`);
    }

    const directoryFromPath = dirPathComponents.reduceRight((acc, pathComponent) => directory({
      [pathComponent]: acc,
    }), directory({
      [fileName]: value,
    }));

    const proxyDirectories = [this, directoryFromPath].map((dir) => createProxy(dir));
    return createLazy(["directory"], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        const serializedDirectories = await Promise.all(proxyDirectories.map(async (dir) => (await dir).briocheSerialize()));
        return {
          type: "merge",
          directories: serializedDirectories,
          meta,
        };
      }
    });
  },
  remove(this: Lazy<Directory>, ...paths: string[]): Lazy<Directory> {
    return createLazy(["directory"], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        const directory = await this.briocheSerialize();
        return {
          type: "remove",
          directory,
          paths: paths.map(runtime.bstring),
          meta,
        }
      },
    });
  },
  peel(this: Lazy<Directory>, depth: number = 1): Lazy {
    return createLazy(["file", "directory", "symlink"], {
      sourceDepth: 1,
      briocheSerialize: async (meta) => {
        return {
          type: "peel",
          directory: await this.briocheSerialize(),
          depth,
          meta,
        };
      },
    });
  }
};

export const lazySymlinkUtils: LazySymlinkUtils = {
  ...lazyUtils,
};
