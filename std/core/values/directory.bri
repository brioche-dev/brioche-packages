import * as runtime from "../runtime.bri";
import { source as briocheSource } from "../source.bri";
import { assert } from "../utils.bri";
import { createProxy } from "./proxy.bri";
import { type Value, type AsyncLazy, type Lazy, briocheDeserializeAny, createLazy, lazyDirectoryUtils } from "./value.bri";
import { valueType } from "./value_type.bri";

export function directory(entries: Record<string, AsyncLazy>): Lazy<Directory> {
  const bEntries: Record<runtime.BString, AsyncLazy> = {};
  for (const [k, v] of Object.entries(entries)) {
    bEntries[runtime.bstring(k)] = v;
  }

  return createLazy(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      const entries = await Promise.all(
        Object.entries(bEntries)
          .map(async ([k, v]): Promise<[runtime.BString, runtime.LazyValue]> => [k as runtime.BString, await (await v).briocheSerialize()]
          ),
      );
      return {
        type: "directory",
        entries: Object.fromEntries(entries),
        meta,
      };
    },
  });
}

export function merge(...directories: AsyncLazy<Directory>[]): Lazy<Directory> {
  const proxyDirectories = directories.map((dir) => createProxy(dir));
  return createLazy(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      const serializedDirectories = await Promise.all(proxyDirectories.map(async (dir) => (await dir).briocheSerialize()));
      return {
        type: "merge",
        directories: serializedDirectories,
        meta,
      };
    }
  });
}

export function get(directory: AsyncLazy<Directory>, path: string): Lazy {
  const proxyDirectory = createProxy(directory);
  return createLazy(["file", "directory", "symlink"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => ({
      type: "get",
      directory: await proxyDirectory.briocheSerialize(),
      path: runtime.bstring(path),
      meta,
    }),
  });
}

export function insert(dir: AsyncLazy<Directory>, path: string, value: AsyncLazy): Lazy<Directory> {
  const pathComponents = path.split("/");
  const dirPathComponents = pathComponents.slice(0, -1);
  const fileName = pathComponents.at(-1);
  if (fileName == null || dirPathComponents.some((pathComponent) => pathComponent === "")) {
    throw new Error(`invalid path: "${path}"`);
  }

  const directoryFromPath = dirPathComponents.reduceRight((acc, pathComponent) => directory({
    [pathComponent]: acc,
  }), directory({
    [fileName]: value,
  }));


  const proxyDirectories = [dir, directoryFromPath].map((dir) => createProxy(dir));
  return createLazy(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      const serializedDirectories = await Promise.all(proxyDirectories.map(async (dir) => (await dir).briocheSerialize()));
      return {
        type: "merge",
        directories: serializedDirectories,
        meta,
      };
    }
  });
}

export function remove(directory: AsyncLazy<Directory>, ...paths: string[]): Lazy<Directory> {
  const proxyDirectory = createProxy(directory);
  const runtimePaths = paths.map((path) => runtime.bstring(path));
  return createLazy(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      return {
        type: "remove",
        directory: await proxyDirectory.briocheSerialize(),
        paths: runtimePaths,
        meta,
      };
    }
  });
}

interface DirectoryCtor {
  entries: Record<runtime.BString, runtime.CompleteValue>;
  source?: runtime.Source;
}

export class Directory implements Lazy<Directory> {
  [valueType]: "directory" = "directory";
  entries: Record<runtime.BString, runtime.CompleteValue>;
  source?: runtime.Source;

  constructor(options: DirectoryCtor) {
    this.entries = options.entries;
    this.source = options.source;
  }

  resolve(): Directory {
    return this;
  }

  briocheSerialize(): runtime.CompleteDirectory {
    return {
      type: "directory",
      entries: this.entries,
      meta: {
        source: this.source,
      },
    };
  }

  static briocheDeserialize(value: runtime.CompleteValue, source: runtime.Source | undefined): Directory {
    assert(value.type === "directory");
    return new Directory({ entries: value.entries, source });
  }

  get = lazyDirectoryUtils.get;
  insert = lazyDirectoryUtils.insert;
  remove = lazyDirectoryUtils.remove;
  peel = lazyDirectoryUtils.peel;
  cast = lazyDirectoryUtils.cast;
}
