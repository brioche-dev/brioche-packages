import * as runtime from "../runtime.bri";
import { source as briocheSource } from "../source.bri";
import { assert } from "../utils.bri";
import { createProxy } from "./proxy.bri";
import { type Value, type AsyncLazy, type Lazy, briocheDeserializeAny, createLazy, lazyDirectoryUtils } from "./value.bri";
import { valueType } from "./value_type.bri";

export function directory(entries: Record<string, AsyncLazy>): Lazy<Directory> {
  const bEntries: Record<runtime.BString, AsyncLazy> = {};
  for (const [k, v] of Object.entries(entries)) {
    bEntries[runtime.bstring(k)] = v;
  }

  return createLazy(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      const entries = await Promise.all(
        Object.entries(bEntries)
          .map(async ([k, v]): Promise<[runtime.BString, runtime.LazyValue]> => [k as runtime.BString, await (await v).briocheSerialize()]
          ),
      );
      return {
        type: "directory",
        entries: Object.fromEntries(entries),
        meta,
      };
    },
  });
}

export function merge(...directories: AsyncLazy<Directory>[]): Lazy<Directory> {
  const proxyDirectories = directories.map((dir) => createProxy(dir));
  return createLazy(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      const serializedDirectories = await Promise.all(proxyDirectories.map(async (dir) => (await dir).briocheSerialize()));
      return {
        type: "merge",
        directories: serializedDirectories,
        meta,
      };
    }
  });
}

export function get(directory: AsyncLazy<Directory>, path: string): Lazy {
  const proxyDirectory = createProxy(directory);
  return createLazy(["file", "directory", "symlink"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => ({
      type: "get",
      directory: await proxyDirectory.briocheSerialize(),
      path: runtime.bstring(path),
      meta,
    }),
  });
}

export function insert(dir: AsyncLazy<Directory>, path: string, value: AsyncLazy): Lazy<Directory> {
  const pathComponents = path.split("/");
  const dirPathComponents = pathComponents.slice(0, -1);
  const fileName = pathComponents.at(-1);
  if (fileName == null || dirPathComponents.some((pathComponent) => pathComponent === "")) {
    throw new Error(`invalid path: "${path}"`);
  }

  const directoryFromPath = dirPathComponents.reduceRight((acc, pathComponent) => directory({
    [pathComponent]: acc,
  }), directory({
    [fileName]: value,
  }));


  const proxyDirectories = [dir, directoryFromPath].map((dir) => createProxy(dir));
  return createLazy(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      const serializedDirectories = await Promise.all(proxyDirectories.map(async (dir) => (await dir).briocheSerialize()));
      return {
        type: "merge",
        directories: serializedDirectories,
        meta,
      };
    }
  });
}

export function remove(directory: AsyncLazy<Directory>, ...paths: string[]): Lazy<Directory> {
  const proxyDirectory = createProxy(directory);
  const runtimePaths = paths.map((path) => runtime.bstring(path));
  return createLazy(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      return {
        type: "remove",
        directory: await proxyDirectory.briocheSerialize(),
        paths: runtimePaths,
        meta,
      };
    }
  });
}

interface DirectoryCtor {
  entries: Record<runtime.BString, runtime.CompleteValue>;
  source?: runtime.Source;
}

export class Directory implements Lazy<Directory> {
  [valueType]: "directory" = "directory";
  entries: Record<runtime.BString, runtime.CompleteValue>;
  source?: runtime.Source;

  constructor(options: DirectoryCtor) {
    this.entries = options.entries;
    this.source = options.source;
  }

  resolve(): Directory {
    return this;
  }

  briocheSerialize(): runtime.CompleteDirectory {
    return {
      type: "directory",
      entries: this.entries,
      meta: {
        source: this.source,
      },
    };
  }

  #tryGetWithDepth(sourceDepth: number, paths: string[]): Value | null {
    const source = briocheSource({ depth: sourceDepth });
    const parts = paths.flatMap(path => path.split("/"));
    const displayPath = paths.join("/");
    let current: Value = this;
    for (const part of parts) {
      if (part === "" || part === ".") {
        continue;
      }
      if (part === "..") {
        throw new Error(`unsupported path ${displayPath}`);
      }
      if (!(current instanceof Directory)) {
        throw new Error(`path ${displayPath} descends into non-directory`);
      }
      const entry = current.entries[runtime.bstring(part)];
      if (!entry) {
        return null;
      }
      current = briocheDeserializeAny(entry, source);
    }
    return current;
  }

  tryGet(...paths: string[]): Value | null {
    return this.#tryGetWithDepth(2, paths);
  }

  get(...paths: string[]): Value {
    const displayPath = paths.join("/");
    const result = this.#tryGetWithDepth(2, paths);
    assert(result != null, `path ${displayPath} does not exist`);
    return result;
  }

  insert(path: string, value: Value): Directory {
    const source = briocheSource({ depth: 1 });
    const [entryName, ...rest] = path.split("/").filter(part => part !== "");

    if (entryName == null) {
      throw new Error(`invalid path "${path}"`);
    }

    const entryKey = runtime.bstring(entryName);

    if (rest.length === 0) {
      return new Directory({
        entries: {
          ...this.entries,
          [entryKey]: value.briocheSerialize()
        },
        source,
      });
    } else {
      const currentEntry: runtime.CompleteValue = this.entries[entryKey] ?? {
        type: "directory",
        entries: {},
      };
      const currentEntryValue = briocheDeserializeAny(currentEntry, source);
      assert(currentEntryValue instanceof Directory, `tried to descend into non-directory ${entryName}`);
      const newEntry = currentEntryValue.insert(rest.join("/"), value);

      return new Directory({
        entries: {
          ...this.entries,
          [entryKey]: newEntry.briocheSerialize(),
        },
        source,
      });
    }
  }

  peel(): Lazy {
    const keys = Object.keys(this.entries) as runtime.BString[];
    assert(keys.length === 1, `expected directory to only have one entry, but had ${keys.length} entries`);
    return briocheDeserializeAny(this.entries[keys[0]!]!, briocheSource({ depth: 1 }));
  }

  static briocheDeserialize(value: runtime.CompleteValue, source: runtime.Source | undefined): Directory {
    assert(value.type === "directory");
    return new Directory({ entries: value.entries, source });
  }

  remove = lazyDirectoryUtils.remove;
  cast = lazyDirectoryUtils.cast;
}
