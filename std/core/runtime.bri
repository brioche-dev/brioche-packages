export async function resolveAll(artifacts: []): Promise<[]>;
export async function resolveAll(
  artifacts: [LazyArtifact],
): Promise<[CompleteArtifact]>;
export async function resolveAll(
  artifacts: [LazyArtifact, LazyArtifact],
): Promise<[CompleteArtifact, CompleteArtifact]>;
export async function resolveAll(
  artifacts: LazyArtifact[],
): Promise<CompleteArtifact[]>;
export async function resolveAll(
  artifacts: LazyArtifact[],
): Promise<CompleteArtifact[]> {
  const result = await (globalThis as any).Deno.core.ops.op_brioche_resolve_all(
    artifacts,
  );
  return result;
}

export async function resolve(
  artifact: LazyArtifact,
): Promise<CompleteArtifact> {
  const [result] = await resolveAll([artifact]);
  return result;
}

export async function createProxy(artifact: LazyArtifact): Promise<LazyProxy> {
  const result = await (
    globalThis as any
  ).Deno.core.ops.op_brioche_create_proxy(artifact);
  return result;
}

export async function readBlob(blobId: BlobId): Promise<BString> {
  const result = await (globalThis as any).Deno.core.ops.op_brioche_read_blob(
    blobId,
  );
  return result;
}

export function utf8Encode(string: string): Uint8Array {
  const result = (globalThis as any).Deno.core.ops.op_brioche_utf8_encode(
    string,
  );
  return result;
}

export function utf8Decode(bytes: Uint8Array): string {
  const result = (globalThis as any).Deno.core.ops.op_brioche_utf8_decode(
    bytes,
  );
  return result;
}

export function tickEncode(value: Uint8Array | string): string {
  const bytes = typeof value === "string" ? utf8Encode(value) : value;
  const result = (globalThis as any).Deno.core.ops.op_brioche_tick_encode(
    bytes,
  );
  return result;
}

export function tickDecode(value: Uint8Array | string): Uint8Array {
  const bytes = typeof value === "string" ? utf8Encode(value) : value;
  const result = (globalThis as any).Deno.core.ops.op_brioche_tick_decode(
    bytes,
  );
  return result;
}

export type CompleteArtifact =
  | CompleteFile
  | CompleteSymlink
  | CompleteDirectory;

export type CompleteFile = WithMeta & {
  type: "file";
  contentBlob: BlobId;
  executable: boolean;
  resources: CompleteDirectory;
};

export type CompleteSymlink = WithMeta & {
  type: "symlink";
  target: BString;
};

export type CompleteDirectory = WithMeta & {
  type: "directory";
  listingBlob?: BlobId;
};

export type LazyArtifact =
  | CompleteArtifact
  | LazyDownload
  | LazyUnpack
  | LazyProcess
  | LazyCreateFile
  | LazyCreateDirectory
  | LazyCast
  | LazyMerge
  | LazyPeel
  | LazyGet
  | LazyInsert
  | LazySetPermissions
  | LazyProxy;

export type LazyCreateDirectory = WithMeta & {
  type: "create_directory";
  entries: Record<BString, LazyArtifact>;
};

export type LazyDownload = WithMeta & {
  type: "download";
  url: string;
  hash: Hash;
};

export type LazyUnpack = WithMeta & {
  type: "unpack";
  file: LazyArtifact;
  archive: ArchiveFormat;
  compression?: CompressionFormat | null;
};

export type LazyProcess = WithMeta & {
  type: "process";
  command: ProcessTemplate;
  args: ProcessTemplate[];
  env: Record<BString, ProcessTemplate>;
  workDir: LazyArtifact;
  outputScaffold?: LazyArtifact | null;
  platform: Platform;
};

export type LazyCreateFile = WithMeta & {
  type: "create_file";
  content: BString;
  executable: boolean;
  resources: LazyArtifact;
};

export type LazyCast = WithMeta & {
  type: "cast";
  artifact: LazyArtifact;
  to: CompleteArtifact["type"];
};

export type LazyMerge = WithMeta & {
  type: "merge";
  directories: LazyArtifact[];
};

export type LazyPeel = WithMeta & {
  type: "peel";
  directory: LazyArtifact;
  depth: number;
};

export type LazyGet = WithMeta & {
  type: "get";
  directory: LazyArtifact;
  path: BString;
};

export type LazyInsert = WithMeta & {
  type: "insert";
  directory: LazyArtifact;
  path: BString;
  artifact?: LazyArtifact | null | undefined;
};

export type LazySetPermissions = WithMeta & {
  type: "set_permissions";
  file: LazyArtifact;
  executable: boolean | null;
};

export type LazyProxy = WithMeta & {
  type: "proxy";
  blob: BlobId;
};

export type ArtifactHash = string & { __artifactHash: never };

export type WithMeta = {
  meta?: Meta;
};

export type Meta = {
  source?: Source;
};

export type Source = StackFrame[];

export type StackFrame = {
  fileName?: string | null;
  lineNumber?: number | null;
  columnNumber?: number | null;
};

export type BlobId = string & { __blobId: never };

export type BString = string & { __bString: never };

export type HexString = string & { __hexString: never };

export type Platform = "x86_64-linux";

export type Hash = { type: "sha256"; value: HexString };

export type ArchiveFormat = "tar";

export type CompressionFormat = "none" | "bzip2" | "gzip" | "xz" | "zstd";

export type ProcessTemplate = {
  components: ProcessTemplateComponent[];
};

export type ProcessTemplateComponent =
  | { type: "literal"; value: BString }
  | { type: "input"; artifact: LazyArtifact }
  | { type: "output_path" }
  | { type: "resources_dir" }
  | { type: "home_dir" }
  | { type: "work_dir" }
  | { type: "temp_dir" };

export function isHex(s: string): s is HexString {
  return /^([0-9a-fA-F]{2})*$/.test(s);
}

export function bstring(value: string | Uint8Array): BString {
  return tickEncode(value) as BString;
}

export function bstringToBytes(value: BString): Uint8Array {
  return tickDecode(value);
}

export function bstringToString(value: BString): string {
  const bytes = bstringToBytes(value);
  return utf8Decode(bytes);
}
