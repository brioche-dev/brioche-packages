import * as runtime from "../runtime.bri";
import { source as briocheSource } from "../source.bri";
import { assert } from "../utils.bri";
import { createProxy } from "./proxy.bri";
import {
  type Artifact,
  type AsyncLazy,
  type Lazy,
  briocheDeserializeAny,
  createLazy,
  lazyDirectoryUtils,
} from "./artifact.bri";
import { artifactType } from "./artifact_type.bri";

export function directory(
  entries: Record<string, AsyncLazy> = {},
): Lazy<Directory> {
  const bEntries: Record<runtime.BString, AsyncLazy> = {};
  for (const [k, v] of Object.entries(entries)) {
    bEntries[runtime.bstring(k)] = v;
  }

  return createLazy(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      const entries = await Promise.all(
        Object.entries(bEntries).map(
          async ([k, v]): Promise<[runtime.BString, runtime.LazyArtifact]> => [
            k as runtime.BString,
            await (await v).briocheSerialize(),
          ],
        ),
      );
      return {
        type: "directory",
        entries: Object.fromEntries(entries),
        meta,
      };
    },
  });
}

export function merge(...directories: AsyncLazy<Directory>[]): Lazy<Directory> {
  const proxyDirectories = directories.map((dir) => createProxy(dir));
  return createLazy(["directory"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      const serializedDirectories = await Promise.all(
        proxyDirectories.map(async (dir) => (await dir).briocheSerialize()),
      );
      return {
        type: "merge",
        directories: serializedDirectories,
        meta,
      };
    },
  });
}

interface DirectoryCtor {
  entries: Record<runtime.BString, runtime.CompleteArtifact>;
  source?: runtime.Source;
}

export class Directory implements Lazy<Directory> {
  [artifactType]: "directory" = "directory";
  entries: Record<runtime.BString, runtime.CompleteArtifact>;
  source?: runtime.Source;

  constructor(options: DirectoryCtor) {
    this.entries = options.entries;
    this.source = options.source;
  }

  resolve(): Directory {
    return this;
  }

  briocheSerialize(): runtime.CompleteDirectory {
    return {
      type: "directory",
      entries: this.entries,
      meta: {
        source: this.source,
      },
    };
  }

  static briocheDeserialize(
    artifact: runtime.CompleteArtifact,
    source: runtime.Source | undefined,
  ): Directory {
    assert(artifact.type === "directory");
    return new Directory({ entries: artifact.entries, source });
  }

  get = lazyDirectoryUtils.get;
  insert = lazyDirectoryUtils.insert;
  remove = lazyDirectoryUtils.remove;
  peel = lazyDirectoryUtils.peel;
  cast = lazyDirectoryUtils.cast;
}
