import * as runtime from "../runtime.bri";
import { assert } from "../utils.bri";
import { type Lazy, createLazy, lazyFileUtils } from "./artifact.bri";
import { artifactType } from "./artifact_type.bri";

export function file(data: string | Uint8Array): Lazy<File> {
  const serializedData = runtime.bstring(data);
  return createLazy(["file"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      return {
        type: "create_file",
        data: serializedData,
        executable: false,
        resources: {
          type: "directory",
          entries: {},
        },
        meta,
      };
    },
  });
}

export interface FilePermissions {
  executable: boolean;
}

export interface FileCtor {
  source?: runtime.Source;
  blobId: runtime.BlobId;
  executable: boolean;
  resources: runtime.CompleteDirectoryContents;
}

export class File implements Lazy<File> {
  [artifactType]: "file" = "file";
  source?: runtime.Source;
  blobId: runtime.BlobId;
  executable: boolean;
  resources: runtime.CompleteDirectoryContents;

  constructor(options: FileCtor) {
    this.source = options.source;
    this.blobId = options.blobId;
    this.executable = options.executable;
    this.resources = options.resources;
  }

  resolve(): File {
    return this;
  }

  briocheSerialize(): runtime.CompleteFile {
    return {
      type: "file",
      data: this.blobId,
      executable: this.executable,
      resources: this.resources,
      meta: {
        source: this.source,
      },
    };
  }

  static briocheDeserialize(
    artifact: runtime.CompleteArtifact,
    source: runtime.Source | undefined,
  ): File {
    assert(artifact.type === "file");
    return new File({
      blobId: artifact.data,
      executable: artifact.executable,
      resources: artifact.resources,
      source,
    });
  }

  cast = lazyFileUtils.cast;
  withPermissions = lazyFileUtils.withPermissions;
  unpack = lazyFileUtils.unpack;
  readBytes = lazyFileUtils.readBytes;
  read = lazyFileUtils.read;
}
