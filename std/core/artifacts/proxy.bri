import * as runtime from "../runtime.bri";
import { source as briocheSource } from "../source.bri";
import { type Equatable, assert, jsonSerialize } from "../utils.bri";
import { type Artifact, type AsyncLazy, type Lazy, type LazyArtifactSerialization, type ArtifactType, briocheDeserializeAny, createLazy } from "./artifact.bri";

export function memo<Args extends Array<Equatable>, Ret extends Artifact>(
  f: (...args: Args) => AsyncLazy<Ret>
): (...args: Args) => Lazy<Ret> {
  const proxies = new Map<string, Lazy<Ret>>();
  return (...args: Args) => {
    const key = jsonSerialize(args);
    const memoizedProxy = proxies.get(key);
    if (memoizedProxy != null) {
      return memoizedProxy;
    } else {
      const proxy = createProxy(f(...args));
      proxies.set(key, proxy);
      return proxy;
    }
  };
}

export function createProxy<T extends Artifact>(artifact: AsyncLazy<T>): Lazy<T> {
  let serialized: Promise<runtime.LazyProxy> | undefined;
  let resolved: T | undefined;

  const serializeProxy = async (): Promise<runtime.LazyProxy> => {
    if (serialized === undefined) {
      serialized = (async () => {
        const serializedArtifact = await (await artifact).briocheSerialize();
        const proxy = await runtime.createProxy(serializedArtifact);
        return {
          ...proxy,
          meta: serializedArtifact.meta,
        };
      })();
    }

    return await serialized;
  };

  return createLazy(["file", "directory", "symlink"] as ArtifactType<T>[], {
    sourceDepth: 1,
    briocheSerialize: async () => {
      const proxy = await serializeProxy() as unknown;
      return proxy as unknown as LazyArtifactSerialization<T>;
    },
    resolve: async () => {
      if (resolved === undefined) {
        const proxy = await serializeProxy();
        const resolvedArtifact = await runtime.resolve(proxy);
        resolved = briocheDeserializeAny(resolvedArtifact, proxy.meta?.source) as T;
      }

      assert(resolved != null, "expected `resolve()` to return a value");
      return resolved;
    },
  });
}
