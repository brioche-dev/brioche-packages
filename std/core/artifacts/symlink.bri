import * as runtime from "../runtime.bri";
import { source as briocheSource } from "../source.bri";
import { assert } from "../utils.bri";
import { type Lazy, lazySymlinkUtils } from "./artifact.bri";
import { artifactType } from "./artifact_type.bri";

export interface SymlinkOptions {
  target: string;
}

export function symlink(opts: SymlinkOptions): Symlink {
  return new Symlink({
    target: runtime.bstring(opts.target),
    source: briocheSource({ depth: 1 }),
  });
}

interface SymlinkCtor {
  target: runtime.BString;
  source?: runtime.Source;
}

export class Symlink implements Lazy<Symlink> {
  [artifactType]: "symlink" = "symlink";
  target: runtime.BString;
  source?: runtime.Source;

  constructor(options: SymlinkCtor) {
    this.target = options.target;
    this.source = options.source;
  }

  briocheSerialize(): runtime.CompleteSymlink {
    return {
      type: "symlink",
      target: this.target,
    };
  }

  static briocheDeserialize(
    artifact: runtime.CompleteArtifact,
    source: runtime.Source | undefined,
  ): Symlink {
    assert(artifact.type === "symlink");
    return new Symlink({ target: artifact.target, source });
  }

  resolve(): Symlink {
    return this;
  }

  cast = lazySymlinkUtils.cast;
}
