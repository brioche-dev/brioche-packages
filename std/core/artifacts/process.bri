import { Awaitable } from "../utils.bri";
import { source as briocheSource } from "../source.bri";
import * as runtime from "../runtime.bri";
import { type Directory, directory } from "./directory.bri";
import { type AsyncLazy, type Lazy, type Artifact, briocheDeserializeAny, createLazy } from "./artifact.bri";

export interface ProcessOptions {
  command: ProcessTemplateLike,
  args?: ProcessTemplateLike[],
  env?: Record<string, ProcessTemplateLike>,
  workDir?: AsyncLazy<Directory>,
}

export function process(options: ProcessOptions): Lazy {
  const env: Record<string, ProcessTemplateLike> = {
    "BRIOCHE_OUTPUT": outputPath,
    "BRIOCHE_PACK_RESOURCES_DIR": resourcesDir,
    "HOME": homeDir,
    "TMPDIR": tempDir,
    ...options.env,
  };

  const bEnv: Record<runtime.BString, ProcessTemplate> = {};
  for (const [k, v] of Object.entries(env)) {
    bEnv[runtime.bstring(k)] = processTemplate(v);
  }

  return createLazy(["file", "directory", "symlink"], {
    sourceDepth: 1,
    briocheSerialize: async (meta) => {
      return {
        type: "process",
        command: await processTemplate(options.command).briocheSerialize(),
        args: await Promise.all((options.args ?? []).map(async (arg) => await processTemplate(arg).briocheSerialize())),
        env: Object.fromEntries(await Promise.all(Object.entries(env).map(async ([k, v]) => [k, await processTemplate(v).briocheSerialize()]))),
        platform: "x86_64-linux",
        workDir: await (await (options.workDir ?? directory())).briocheSerialize(),
        meta,
      }
    },
  });
}

export function processTemplate(...components: ProcessTemplateLike[]): ProcessTemplate {
  return new ProcessTemplate(...components);
}

export function tpl(strings: TemplateStringsArray, ...items: ProcessTemplateLike[]): ProcessTemplate {
  const components = strings.flatMap((str, i): ProcessTemplateLike[] => {
    const item = items[i];
    if (item != null) {
      return [str, item];
    } else {
      return [str];
    }
  });

  return new ProcessTemplate(...components);
}

export const outputPath: unique symbol = Symbol("outputPath");
export const resourcesDir: unique symbol = Symbol("resourcesDir");
export const homeDir: unique symbol = Symbol("homeDir");
export const workDir: unique symbol = Symbol("workDir");
export const tempDir: unique symbol = Symbol("tempDir");

export type ProcessTemplateLike = Awaitable<ProcessTemplateComponent>;

export type ProcessTemplateComponent =
  | string
  | ProcessTemplate
  | Lazy
  | typeof outputPath
  | typeof resourcesDir
  | typeof homeDir
  | typeof workDir
  | typeof tempDir
  | undefined;

export class ProcessTemplate {
  components: ProcessTemplateLike[];

  constructor(...components: ProcessTemplateLike[]) {
    this.components = components;
  }

  async briocheSerialize(): Promise<runtime.ProcessTemplate> {
    const components = await Promise.all(this.components);
    const runtimeComponents = await Promise.all(components.map(async (component): Promise<runtime.ProcessTemplateComponent[]> => {
      if (component == null || component === "") {
        return [];
      } else if (typeof component === "string") {
        return [{ type: "literal", value: runtime.bstring(component) }];
      } else if (component === outputPath) {
        return [{ type: "output_path" }];
      } else if (component === resourcesDir) {
        return [{ type: "resources_dir" }];
      } else if (component === homeDir) {
        return [{ type: "home_dir" }];
      } else if (component === workDir) {
        return [{ type: "work_dir" }];
      } else if (component === tempDir) {
        return [{ type: "temp_dir" }];
      } else if (component instanceof ProcessTemplate) {
        const serialized = await component.briocheSerialize();
        return serialized.components;
      } else {
        return [{ type: "input", artifact: await component.briocheSerialize() }];
      }
    }));

    return {
      components: runtimeComponents.flat(1),
    };
  }
}
