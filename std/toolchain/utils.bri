import * as std from "/core";
import { packTools } from "/pack_tools.bri";

interface UseBriocheLdOptions {
  ldPaths: string[];
  interpreterPaths: Record<string, string>;
}

export function useBriocheLd(dir: std.Lazy<std.Directory>, options: UseBriocheLdOptions): std.Lazy<std.Directory> {
  const briocheLd = packTools().get("brioche-ld");
  const briochePacked = packTools().get("brioche-packed-userland-exec");

  for (const ldPath of options.ldPaths) {
    const systemLd = dir.get(ldPath);

    const ldDir = ldPath.split("/").slice(0, -1).join("/");
    const ldParentDirComponents = ldDir.split("/").slice(0, -1);
    const ldName = ldPath.split("/").at(-1);
    const ldParentName = ldDir.split("/").at(-1);
    std.assert(ldName != null && ldParentName != null);

    const briocheLdPath = [...ldParentDirComponents, "libexec", "brioche-ld"].join("/");
    let briocheLdDir: std.Lazy<std.Directory> = std.directory({
      "ld": std.symlink({ target: `../../${ldParentName}/${ldName}-orig` }),
      "brioche-packed": briochePacked,
    });

    for (const [interpreterPath, interpreterTargetPath] of Object.entries(options.interpreterPaths)) {
      const interpreterDir = interpreterPath.split("/").slice(0, -1).join("/");
      const pathToBriocheLd = interpreterDir.split("/").map(() => "..").join("/");
      const pathToRoot = briocheLdPath.split("/").map(() => "..").join("/");
      const interpreterTarget = `${pathToBriocheLd}/${pathToRoot}/${interpreterTargetPath}`;
      briocheLdDir = briocheLdDir.insert(interpreterPath, std.symlink({ target: interpreterTarget }));
    };

    dir = dir.insert(`${ldDir}/${ldName}-orig`, systemLd);
    dir = dir.insert(ldPath, briocheLd);
    dir = dir.insert(briocheLdPath, briocheLdDir);
  }

  return dir;
}

interface WrapWithScriptOptions {
  paths: string[];
  renameSuffix: string;
  script: std.AsyncLazy<std.File>;
}

export function wrapWithScript(
  directory: std.AsyncLazy<std.Directory>,
  options: WrapWithScriptOptions,
): std.Lazy<std.Directory> {
  let dir = std.lazy(directory);

  for (const path of options.paths) {
    const program = dir.get(path);

    dir = dir.insert(path, options.script);
    dir = dir.insert(`${path}${options.renameSuffix}`, program);
  }

  return dir;
}
