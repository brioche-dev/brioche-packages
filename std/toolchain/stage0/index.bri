import * as std from "/core";
import { packTools } from "/pack_tools.bri";

interface BootstrapRunOptions {
  script: string;
  env?: Record<string, std.ProcessTemplateLike>;
  workDir?: std.AsyncLazy<std.Directory>;
}

export function bootstrapRun(
  options: BootstrapRunOptions,
): std.Lazy<std.Directory> {
  const bootstrapRootfs = std
    .download({
      url: "https://development-content.brioche.dev/github.com/brioche-dev/brioche-bootstrap/99ab9787d5ee27eb613227131e23d2c651de318a/brioche-bootstrap.tar.zstd",
      hash: std.sha256Hash(
        "0cabcd0a074e08ac132281f711f884777b47def17fbeff2a82ba011836b83d11",
      ),
    })
    .unpack("tar", "zstd");

  const busybox = std
    .download({
      url: "https://development-content.brioche.dev/github.com/tangramdotdev/bootstrap/2022-10-31/busybox_amd64_linux.tar.xz",
      hash: std.sha256Hash(
        "e2e9ae181e115e155158cb9031687d943b0847d8058a4c28454194d835478be6",
      ),
    })
    .unpack("tar", "xz");

  const briocheLd = packTools().get("brioche-ld");
  const briochePacked = packTools().get("brioche-packed-userland-exec");

  return std
    .process({
      command: "/usr/bin/env",
      args: [
        "sh",
        "-c",
        `
        set -eu

        "$BUSYBOX/bin/busybox" cp -r "$BOOTSTRAP_ROOTFS" ./rootfs
        echo "$ENTER_BOOTSTRAP_SCRIPT" > enter.sh
        "$BUSYBOX/bin/busybox" chmod +x enter.sh
        echo "$RUN_BOOTSTRAP_SCRIPT" > rootfs/bootstrap.sh
        "$BUSYBOX/bin/busybox" chmod +x rootfs/bootstrap.sh
        "$BUSYBOX/bin/busybox" unshare -Umfr /usr/bin/env sh ./enter.sh
      `,
      ],
      env: {
        BUSYBOX: busybox,
        ENTER_BOOTSTRAP_SCRIPT: `
        set -eu

        "$BUSYBOX/bin/busybox" mkdir -p "$BRIOCHE_OUTPUT"

        "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/hostfs"
        "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/proc"
        "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/sys"
        "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/dev"
        "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/$BUSYBOX"
        "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/$HOME"
        "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/$BRIOCHE_OUTPUT"
        "$BUSYBOX/bin/busybox" mkdir -p "$(pwd)/rootfs/$BRIOCHE_PACK_RESOURCES_DIR"

        "$BUSYBOX/bin/busybox" mount --rbind "$(pwd)/rootfs" "$(pwd)/rootfs"
        "$BUSYBOX/bin/busybox" mount --rbind "/proc" "$(pwd)/rootfs/proc"
        "$BUSYBOX/bin/busybox" mount --rbind "/sys" "$(pwd)/rootfs/sys"
        "$BUSYBOX/bin/busybox" mount --rbind "/dev" "$(pwd)/rootfs/dev"
        "$BUSYBOX/bin/busybox" mount --rbind "$BUSYBOX" "$(pwd)/rootfs/$BUSYBOX"
        "$BUSYBOX/bin/busybox" mount --rbind "$HOME" "$(pwd)/rootfs/$HOME"
        "$BUSYBOX/bin/busybox" mount --rbind "$BRIOCHE_OUTPUT" "$(pwd)/rootfs/$BRIOCHE_OUTPUT"
        "$BUSYBOX/bin/busybox" mount --rbind "$BRIOCHE_PACK_RESOURCES_DIR" "$(pwd)/rootfs/$BRIOCHE_PACK_RESOURCES_DIR"

        "$BUSYBOX/bin/busybox" mkdir -p "$HOME/.local/libexec/brioche-toolchain/bin" "$HOME/.local/libexec/brioche-toolchain/libexec/brioche-ld/lib64"
        "$BUSYBOX/bin/busybox" cp "$BRIOCHE_LD" "$HOME/.local/libexec/brioche-toolchain/bin/brioche-ld"
        "$BUSYBOX/bin/busybox" cp "$BRIOCHE_PACKED" "$HOME/.local/libexec/brioche-toolchain/libexec/brioche-ld/brioche-packed"
        "$BUSYBOX/bin/busybox" chmod +x "$HOME/.local/libexec/brioche-toolchain/bin/brioche-ld" "$HOME/.local/libexec/brioche-toolchain/libexec/brioche-ld/brioche-packed"
        "$BUSYBOX/bin/busybox" ln -s "/usr/bin/ld" "$HOME/.local/libexec/brioche-toolchain/libexec/brioche-ld/ld"
        "$BUSYBOX/bin/busybox" ln -s "/lib64/ld-linux-x86-64.so.2" "$HOME/.local/libexec/brioche-toolchain/libexec/brioche-ld/lib64/"
        "$BUSYBOX/bin/busybox" ln -s "brioche-ld" "$HOME/.local/libexec/brioche-toolchain/bin/ld"
        "$BUSYBOX/bin/busybox" ln -s "brioche-ld" "$HOME/.local/libexec/brioche-toolchain/bin/x86_64-linux-gnu-ld"

        export PATH="$HOME/.local/libexec/brioche-toolchain/bin\${PATH:+:$PATH}"

        "$BUSYBOX/bin/busybox" pivot_root "$(pwd)/rootfs" "$(pwd)/rootfs/hostfs"
        /bin/bash /bootstrap.sh
      `,
        RUN_BOOTSTRAP_SCRIPT: options.script,
        BOOTSTRAP_ROOTFS: bootstrapRootfs,
        BRIOCHE_LD: briocheLd,
        BRIOCHE_PACKED: briochePacked,
        ...options.env,
      },
      workDir: options.workDir,
    })
    .cast("directory");
}

export default async (): Promise<std.Lazy> => {
  const utils = std
    .download({
      url: "https://development-content.brioche.dev/github.com/tangramdotdev/bootstrap/2023-07-06/utils_amd64_linux.tar.zstd",
      hash: std.sha256Hash(
        "eb29ea059fcd9ca457841f5c79151721a74761a31610d694bce61a62f4de6d33",
      ),
    })
    .unpack("tar", "zstd");

  const toolchain = std
    .download({
      url: "https://development-content.brioche.dev/github.com/tangramdotdev/bootstrap/2023-07-06/toolchain_amd64_linux.tar.zstd",
      hash: std.sha256Hash(
        "27416708f7ee8cd0c5d408010192705b40c914647fd0d80f00c2194795828cd6",
      ),
    })
    .unpack("tar", "zstd");

  const make = std
    .download({
      url: "https://development-content.brioche.dev/github.com/tangramdotdev/bootstrap/2022-10-31/make_static_linux_amd64.tar.xz",
      hash: std.sha256Hash(
        "f8a75f171c2c753bc86a331473812ddc24837d5e91b0b1c7af89d6a2aa6e8986",
      ),
    })
    .unpack("tar", "xz");

  const briocheLd = packTools().get("brioche-ld");
  const briochePacked = packTools().get("brioche-packed-userland-exec");

  const briochePack = std.directory({
    "x86_64-linux-musl": std.directory({
      bin: std.directory({
        "brioche-ld": briocheLd,
      }),
      libexec: std.directory({
        "brioche-ld": std.directory({
          ld: std.symlink({ target: "../../bin/system-ld" }),
          "brioche-packed": briochePacked,
          lib: std.directory({
            "ld-musl-x86_64.so.1": std.symlink({
              target: "../../../../lib/ld-musl-x86_64.so.1",
            }),
          }),
        }),
      }),
    }),
  });

  let stage0 = std.merge(utils, toolchain, make, briochePack);

  const systemLd = stage0.get("x86_64-linux-musl/bin/ld");
  stage0 = stage0.insert("x86_64-linux-musl/bin/system-ld", systemLd);
  stage0 = stage0.insert(
    "x86_64-linux-musl/bin/ld",
    std.symlink({ target: "brioche-ld" }),
  );
  stage0 = stage0.insert(
    "bin/ld",
    std.symlink({ target: "../x86_64-linux-musl/bin/ld" }),
  );

  return stage0;
};
