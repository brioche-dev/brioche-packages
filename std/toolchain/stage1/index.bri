import * as std from "/core";
import binutils from "./1_01_binutils.bri";
import gcc from "./1_02_gcc.bri";
import linuxHeaders from "./1_03_linux_headers.bri";
import glibc from "./1_04_glibc.bri";
import libstdcpp from "./1_05_libstdcpp.bri";
import { useBriocheLd, wrapWithScript } from "../utils.bri";

export { default as linuxHeaders } from "./1_03_linux_headers.bri";
export { default as glibc } from "./1_04_glibc.bri";
export { default as libstdcpp } from "./1_05_libstdcpp.bri";

export default std.memo(() => {
  let stage1 = std.merge(
    binutils(),
    gcc(),
    linuxHeaders(),
    glibc(),
    libstdcpp(),
  );

  stage1 = stage1.insert("bin", std.symlink({ target: "usr/bin" }));

  stage1 = useBriocheLd(stage1, {
    ldPaths: [
      "usr/bin/x86_64-lfs-linux-gnu-ld",
      "usr/bin/x86_64-lfs-linux-gnu-ld.bfd",
      "usr/x86_64-lfs-linux-gnu/bin/ld",
      "usr/x86_64-lfs-linux-gnu/bin/ld.bfd"
    ],
    interpreterPaths: {
      "lib64/ld-linux-x86-64.so.2": "lib/ld-linux-x86-64.so.2",
    },
  });

  stage1 = wrapWithScript(stage1, {
    paths: [
      "usr/bin/x86_64-lfs-linux-gnu-g++",
      "usr/bin/x86_64-lfs-linux-gnu-gcc",
    ],
    renameSuffix: "-orig",
    script: std.file(std.indoc`
      #!/usr/bin/env sh
      script_dir=$(cd "$(dirname -- "$0")" && pwd -P)
      sysroot=$(cd "$script_dir/../.." && pwd -P)
      "$0-orig" --sysroot="$sysroot" -isystem "$sysroot/x86_64-lfs-linux-gnu/include/c++/13.2.0/x86_64-lfs-linux-gnu" -isystem "$sysroot/x86_64-lfs-linux-gnu/include/c++/13.2.0" -isystem "$sysroot/usr/include" "$@"
    `).withPermissions({ executable: true }),
  });

  return stage1;
});
