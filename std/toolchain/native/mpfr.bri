import * as std from "/core";
import stage2 from "/toolchain/stage2";
import gmp from "./gmp.bri";

export default std.memo((): std.Lazy<std.Directory> => {
  let source = std
    .download({
      url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/mpfr-4.2.0.tar.xz",
      hash: std.sha256Hash(
        "06a378df13501248c1b2db5aa977a2c8126ae849a9d9b7be2546fb4a9c26d993",
      ),
    })
    .unpack("tar", "xz")
    .peel()
    .cast("directory");

  // Fix a broken test case
  source = std
    .process({
      command: std.tpl`${stage2()}/bin/sed`,
      args: [
        "-e",
        "s/+01,234,567/+1,234,567 /",
        "-e",
        "s/13.10Pd/13Pd/",
        "-i",
        std.tpl`${std.outputPath}/tests/tsprintf.c`,
      ],
      outputScaffold: source,
    })
    .cast("directory");

  let mpfr = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-c",
        std.indoc`
          set -euo pipefail

          ./configure \
            --prefix=/ \
            --disable-static \
            --enable-thread-safe
          make
          make install DESTDIR="$BRIOCHE_OUTPUT"
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
        CPPFLAGS: std.tpl`-I${gmp()}/include`,
        LDFLAGS: std.tpl`-L${gmp()}/lib`,
      },
      workDir: source,
    })
    .cast("directory");

  const libtoolArchive = mpfr.get("lib/libmpfr.la").cast("file");
  const newLibtoolArchive = std.lazyFn(async () => {
    let libtoolArchiveContents = await libtoolArchive.read();
    libtoolArchiveContents = libtoolArchiveContents.replace(
      /\/\/lib\/libgmp\.la/g,
      "-lgmp",
    );
    return std.file(libtoolArchiveContents);
  });

  mpfr = mpfr.insert("lib/libmpfr.la", newLibtoolArchive);

  return mpfr;
});
