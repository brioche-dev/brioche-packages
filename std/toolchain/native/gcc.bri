import * as std from "/core";
import { wrapWithScript } from "../utils.bri";
import linuxHeaders from "./linux_headers.bri";
import stage2 from "/toolchain/stage2";
import glibc from "./glibc.bri";
import binutils from "./binutils.bri";
import zlib from "./zlib.bri";
import gmp from "./gmp.bri";
import mpfr from "./mpfr.bri";
import mpc from "./mpc.bri";
import libxcrypt from "./libxcrypt.bri";

export default std.memo((): std.Lazy<std.Directory> => {
  const sourceArchive = std
    .download({
      url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/gcc-13.2.0.tar.xz",
      hash: std.sha256Hash("e275e76442a6067341a27f04c5c6b83d8613144004c0413528863dc6b5c743da"),
    });

  let buildSysroot = std.merge(
    linuxHeaders(),
    glibc(),
    binutils(),
    libxcrypt(),
    std.directory({
      usr: std.directory({
        lib: std.symlink({ target: "../lib" }),
        lib64: std.symlink({ target: "../lib64" }),
        include: std.symlink({ target: "../include" }),
      })
    })
  );

  // TODO: Enable NLS
  let gcc = std.process({
    command: std.tpl`${stage2()}/bin/bash`,
    args: [
      "-c",
      `
        set -euo pipefail

        tar -xf "$source" --strip-components=1 --no-same-owner --no-same-permissions

        case "$(uname -m)" in
          x86_64 )
            sed -e '/m64=/s/lib64/lib/' -i gcc/config/i386/t-linux64
          ;;
        esac

        mkdir build
        cd build

        ../configure \
          --prefix=/ \
          --enable-languages=c,c++ \
          --enable-default-pie \
          --enable-default-ssp \
          --disable-nls \
          --disable-multilib \
          --disable-bootstrap \
          --disable-fixincludes \
          --with-system-zlib \
          --with-gmp="$gmp" \
          --with-mpfr="$mpfr" \
          --with-mpc="$mpc" \
          --with-build-sysroot="$buildSysroot" \
          CFLAGS_FOR_TARGET="-g -O2 $CPPFLAGS" \
          CXXFLAGS_FOR_TARGET="-g -O2 $CPPFLAGS" \
          LDFLAGS_FOR_TARGET="$LDFLAGS" \
          CFLAGS_FOR_BUILD="$CPPFLAGS" \
          CXXFLAGS_FOR_BUILD="$CPPFLAGS" \
          CFLAGS="$CPPFLAGS" \
          CXXFLAGS="$CPPFLAGS" \
          LD="ld"
        make
        make install DESTDIR="$BRIOCHE_OUTPUT"
      `,
    ],
    env: {
      source: sourceArchive,
      PATH: std.tpl`${buildSysroot}/bin:${stage2()}/bin`,
      CPPFLAGS: std.tpl`-I${zlib()}/include -I${gmp()}/include -I${mpfr()}/include -I${mpc()}/include -isystem ${stage2()}/usr/lib/gcc/x86_64-lfs-linux-gnu/13.2.0/include -isystem ${buildSysroot}/include -isystem ${buildSysroot}/usr/include`,
      LDFLAGS: std.tpl`-L${zlib()}/lib -L${gmp()}/lib -L${mpfr()}/lib -L${mpc()}/lib -L${buildSysroot}/lib -L${buildSysroot}/lib64 -lm --sysroot=${buildSysroot}`,
      buildSysroot,
      gmp: gmp(),
      mpfr: mpfr(),
      mpc: mpc(),
    }
  }).cast("directory");

  gcc = wrapWithScript(gcc, {
    paths: [
      "bin/x86_64-pc-linux-gnu-c++",
      "bin/x86_64-pc-linux-gnu-g++",
      "bin/x86_64-pc-linux-gnu-gcc",
      "bin/x86_64-pc-linux-gnu-gcc-13.2.0",
      "bin/c++",
      "bin/g++",
      "bin/gcc",
    ],
    renameSuffix: "-orig",
    script: ccWrapper(),
  });

  gcc = wrapWithScript(gcc, {
    paths: [
      "libexec/gcc/x86_64-pc-linux-gnu/13.2.0/cc1",
    ],
    renameSuffix: "-orig",
    script: cc1Wrapper([
      "$sysroot/libexec/gcc/x86_64-pc-linux-gnu/13.2.0/include",
      "$sysroot/libexec/gcc/x86_64-pc-linux-gnu/13.2.0/include-fixed",
      "$sysroot/include",
    ]),
  });

  gcc = wrapWithScript(gcc, {
    paths: [
      "libexec/gcc/x86_64-pc-linux-gnu/13.2.0/cc1plus",
    ],
    renameSuffix: "-orig",
    script: cc1Wrapper([
      "$sysroot/include/c++/13.2.0",
      "$sysroot/include/c++/13.2.0/backward",
      "$sysroot/lib/gcc/x86_64-pc-linux-gnu/13.2.0/include",
      "$sysroot/lib/gcc/x86_64-pc-linux-gnu/13.2.0/include-fixed",
      "$sysroot/include/c++/13.2.0/x86_64-pc-linux-gnu",
      "$sysroot/include",
    ]),
  });

  return gcc;
});

function ccWrapper(): std.Lazy<std.File> {
  return std.file(std.indoc`
    #!/usr/bin/env sh
    # MIT license: https://stackoverflow.com/a/29835459
    rreadlink() ( # Execute the function in a *subshell* to localize variables and the effect of 'cd'.

      target=$1 fname= targetDir= CDPATH=

      # Try to make the execution environment as predictable as possible:
      # All commands below are invoked via 'command', so we must make sure that 'command'
      # itself is not redefined as an alias or shell function.
      # (Note that command is too inconsistent across shells, so we don't use it.)
      # 'command' is a *builtin* in bash, dash, ksh, zsh, and some platforms do not even have
      # an external utility version of it (e.g, Ubuntu).
      # 'command' bypasses aliases and shell functions and also finds builtins
      # in bash, dash, and ksh. In zsh, option POSIX_BUILTINS must be turned on for that
      # to happen.
      { \\unalias command; \\unset -f command; } >/dev/null 2>&1
      [ -n "$ZSH_VERSION" ] && options[POSIX_BUILTINS]=on # make zsh find *builtins* with 'command' too.

      while :; do # Resolve potential symlinks until the ultimate target is found.
          [ -L "$target" ] || [ -e "$target" ] || { command printf '%s\\n' "ERROR: '$target' does not exist." >&2; return 1; }
          command cd "$(command dirname -- "$target")" # Change to target dir; necessary for correct resolution of target path.
          fname=$(command basename -- "$target") # Extract filename.
          [ "$fname" = '/' ] && fname='' # !! curiously, 'basename /' returns '/'
          if [ -L "$fname" ]; then
            # Extract [next] target path, which may be defined
            # *relative* to the symlink's own directory.
            # Note: We parse 'ls -l' output to find the symlink target
            #       which is the only POSIX-compliant, albeit somewhat fragile, way.
            target=$(command ls -l "$fname")
            target=\${target#* -> }
            continue # Resolve [next] symlink target.
          fi
          break # Ultimate target reached.
      done
      targetDir=$(command pwd -P) # Get canonical dir. path
      # Output the ultimate target's canonical path.
      # Note that we manually resolve paths ending in /. and /.. to make sure we have a normalized path.
      if [ "$fname" = '.' ]; then
        command printf '%s\\n' "\${targetDir%/}"
      elif  [ "$fname" = '..' ]; then
        # Caveat: something like /var/.. will resolve to /private (assuming /var@ -> /private/var), i.e. the '..' is applied
        # AFTER canonicalization.
        command printf '%s\\n' "$(command dirname -- "\${targetDir}")"
      else
        command printf '%s\\n' "\${targetDir%/}/$fname"
      fi
    )

    script_dir=$(cd "$(dirname -- "$(rreadlink "$0")")" && pwd -P)
    sysroot=$(cd "$script_dir/.." && pwd -P)

    set -- --sysroot="$sysroot" "$@"

    "$(rreadlink "$0")-orig" "$@"
  `).withPermissions({ executable: true });
}


function cc1Wrapper(systemHeaders: string[]): std.Lazy<std.File> {
  // Ensure we can safely interpolate the system header paths in the shell script
  const systemHeaderRegex = /^[a-zA-Z0-9_\+\-\.\/\$]+$/;
  std.assert(systemHeaders.every(header => systemHeaderRegex.test(header)));

  const systemHeaderArgs = systemHeaders.map(header => `-isystem "${header}"`).join(" ");

  return std.file(std.indoc`
    #!/usr/bin/env sh
    # MIT license: https://stackoverflow.com/a/29835459
    rreadlink() ( # Execute the function in a *subshell* to localize variables and the effect of 'cd'.

      target=$1 fname= targetDir= CDPATH=

      # Try to make the execution environment as predictable as possible:
      # All commands below are invoked via 'command', so we must make sure that 'command'
      # itself is not redefined as an alias or shell function.
      # (Note that command is too inconsistent across shells, so we don't use it.)
      # 'command' is a *builtin* in bash, dash, ksh, zsh, and some platforms do not even have
      # an external utility version of it (e.g, Ubuntu).
      # 'command' bypasses aliases and shell functions and also finds builtins
      # in bash, dash, and ksh. In zsh, option POSIX_BUILTINS must be turned on for that
      # to happen.
      { \\unalias command; \\unset -f command; } >/dev/null 2>&1
      [ -n "$ZSH_VERSION" ] && options[POSIX_BUILTINS]=on # make zsh find *builtins* with 'command' too.

      while :; do # Resolve potential symlinks until the ultimate target is found.
          [ -L "$target" ] || [ -e "$target" ] || { command printf '%s\\n' "ERROR: '$target' does not exist." >&2; return 1; }
          command cd "$(command dirname -- "$target")" # Change to target dir; necessary for correct resolution of target path.
          fname=$(command basename -- "$target") # Extract filename.
          [ "$fname" = '/' ] && fname='' # !! curiously, 'basename /' returns '/'
          if [ -L "$fname" ]; then
            # Extract [next] target path, which may be defined
            # *relative* to the symlink's own directory.
            # Note: We parse 'ls -l' output to find the symlink target
            #       which is the only POSIX-compliant, albeit somewhat fragile, way.
            target=$(command ls -l "$fname")
            target=\${target#* -> }
            continue # Resolve [next] symlink target.
          fi
          break # Ultimate target reached.
      done
      targetDir=$(command pwd -P) # Get canonical dir. path
      # Output the ultimate target's canonical path.
      # Note that we manually resolve paths ending in /. and /.. to make sure we have a normalized path.
      if [ "$fname" = '.' ]; then
        command printf '%s\\n' "\${targetDir%/}"
      elif  [ "$fname" = '..' ]; then
        # Caveat: something like /var/.. will resolve to /private (assuming /var@ -> /private/var), i.e. the '..' is applied
        # AFTER canonicalization.
        command printf '%s\\n' "$(command dirname -- "\${targetDir}")"
      else
        command printf '%s\\n' "\${targetDir%/}/$fname"
      fi
    )

    script_dir=$(cd "$(dirname -- "$(rreadlink "$0")")" && pwd -P)
    sysroot=$(cd "$script_dir/.." && pwd -P)

    include_system_headers=1
    for arg in "$@"; do
      if [ "$arg" = "-nostdinc" ]; then
        include_system_headers=0
        break
      fi
    done

    if [ "$include_system_headers" -eq 1 ]; then
      set -- ${systemHeaderArgs} "$@"
    fi

    "$(rreadlink "$0")-orig" "$@"
  `).withPermissions({ executable: true });
}
