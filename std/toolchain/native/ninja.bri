import * as std from "/core";
import stage2 from "/toolchain/stage2";
import glibc from "./glibc.bri";
import binutils from "./binutils.bri";
import linuxHeaders from "./linux_headers.bri";
import gcc from "./gcc.bri";
import python from "./python.bri";
import zlib from "./zlib.bri";
import expat from "./expat.bri";
import openssl from "./openssl.bri";
import gdbm from "./gdbm.bri";
import bzip2 from "./bzip2.bri";
import libffi from "./libffi.bri";

export default std.memo((): std.Lazy<std.Directory> => {
  const sourceArchive = std.download({
    url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/ninja-1.11.1.tar.gz",
    hash: std.sha256Hash(
      "31747ae633213f1eda3842686f83c2aa1412e0f5691d1c14dbbcc67fe7400cea",
    ),
  });

  // TODO: Remove this!
  const dependencies = std.merge(
    zlib(),
    expat(),
    openssl(),
    gdbm(),
    bzip2(),
    libffi(),
  );

  const toolchain = std.merge(glibc(), binutils(), gcc(), linuxHeaders());

  return std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-c",
        std.indoc`
          set -euo pipefail

          tar -xf "$source" --strip-components=1 --no-same-owner --no-same-permissions

          python3 configure.py --bootstrap

          mkdir -p "$BRIOCHE_OUTPUT"/bin
          install -vm755 ninja "$BRIOCHE_OUTPUT"/bin
        `,
      ],
      env: {
        source: sourceArchive,
        PATH: std.tpl`${python()}/bin:${toolchain}/bin:${stage2()}/bin`,
        PYTHONHOME: python(),
        // TODO: Remove this
        LD_LIBRARY_PATH: std.tpl`${dependencies}/lib`,
      },
    })
    .cast("directory");
});
