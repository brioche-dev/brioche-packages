import * as std from "/core";
import stage2 from "/toolchain/stage2";
import glibc from "./glibc.bri";
import binutils from "./binutils.bri";
import linuxHeaders from "./linux_headers.bri";
import gcc from "./gcc.bri";
import python from "./python.bri";
import zlib from "./zlib.bri";
import expat from "./expat.bri";
import openssl from "./openssl.bri";
import gdbm from "./gdbm.bri";
import bzip2 from "./bzip2.bri";
import libffi from "./libffi.bri";
import { wrapWithScript } from "../utils.bri";

export default std.memo((): std.Lazy<std.Directory> => {
  const sourceArchive = std
    .download({
      url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/ninja-1.11.1.tar.gz",
      hash: std.sha256Hash("31747ae633213f1eda3842686f83c2aa1412e0f5691d1c14dbbcc67fe7400cea"),
    });

  // TODO: Remove this!
  const dependencies = std.merge(
    zlib(),
    expat(),
    openssl(),
    gdbm(),
    bzip2(),
    libffi(),
  );

  const toolchain = std.merge(
    glibc(),
    binutils(),
    gcc(),
    linuxHeaders(),
  );

  return std.process({
    command: std.tpl`${stage2()}/bin/bash`,
    args: [
      "-c",
      `
        set -euo pipefail

        tar -xf "$source" --strip-components=1 --no-same-owner --no-same-permissions

        python3 configure.py --bootstrap

        mkdir -p "$BRIOCHE_OUTPUT"/bin
        install -vm755 ninja "$BRIOCHE_OUTPUT"/bin
      `,
    ],
    env: {
      source: sourceArchive,
      PATH: std.tpl`${python()}/bin:${toolchain}/bin:${stage2()}/bin`,
      PYTHONHOME: python(),
      // TODO: Remove this
      LD_LIBRARY_PATH: std.tpl`${dependencies}/lib`,
    },
  }).cast("directory");
});


function temporaryToolchain(): std.Lazy<std.Directory> {
  let toolchain = std.merge(glibc(), binutils(), gcc(), linuxHeaders());

  toolchain = wrapWithScript(toolchain, {
    paths: [
      "bin/x86_64-pc-linux-gnu-c++",
      "bin/x86_64-pc-linux-gnu-g++",
      "bin/x86_64-pc-linux-gnu-gcc",
      "bin/x86_64-pc-linux-gnu-gcc-13.2.0",
      "bin/c++",
      "bin/g++",
      "bin/gcc",
    ],
    renameSuffix: "-orig",
    script: std.file(std.indoc`
      #!/usr/bin/env sh
      # MIT license: https://stackoverflow.com/a/29835459
      rreadlink() ( # Execute the function in a *subshell* to localize variables and the effect of 'cd'.

        target=$1 fname= targetDir= CDPATH=

        # Try to make the execution environment as predictable as possible:
        # All commands below are invoked via 'command', so we must make sure that 'command'
        # itself is not redefined as an alias or shell function.
        # (Note that command is too inconsistent across shells, so we don't use it.)
        # 'command' is a *builtin* in bash, dash, ksh, zsh, and some platforms do not even have
        # an external utility version of it (e.g, Ubuntu).
        # 'command' bypasses aliases and shell functions and also finds builtins
        # in bash, dash, and ksh. In zsh, option POSIX_BUILTINS must be turned on for that
        # to happen.
        { \\unalias command; \\unset -f command; } >/dev/null 2>&1
        [ -n "$ZSH_VERSION" ] && options[POSIX_BUILTINS]=on # make zsh find *builtins* with 'command' too.

        while :; do # Resolve potential symlinks until the ultimate target is found.
            [ -L "$target" ] || [ -e "$target" ] || { command printf '%s\\n' "ERROR: '$target' does not exist." >&2; return 1; }
            command cd "$(command dirname -- "$target")" # Change to target dir; necessary for correct resolution of target path.
            fname=$(command basename -- "$target") # Extract filename.
            [ "$fname" = '/' ] && fname='' # !! curiously, 'basename /' returns '/'
            if [ -L "$fname" ]; then
              # Extract [next] target path, which may be defined
              # *relative* to the symlink's own directory.
              # Note: We parse 'ls -l' output to find the symlink target
              #       which is the only POSIX-compliant, albeit somewhat fragile, way.
              target=$(command ls -l "$fname")
              target=\${target#* -> }
              continue # Resolve [next] symlink target.
            fi
            break # Ultimate target reached.
        done
        targetDir=$(command pwd -P) # Get canonical dir. path
        # Output the ultimate target's canonical path.
        # Note that we manually resolve paths ending in /. and /.. to make sure we have a normalized path.
        if [ "$fname" = '.' ]; then
          command printf '%s\\n' "\${targetDir%/}"
        elif  [ "$fname" = '..' ]; then
          # Caveat: something like /var/.. will resolve to /private (assuming /var@ -> /private/var), i.e. the '..' is applied
          # AFTER canonicalization.
          command printf '%s\\n' "$(command dirname -- "\${targetDir}")"
        else
          command printf '%s\\n' "\${targetDir%/}/$fname"
        fi
      )

      script_dir=$(cd "$(dirname -- "$(rreadlink "$0")")" && pwd -P)
      sysroot=$(cd "$script_dir/.." && pwd -P)

      include_system_headers=1
      for arg in "$@"; do
        if [ "$arg" = "-nostdinc" ]; then
          include_system_headers=0
          break
        fi
      done

      if [ "$include_system_headers" -eq 1 ]; then
        set -- \
          -isystem "$sysroot/include/c++/13.2.0/x86_64-pc-linux-gnu" \
          -isystem "$sysroot/include/c++/13.2.0" \
          -isystem "$sysroot/include" \
          "$@"
      fi
      set -- --sysroot="$sysroot" "$@"

      "$(rreadlink "$0")-orig" "$@"
    `).withPermissions({ executable: true }),
  });

  return toolchain;
}
