import * as std from "/core";
import stage2 from "/toolchain/stage2";

export default std.memo((): std.Lazy<std.Directory> => {
  const sourceArchive = std.download({
    url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/flex-2.6.4.tar.gz",
    hash: std.sha256Hash(
      "e87aae032bf07c26f85ac0ed3250998c37621d95f8bd748b31f15b33c45ee995",
    ),
  });

  // TODO: Figure out why this build fails when using `.unpack()`
  let flex = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-c",
        std.indoc`
          set -euo pipefail

          tar -xf "$sourceArchive" --strip-components=1 --no-same-owner --no-same-permissions

          ./configure --prefix=/
          make
          make install DESTDIR="$BRIOCHE_OUTPUT"
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
        sourceArchive,
      },
    })
    .cast("directory");
  flex = flex.insert("bin/lex", std.symlink({ target: "flex" }));
  flex = flex.insert("share/man/man1/lex.1", std.symlink({ target: "flex.1" }));

  return flex;
});
