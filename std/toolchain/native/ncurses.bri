import * as std from "/core";
import stage2 from "/toolchain/stage2";

export default std.memo((): std.Lazy<std.Directory> => {
  const source = std
    .download({
      url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/ncurses-6.4.tar.gz",
      hash: std.sha256Hash(
        "6931283d9ac87c5073f30b6290c4c75f21632bb4fc3603ac8100812bed248159",
      ),
    })
    .unpack("tar", "gzip")
    .peel()
    .cast("directory");

  let ncurses = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-c",
        std.indoc`
          set -euo pipefail

          ./configure \
            --prefix=/ \
            --with-shared \
            --without-debug \
            --without-normal \
            --with-cxx-shared \
            --enable-pc-files \
            --enable-widec \
            --with-pkg-config-libdir=/lib/pkgconfig
          make
          make install DESTDIR="$BRIOCHE_OUTPUT"
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
      },
      workDir: source,
    })
    .cast("directory");

  // Add library aliases to support programs that try to link against
  // non-wide versions of Ncurses libraries
  for (const lib of ["ncurses", "form", "panel", "menu"]) {
    ncurses = ncurses.insert(`lib/lib${lib}.so`, std.file(`INPUT(-l${lib}w)`));
    ncurses = ncurses.insert(
      `lib/pkgconfig/${lib}.pc`,
      std.symlink({ target: `${lib}w.pc` }),
    );
  }

  // Add aliases for programs that try to link against `curses`
  ncurses = ncurses.insert("lib/libcursesw.so", std.file("INPUT(-lncursesw)"));
  ncurses = ncurses.insert(
    "lib/libcurses.so",
    std.symlink({ target: "libncurses.so" }),
  );

  return ncurses;
});
