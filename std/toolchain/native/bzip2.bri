import * as std from "/core";
import stage2 from "/toolchain/stage2";

export default std.memo((): std.Lazy<std.Directory> => {
  const sourcePatch = std.download({
    url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/patches/bzip2-1.0.8-install_docs-1.patch",
    hash: std.sha256Hash(
      "35e3bbd9642af51fef2a8a83afba040d272da42d7e3a251d8e43255a7b496702",
    ),
  });

  let source = std
    .download({
      url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/bzip2-1.0.8.tar.gz",
      hash: std.sha256Hash(
        "ab5a03176ee106d3f0fa90e381da478ddae405918153cca248e682cd0c4a2269",
      ),
    })
    .unpack("tar", "gzip")
    .peel()
    .cast("directory");
  source = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-c",
        std.indoc`
          set -euo pipefail

          cd "$BRIOCHE_OUTPUT"

          patch -Np1 -i "$sourcePatch"
          sed -i 's@\\(ln -s -f \\)$(PREFIX)/bin/@\\1@' Makefile
          sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile
        `,
      ],
      env: {
        PATH: std.tpl`${stage2()}/bin`,
        sourcePatch,
      },
      outputScaffold: source,
    })
    .cast("directory");

  let bzip2 = std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-c",
        std.indoc`
          set -euo pipefail

          make -f Makefile-libbz2_so
          make clean

          make
          make PREFIX="$BRIOCHE_OUTPUT" install

          cp -a libbz2.so.* "$BRIOCHE_OUTPUT/lib"
          ln -s libbz2.so.1.0.8 "$BRIOCHE_OUTPUT/lib/libbz2.so"
        `,
      ],
      env: {
        sourcePatch,
        PATH: std.tpl`${stage2()}/bin`,
      },
      workDir: source,
      outputScaffold: std.directory({ lib: std.directory() }),
    })
    .cast("directory");
  bzip2 = bzip2.insert(
    "lib/libbz2.so",
    std.symlink({ target: "libbz2.so.1.0.8" }),
  );

  return bzip2;
});
