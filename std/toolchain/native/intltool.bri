import * as std from "/core";
import stage2 from "/toolchain/stage2";
import perl from "./perl.bri";
import perlXmlParser from "./perl_xml_parser.bri";
import expat from "./expat.bri";

export default std.memo((): std.Lazy<std.Directory> => {
  let source = std
    .download({
      url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/intltool-0.51.0.tar.gz",
      hash: std.sha256Hash(
        "67c74d94196b153b774ab9f89b2fa6c6ba79352407037c8c14d5aeb334e959cd",
      ),
    })
    .unpack("tar", "gzip")
    .peel()
    .cast("directory");

  // Fix warning from Perl >=5.22
  source = std
    .process({
      command: std.tpl`${stage2()}/bin/sed`,
      args: [
        "-i",
        "s:\\\\\\${:\\\\\\$\\\\{:",
        std.tpl`${std.outputPath}/intltool-update.in`,
      ],
      outputScaffold: source,
    })
    .cast("directory");

  const perlDep = std.merge(perl(), perlXmlParser());

  return std
    .process({
      command: std.tpl`${stage2()}/bin/bash`,
      args: [
        "-c",
        std.indoc`
          set -euo pipefail

          ./configure --prefix=/
          make
          make install DESTDIR="$BRIOCHE_OUTPUT"
        `,
      ],
      env: {
        PATH: std.tpl`${perlDep}/bin:${stage2()}/bin`,
        // expat is dynamically loaded by the Perl XML::Parser module
        // TODO: Handle this in the `perl()` function somehow
        LD_LIBRARY_PATH: std.tpl`${expat()}/lib`,
      },
      workDir: source,
    })
    .cast("directory");
});
