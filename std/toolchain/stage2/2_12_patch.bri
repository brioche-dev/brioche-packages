import * as std from "/core";
import { bootstrapRun } from "../stage0";
import stage1 from "../stage1";

export default std.memo(async (): Promise<std.Lazy<std.Directory>> => {
  const sourceArchive = std.download({
    url: "https://development-content.brioche.dev/linuxfromscratch.org/v12.0/packages/patch-2.7.6.tar.xz",
    hash: std.sha256Hash(
      "ac610bda97abe0d9f6b7c963255a11dcb196c25e337c61f94e4778d632f1d8fd",
    ),
  });

  return bootstrapRun({
    script: `
      set -euo pipefail

      export PATH="$stage1/usr/bin:/usr/lib/gcc/x86_64-linux-gnu/12\${PATH:+:$PATH}"

      mkdir -p source
      tar xf "$source" -C source --strip-components=1 --no-same-owner --no-same-permissions
      cd source

      ./configure \
        --prefix=/usr \
        --host="$TARGET" \
        --build="$(./build-aux/config.guess)"

      make
      make install DESTDIR="$BRIOCHE_OUTPUT"
    `,
    env: {
      source: sourceArchive,
      BRIOCHE_OUTPUT: std.outputPath,
      TARGET: "x86_64-lfs-linux-gnu",
      stage1: stage1(),
    },
  });
});
